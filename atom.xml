<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WEAF 周刊</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://weafteam.github.io/"/>
  <updated>2019-03-08T08:11:46.315Z</updated>
  <id>http://weafteam.github.io/</id>
  
  <author>
    <name>WEAF</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从源码构建TensorFlow2.0</title>
    <link href="http://weafteam.github.io/posts/c05ce623/"/>
    <id>http://weafteam.github.io/posts/c05ce623/</id>
    <published>2019-03-05T11:07:57.000Z</published>
    <updated>2019-03-08T08:11:46.315Z</updated>
    
    <content type="html"><![CDATA[<h3 id="从源码安装tensorflow未发布版本2.0">从源码安装TensorFlow（未发布版本2.0）</h3><h4 id="今天想尝一尝tf2.0的鲜就尝试去从源码构建tensorflow2.0版本的gpu-wheel包">1. 今天想尝一尝tf2.0的鲜，就尝试去从源码构建TensorFlow2.0版本的GPU wheel包。</h4><h4 id="首先你需要准备一些什么">2.首先你需要准备一些什么：</h4><ul><li>Ubuntu16.04</li><li>bazel(这个安装见https://docs.bazel.build/versions/master/install-ubuntu.html)（so easy）</li><li>gcc4.8， g++4.8</li><li>python3.6（包括six，numpy， wheel，mock，keras_applications, keras_preprocessing）具体的依赖版本可以在{tensorflow}/tensorflow/tools/pip_package/setup.py里面查看。</li></ul><h4 id="安装构建tensorflow依赖软件">3. 安装构建TensorFlow依赖软件</h4><p>安装gcc和g++（TensorFlow使用gcc4.x构建，所以以下的gcc和g++版本都是4.8）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> install gcc and g++</span><br><span class="line"><span class="meta">$</span> sudo apt-get update</span><br><span class="line"><span class="meta">$</span> sudo apt-get install gcc-4.8 g++4.8</span><br><span class="line"><span class="meta">$</span> sudo rm /usr/bin/gcc </span><br><span class="line"><span class="meta">$</span> sudo rm /usr/bin/g++</span><br><span class="line"><span class="meta">$</span> sudo ln -s /usr/bin/gcc-4.8 /usr/bin/gcc</span><br><span class="line"><span class="meta">$</span> sudo ln -s /usr/bin/g++-4.8 /usr/bin/g++</span><br></pre></td></tr></table></figure><p>安装python,你可以选择一个已经有的python环境，或者新建一个python环境，将以上描述的包依此安装。TensorFlow2.0版本依赖的python包版本为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">REQUIRED_PACKAGES = [</span><br><span class="line">    &apos;absl-py &gt;= 0.7.0&apos;,</span><br><span class="line">    &apos;astor &gt;= 0.6.0&apos;,</span><br><span class="line">    &apos;gast &gt;= 0.2.0&apos;,</span><br><span class="line">    &apos;google_pasta &gt;= 0.1.2&apos;,</span><br><span class="line">    &apos;keras_applications &gt;= 1.0.6&apos;,</span><br><span class="line">    &apos;keras_preprocessing &gt;= 1.0.5&apos;,</span><br><span class="line">    &apos;numpy &gt;= 1.14.5, &lt; 2.0&apos;,</span><br><span class="line">    &apos;six &gt;= 1.10.0&apos;,</span><br><span class="line">    &apos;protobuf &gt;= 3.6.1&apos;,</span><br><span class="line">    &apos;tb-nightly &gt;= 1.14.0a20190301, &lt; 1.14.0a20190302&apos;,</span><br><span class="line">    &apos;tf-estimator-nightly &gt;= 1.14.0.dev2019030115, &lt; 1.14.0.dev2019030116&apos;,</span><br><span class="line">    &apos;termcolor &gt;= 1.1.0&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="克隆tensorflow库">4.克隆TensorFlow库。</h4><p>首先，你需要git，然后根据以下命令clone，然后构建TensorFlow项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone https://github.com/tensorflow/tensorflow.git</span><br><span class="line"><span class="meta">$</span> cd tensorflow</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> git checkout branch_name  # 这里是r2.0</span><br><span class="line"><span class="meta">$</span> bazel test -c opt -- //tensorflow/... -//tensorflow/compiler/... -//tensorflow/lite/...</span><br></pre></td></tr></table></figure><p>不出意外，测试结束以后，进行项目构建</p><h4 id="配置项目">5. 配置项目</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ./configure</span><br></pre></td></tr></table></figure><p>以下是项目配置的一个过程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">Please specify the location of python.[Default is /home/milittle/anaconda3/bin/python] # 注意这个就是你刚才安装的python环境</span><br><span class="line">Found possible Python library paths:</span><br><span class="line">/home/milittle/anaconda/lib/python3.6/site-packages</span><br><span class="line">Please input the desired Python library path to use. Default is [/home/milittle/anaconda3/lib/python3.6/site-packages]</span><br><span class="line">Do you wish to build TensorFlow with XLA JIT support? [Y/n]:Y</span><br><span class="line">Do you wish to build TensorFlow with OpenCL SUCL support?[y/N]:N</span><br><span class="line">Do you wish to build TensorFlow with ROCm support?[y/N]:N</span><br><span class="line">Do you wish to build TensorFlow with CUDA support?[y/N]:y</span><br><span class="line">Please specify the CUDA SDK version you want to use.[Leave empty to default to CUDA 10.0]:9.0</span><br><span class="line">Please specify the location where CUDA 9.0 toolkit is installed. Refer to README.md for more details.[Default is /usr/local/cuda]:/home/milittle/cuda-9.0</span><br><span class="line">Please specify the cuDNN version you want to use.[Leave empty to default to cuDNN 7]:7.1.4</span><br><span class="line">Please specifu the location where cuDNN 7 library is installed.Refer to README.md for more details.[Default is /home/milittle/cuda-9.0]:</span><br><span class="line">Do you wish to build TensorFlow with TensorRT support?[y/N]:N</span><br><span class="line">Please specify the locally installed NCCL version you want to use. [Default is to use hppts://github.com/nvidia/nccl]:</span><br><span class="line">Please specify a list of comma-separated Cuda compute capabilities you want to build with.</span><br><span class="line">You can find the compute capability of your device at: https://developer.nvidia.com/cuda-gpus.</span><br><span class="line">Please note that each additional compute capability significantly increases your</span><br><span class="line">build time and binary size. [Default is: 6.1, 6.1, 6.1, 6.1]:6.1</span><br><span class="line">Do you want to use clang as CUDA compiler? [y/N]:</span><br><span class="line">nvcc will be used as CUDA compiler.</span><br><span class="line">Please specify which gcc should be used by nvcc as the host compiler. [Default is /usr/bin/gcc]:</span><br><span class="line">Do you wish to build TensorFlow with MPI support? [y/N]:</span><br><span class="line">No MPI support will be enabled for TensorFlow.</span><br><span class="line">Please specify optimization flags to use during compilation when bazel option "--config=opt" is specified [Default is -march=native]:</span><br><span class="line"></span><br><span class="line">Would you like to interactively configure ./WORKSPACE for Android builds? [y/N]:</span><br><span class="line">Not configuring the WORKSPACE for Android builds.</span><br><span class="line"></span><br><span class="line">Preconfigured Bazel build configs. You can use any of the below by adding "--config=&lt;&gt;" to your build command. See .bazelrc for more details.</span><br><span class="line">    --config=mkl            # Build with MKL support.</span><br><span class="line">    --config=monolithic     # Config for mostly static monolithic build.</span><br><span class="line">    --config=gdr# Build with GDR support</span><br><span class="line">    --config=verbs# Build with libverbs support</span><br><span class="line">    --config=ngraph# BUild with Intel nGraph support</span><br><span class="line">    --config=numa# Build with NUMA suuport</span><br><span class="line">    --config=dynamic_kernels # (Experimental) Build kernels into separate shared objects.</span><br><span class="line">Preconfigured Bazel build configs to DISABLE default on feature :</span><br><span class="line">--config=noaws# Disable AWS S3 filesystem support</span><br><span class="line">--config=nogcp# Disable GCP support</span><br><span class="line">--config=nohdfs# Disable HDFS support</span><br><span class="line">--config=noignite# Disable Apache Ignite support</span><br><span class="line">--config=nokafka# Disable Apache Kafka support</span><br><span class="line">--config=nonccl# Disable NVIDIA NCCL support</span><br><span class="line">Configuration finished</span><br></pre></td></tr></table></figure><p>以上配置结束，需要注意的是，一个python的环境，还有python的包路径，CUDA的安装路径，cuDNN的路径，一般是要放在CUDA路径里面的，还有就是你的GPU的算力，还有就是gcc的位置，这个也很关键。</p><h4 id="构建pip安装包">6. 构建pip安装包</h4><p>仅仅支持CPU</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package</span><br></pre></td></tr></table></figure><p>支持GPU</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bazel build --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package</span><br></pre></td></tr></table></figure><p>以上命令构建好了pip构建命令，通过以下就可以生成wheel包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg</span><br></pre></td></tr></table></figure><p>以上的命令就在/tmp/tensorflow_pkg中生成了要的.whl包。</p><p>尽管可以在同一个源代码树下构建 CUDA 和非 CUDA 配置，但建议您在同一个源代码树中的这两种配置之间切换时运行 <code>bazel clean</code>。</p><h4 id="安装.whl包">7. 安装.whl包</h4><p>当然是在你的python环境（这个环境和上面依赖的环境可以不是同一个）中，使用pip直接安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install /tmp/tensorflow_pkg/tensorflow-version-tags.whl</span><br></pre></td></tr></table></figure><h4 id="结语">8. 结语</h4><p>今天为了尝试一下从源码安装TensorFlow，这样的好处是以后可以根据自己的需求定制编译，然后使得自己的机器性能达到最大化，在这个过程中也学到了很多。大家有什么问题可以联系我：</p><p>QQ：329804334</p><p>Mail： mizeshuang@gmail.com</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3 id=&quot;从源码安装tensorflow未发布版本2.0&quot;&gt;从源码安装TensorFlow（未发布版本2.0）&lt;/h3&gt;
&lt;h4 id=&quot;今天想尝一尝tf2.0的鲜就尝试去从源码构建tensorflow2.0版本的gpu-wheel包&quot;&gt;1.
        
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/categories/TensorFlow/"/>
    
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号后台在SpringBoot2.0中的实现（中）</title>
    <link href="http://weafteam.github.io/posts/5e9a3b51/"/>
    <id>http://weafteam.github.io/posts/5e9a3b51/</id>
    <published>2019-02-19T10:13:02.000Z</published>
    <updated>2019-03-08T08:11:46.314Z</updated>
    
    <content type="html"><![CDATA[<p>继之前的微信公众号实现，现在第二篇来袭，写了一些最基本的使用和配置。</p><h2 id="一申请公众号">一、申请公众号</h2><p>此次我们开发使用的是服务号，大部分微信接口都是拥有权限的。 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/wechat-1.png" alt="wechat-1"> 不同的账户拥有的权限不尽相同。 这个我们可以根据权限文档进行查看！</p><p><a href="https://mp.weixin.qq.com/advanced/advanced?action=table&amp;token=1776791094&amp;lang=zh_CN" target="_blank" rel="noopener">接口权限：https://mp.weixin.qq.com/advanced/advanced?action=table&amp;token=1776791094&amp;lang=zh_CN</a></p><h2 id="二设置基本配置">二、设置基本配置</h2><p>这里最基本的<strong>基本配置</strong>在上一节中我们已经说到了，这里我们需要配置一些其他的东西。 首先我们需要绑定开发者，开发者绑定位置可已在<strong>开发者工具</strong>-&gt;<strong>web开发者工具</strong>里边进行绑定，这样我们就可以使用web开发工具，并调试自己的界面 具体文档和下载位置：<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1455784140" class="uri" target="_blank" rel="noopener">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1455784140</a></p><p>另外我们需要配置<strong>公众号设置</strong>-&gt;<strong>功能设置</strong>，这里边的<em>业务域名</em>、<em>JS接口安全域名</em>、<em>网页授权域名</em>，这样我们的工作好就可以使用js-sdk，网页授权等功能。</p><p>还要记得在<strong>基本配置</strong>里边配置好<strong>IP白名单</strong>哦。</p><h2 id="三个性化菜单">三、个性化菜单</h2><p>因为打开开发者中心， 导致自定义菜单不可用，这样我们需要通过接口定义菜单， 具体我们可以通过<a href="https://mp.weixin.qq.com/debug?token=1185341662&amp;lang=zh_CN" target="_blank" rel="noopener">微信公众平台接口调试工具：https://mp.weixin.qq.com/debug?token=1185341662&amp;lang=zh_CN</a>进行设置就可以了。</p><p>菜单定义可以通过定义好的json数据进行配置 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="attr">"button"</span>:[</span><br><span class="line">     &#123;    </span><br><span class="line">        <span class="attr">"type"</span>:<span class="string">"click"</span>,</span><br><span class="line">        <span class="attr">"name"</span>:<span class="string">"今日歌曲"</span>,</span><br><span class="line">         <span class="attr">"key"</span>:<span class="string">"V1001_TODAY_MUSIC"</span> &#125;,</span><br><span class="line">    &#123;     <span class="attr">"name"</span>:<span class="string">"菜单"</span>,</span><br><span class="line">        <span class="attr">"sub_button"</span>:[</span><br><span class="line">        &#123;            </span><br><span class="line">            <span class="attr">"type"</span>:<span class="string">"view"</span>,</span><br><span class="line">            <span class="attr">"name"</span>:<span class="string">"搜索"</span>,</span><br><span class="line">            <span class="attr">"url"</span>:<span class="string">"http://www.soso.com/"</span>&#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                         <span class="attr">"type"</span>:<span class="string">"miniprogram"</span>,</span><br><span class="line">                         <span class="attr">"name"</span>:<span class="string">"wxa"</span>,</span><br><span class="line">                         <span class="attr">"url"</span>:<span class="string">"http://mp.weixin.qq.com"</span>,</span><br><span class="line">                         <span class="attr">"appid"</span>:<span class="string">"wx286b93c14bbf93aa"</span>,</span><br><span class="line">                         <span class="attr">"pagepath"</span>:<span class="string">"pages/lunar/index"</span></span><br><span class="line">            &#125;,</span><br><span class="line">             &#123;</span><br><span class="line">        <span class="attr">"type"</span>:<span class="string">"click"</span>,</span><br><span class="line">        <span class="attr">"name"</span>:<span class="string">"赞一下我们"</span>,</span><br><span class="line">        <span class="attr">"key"</span>:<span class="string">"V1001_GOOD"</span></span><br><span class="line">           &#125;]</span><br><span class="line"> &#125;],</span><br><span class="line"><span class="attr">"matchrule"</span>:&#123;</span><br><span class="line">  <span class="attr">"tag_id"</span>:<span class="string">"2"</span>,</span><br><span class="line">  <span class="attr">"sex"</span>:<span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"country"</span>:<span class="string">"中国"</span>,</span><br><span class="line">  <span class="attr">"province"</span>:<span class="string">"广东"</span>,</span><br><span class="line">  <span class="attr">"city"</span>:<span class="string">"广州"</span>,</span><br><span class="line">  <span class="attr">"client_platform_type"</span>:<span class="string">"2"</span>,</span><br><span class="line">  <span class="attr">"language"</span>:<span class="string">"zh_CN"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://weaf.oss-cn-beijing.aliyuncs.com/we-chat-1.png" alt="wechat-2"></p><p>更多参数请看文档：<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1455782296" class="uri" target="_blank" rel="noopener">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1455782296</a></p><h2 id="四代码的实现">四、代码的实现</h2><p>之前代码实现，只是实现了最近本的接入，其他相关的都没有涉及。 这次我们涉及的比较多哦。</p><h3 id="请求触发响应">1.请求触发响应</h3><p>通过第三步，我们设置了个性化菜单，有部分我们添加的按钮，是需要触发事件的，那么我们如何响应，并处理呢？</p><p>上代码,这里我们配置成功后就可以修改响应接受微信得到消息了。具体修改如下↓。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"verification"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">weChatVerification</span><span class="params">(String signature, String timestamp, String nonce, String echostr, HttpServletRequest request)</span> <span class="keyword">throws</span> AesException </span>&#123;</span><br><span class="line">    log.info(<span class="string">"微信校验参数：signature=&#123;&#125;，timestamp=&#123;&#125;，nonce=&#123;&#125;，echostr=&#123;&#125;"</span>, signature, timestamp, nonce, echostr);</span><br><span class="line">    String res = weChatService.processRequest(request);</span><br><span class="line">    log.info(<span class="string">"微信消息回复体：&#123;&#125;"</span>, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>处理请求代码 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    String respMessage = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 默认返回的文本消息内容</span></span><br><span class="line">        String respContent = <span class="string">"请求处理异常，请稍候尝试！"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// xml请求解析</span></span><br><span class="line">        Map&lt;String, String&gt; requestMap = MessageUtil.getInstance().parseXml(request);</span><br><span class="line">        log.info(<span class="string">"微信消息体：&#123;&#125;"</span>, requestMap);</span><br><span class="line">        <span class="comment">// 发送方帐号（open_id）</span></span><br><span class="line">        String fromUserName = requestMap.get(<span class="string">"FromUserName"</span>);</span><br><span class="line">        <span class="comment">// 公众帐号</span></span><br><span class="line">        String toUserName = requestMap.get(<span class="string">"ToUserName"</span>);</span><br><span class="line">        <span class="comment">// 消息类型</span></span><br><span class="line">        String msgType = requestMap.get(<span class="string">"MsgType"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 回复文本消息</span></span><br><span class="line">        TextMessage textMessage = <span class="keyword">new</span> TextMessage();</span><br><span class="line">        textMessage.setToUserName(fromUserName);</span><br><span class="line">        textMessage.setFromUserName(toUserName);</span><br><span class="line">        textMessage.setCreateTime(System.currentTimeMillis());</span><br><span class="line">        textMessage.setMsgType(MessageUtil.RESP_MESSAGE_TYPE_TEXT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 文本消息</span></span><br><span class="line">        <span class="keyword">if</span> (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_TEXT)) &#123;</span><br><span class="line">            respContent = <span class="string">"谢谢您的关注，您可以通过点击下方“扫码入群”来加入我们的社群了解更多资讯和新闻哦(●'◡'●)！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 图片消息</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_IMAGE)) &#123;</span><br><span class="line">            respContent = <span class="string">"谢谢您的关注，您可以通过点击下方“扫码入群”来加入我们的社群了解更多资讯和新闻哦(●'◡'●)！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 地理位置消息</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_LOCATION)) &#123;</span><br><span class="line">            respContent = <span class="string">"谢谢您的关注，您可以通过点击下方“扫码入群”来加入我们的社群了解更多资讯和新闻哦(●'◡'●)！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 链接消息</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_LINK)) &#123;</span><br><span class="line">            respContent = <span class="string">"谢谢您的关注，您可以通过点击下方“扫码入群”来加入我们的社群了解更多资讯和新闻哦(●'◡'●)！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 音频消息</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_VOICE)) &#123;</span><br><span class="line">            respContent = <span class="string">"谢谢您的关注，您可以通过点击下方“扫码入群”来加入我们的社群了解更多资讯和新闻哦(●'◡'●)！"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 事件推送</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_EVENT)) &#123;</span><br><span class="line">            <span class="comment">// 事件类型</span></span><br><span class="line">            log.info(<span class="string">"微信公众平台接收到事件：&#123;&#125;"</span>, msgType);</span><br><span class="line">            String eventType = requestMap.get(<span class="string">"Event"</span>);</span><br><span class="line">            <span class="comment">// 订阅</span></span><br><span class="line">            <span class="keyword">if</span> (eventType.equals(MessageUtil.EVENT_TYPE_SUBSCRIBE)) &#123;</span><br><span class="line">                respContent = <span class="string">"谢谢您的关注，您可以通过点击下方“扫码入群”来加入我们的社群了解更多资讯和新闻哦(●'◡'●)！"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 取消订阅</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (eventType.equals(MessageUtil.EVENT_TYPE_UNSUBSCRIBE)) &#123;</span><br><span class="line">                <span class="comment">// TODO 取消订阅后用户再收不到公众号发送的消息，因此不需要回复消息</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 自定义菜单点击事件</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (eventType.equals(MessageUtil.EVENT_TYPE_CLICK)) &#123;</span><br><span class="line">                <span class="comment">// 事件KEY值，与创建自定义菜单时指定的KEY值对应</span></span><br><span class="line">                String eventKey = requestMap.get(<span class="string">"EventKey"</span>);</span><br><span class="line">                log.info(<span class="string">"微信公众平台接收到自定义菜单事件：eventType=&#123;&#125;,key=&#123;&#125;"</span>, eventType, eventKey);</span><br><span class="line">                <span class="keyword">if</span> (eventKey.equals(<span class="string">"JOIN_US"</span>)) &#123;</span><br><span class="line">                    PicMessage picMessage = <span class="keyword">new</span> PicMessage();</span><br><span class="line">                    picMessage.setToUserName(fromUserName);</span><br><span class="line">                    picMessage.setFromUserName(toUserName);</span><br><span class="line">                    picMessage.setCreateTime(<span class="keyword">new</span> Date().getTime());</span><br><span class="line">                    picMessage.setMsgType(MessageUtil.RESP_MESSAGE_TYPE_IMAGE);</span><br><span class="line">                    picMessage.setMediaId(<span class="string">"6X_RduJsEvCbkeXlbtbMS61PHRQtMBRMf52oTpzBj8k"</span>);</span><br><span class="line">                    <span class="keyword">return</span> picMessage.toXMLMessag();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    respContent = <span class="string">"点击了按钮"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        textMessage.setContent(respContent);</span><br><span class="line">        respMessage = MessageUtil.getInstance().textMessageToXml(textMessage);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> respMessage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体实现的代码整理好后我会通过github上传，届时请关注仓库<a href="https://github.com/songyaxu/wechat-service" class="uri" target="_blank" rel="noopener">https://github.com/songyaxu/wechat-service</a></p><h3 id="access_token刷新实现">2.access_token刷新实现</h3><p>我们使用公众号过程中会通过access_token获取相关信息，而access_token还具有实效性，那么我们该如何实现实时获取，且正确呢?</p><p>我这里实现的方式是最简单的方式，就是使用redis缓存起来，获取不到时重新获取。因为业务小的原因，我这里选用内存存储缓存GuavaCache进行缓存。</p><p>具体实现↓： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;wechat.appId&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String appId;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;wechat.appSecret&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String appSecret;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> GuavaCacheService&lt;String,String&gt; guavaCacheService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String ACCESS_KEY = <span class="string">"ACCESS_KEY_YUNCAIYUAN"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String GET_ACCESS_TOKEN_URL=<span class="string">"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential"</span>;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAccessToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String value = guavaCacheService.getIfPresent(ACCESS_KEY);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(value))&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    String accessToken = <span class="keyword">null</span>;</span><br><span class="line">    String getUrl = GET_ACCESS_TOKEN_URL + <span class="string">"&amp;appid="</span> + appId + <span class="string">"&amp;secret="</span> + appSecret;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String result = HttpUtil.get(getUrl);</span><br><span class="line">        JSONObject jsonObject = JSONObject.parseObject(result);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != jsonObject) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                accessToken = jsonObject.getString(<span class="string">"access_token"</span>);</span><br><span class="line">                <span class="comment">//Long expiresIn = jsonObject.getLong("expires_in");</span></span><br><span class="line">                guavaCacheService.put(ACCESS_KEY,accessToken);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JSONException e) &#123;</span><br><span class="line">                accessToken = StringUtils.EMPTY;</span><br><span class="line">                log.error(<span class="string">"获取token失败 errcode:&#123;&#125; errmsg:&#123;&#125;"</span>, jsonObject.getIntValue(<span class="string">"errcode"</span>), jsonObject.getString(<span class="string">"errmsg"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"获取了微信AccessToken：&#123;&#125;"</span>, accessToken);</span><br><span class="line">        <span class="keyword">return</span> accessToken;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">"请求失败"</span> + e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> StringUtils.EMPTY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体GuavaCache实现内存缓存机制可以查看:<a href="https://github.com/songyaxu/guava-cache" class="uri" target="_blank" rel="noopener">https://github.com/songyaxu/guava-cache</a></p><h2 id="五参考链接">五、参考链接</h2><p>1.微信工作平台技术文档：<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432" class="uri" target="_blank" rel="noopener">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432</a></p>]]></content>
    
    <summary type="html">
    
      微信公众号后台在SpringBoot2.0中的实现（中）
    
    </summary>
    
      <category term="JAVA" scheme="http://weafteam.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://weafteam.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>EOS智能合约从零到一-2</title>
    <link href="http://weafteam.github.io/posts/2f6d1543/"/>
    <id>http://weafteam.github.io/posts/2f6d1543/</id>
    <published>2019-01-25T05:49:23.000Z</published>
    <updated>2019-03-08T08:11:46.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一简介">一、简介</h1><p>本章节主要介绍钱包、钱包工具和我们安装工具的一些使用方法和对工具的一些了解，以便使我们接下来开发不会遇到问题。</p><h1 id="二了解eos工具">二、了解eos工具</h1><p>那么我们已经安装好了工具，也下载好了相应的eos生态所需的东西，那么他们是怎么工作的，又是怎么联系到一起的呢？如下图</p><ul><li>nodeos (node + eos = nodeos) - 这个是EOS生态系统的核心，它可以通过插件的配置来运行一个EOS节点，主要用途是：区块生产、提供API服务，和本地开发环境。</li><li>cleos (cli + eos = cleos) - 命令行工具，我们可以通过它来和区块链交互，或者用来管理钱包。</li><li>keosd (key + eos = keosd) - 是EOS钱包用来安全存储EOS私钥的工具。</li><li>eosio-cpp - 这个之前可能还没接触过，这个是eosio.cdt的一部分，它是用来把C++代码编译成WASM和生产ABI的工具。</li></ul><p><img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-8.png" alt="eos-8"></p><h1 id="三玩转wallet">三、玩转Wallet</h1><h3 id="创建钱包">1.创建钱包</h3><p>我们这里开始使用之前安装的工具了，这个我们先看下cleos 都有什么命令： <img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-9.png" alt="eos-9"> 这里我们看到有很多命令，后边有些我们会陆续的说到，其他说不到的，有兴趣的小伙伴可以去了解一下。 今天我们主要用到wallet命令，然后我们查看下wallet的用法。 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-10.png" alt="eos-10"> 这里边的命令我们都会用到，我简单列一个表，方便copy:</p><table><colgroup><col style="width: 25%"><col style="width: 25%"><col style="width: 25%"><col style="width: 25%"></colgroup><thead><tr class="header"><th>命令</th><th>使用方式</th><th>描述</th><th>展示</th></tr></thead><tbody><tr class="odd"><td>cleos wallet create</td><td>cleos wallet create –to-console/cleos wallet create –file</td><td>创建钱包,这里需要指定输出方式，输出的密码我们需要记下来，以便以后使用，我这里添加了一个 <strong>-n</strong> 的参数来指定钱包名称，不指定默认是<strong>default</strong></td><td><img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-11.png" alt="eos-11"></td></tr><tr class="even"><td>cleos wallet list</td><td>cleos wallet list</td><td>列出所有钱包</td><td><img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-12.png" alt="eos-12"></td></tr><tr class="odd"><td>cleos wallet open</td><td>cleos wallet open</td><td>打开一个存在的钱包，所谓打开，是使用list的时候可以看见。 <strong>-n</strong> 参数指定钱包名称，不指定默认是<strong>default</strong></td><td><img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-13.png" alt="eos-13"></td></tr><tr class="even"><td>cleos wallet lock/lock_all</td><td>cleos wallet lock / cleos wallet lock_all</td><td><strong>-n</strong>参数，锁上指定钱包，或者锁上所有打开的钱包</td><td><img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-14.png" alt="eos-14"></td></tr><tr class="odd"><td>cleos wallet unlock</td><td>cleos wallet unlock</td><td><strong>-n</strong>参数，解锁指定钱包，这时我们要用到之前创建钱包保存的密码，我们可以使用 <strong>–password xxxxxxxx</strong> 来指定，或者等待后续输入，_我们要注意钱包list的区别，发现解锁的钱包右上角会有一个*号_</td><td><img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-15.png" alt="eos-15"></td></tr><tr class="even"><td>cleos wallet keys</td><td>cleos wallet keys</td><td>可以列出当前所有解锁的钱包的公钥</td><td>因为现在我们还没创建任何key所以显示是一个空数组<strong>[]</strong></td></tr><tr class="odd"><td>cleos wallet create_key</td><td>cleos wallet create_key</td><td><strong>-n</strong>参数，指定key的钱包在哪个，默认是<strong>default</strong>,然后我们可以使用keys命令来查看</td><td><img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-16.png" alt="eos-16"></td></tr><tr class="even"><td>cleos wallet remove_key</td><td>cleos wallet remove_key KEY -n WALLET_NAME</td><td>这里指定了钱包还需要指定key,并且还得输入密码 也可以使用 <strong>–password xxxxxxxx</strong> 来指定密码，不指定钱包默认是<strong>default</strong></td><td><img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-17.png" alt="eos-17"></td></tr><tr class="odd"><td>cleos wallet import</td><td>cleos wallet import –private-key PRIVATE_KEY -n WALLET_NAME</td><td>这里我们指定私钥来导入key,我们使用 <strong>-n</strong> 来指定导入的钱包，不指定钱包默认是<strong>default</strong></td><td><img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-18.png" alt="eos-18"></td></tr><tr class="even"><td>cleos wallet private_keys</td><td>cleos wallet private_keys</td><td>列出钱包的私钥，我们使用 <strong>-n</strong> 来指定钱包，不指定钱包默认是<strong>default</strong>，也可以使用 <strong>–password xxxxxxxx</strong> 来指定密码</td><td><img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-19.png" alt="eos-19"></td></tr><tr class="odd"><td>cleos wallet stop</td><td>cleos wallet stop</td><td>(这个我没有用过，一般不会用到)</td><td></td></tr></tbody></table><h3 id="wallet实践">2.wallet实践</h3><p>这边我们开始到测试网创建自己的账号，然后导入，为我们后边使用测试网测试打好基础。</p><ol type="1"><li><a href="https://kylin.eosx.io/" target="_blank" rel="noopener">Fastest EOS Block Explorer:https://kylin.eosx.io/</a></li><li><a href="https://www.cryptokylin.io/" target="_blank" rel="noopener">麒麟测试网：https://www.cryptokylin.io/</a></li><li><a href="https://monitor.jungletestnet.io/" target="_blank" rel="noopener">Jungle 测试网：https://monitor.jungletestnet.io/</a> 我们使用以上网站就足够了</li></ol><h5 id="使用麒麟测试网">使用麒麟测试网</h5><p>麒麟测试网需要和eosx.io配合使用，Jungle单个自己其实就足够了，但是我们使用eosx.io自己其实也就满足了我们大多数的要求。</p><p>我们先使用麒麟测试网创建账户，获取 EOS token（这里注意到我说EOS是token，其实EOS是运行在eosio生态系统上的代币，这里没有coin一说，后面我们会讲到eosio.token,大家就会知道了）。</p><ul><li><a href="http://faucet.cryptokylin.io/create_account?valid_account_name" class="uri" target="_blank" rel="noopener">http://faucet.cryptokylin.io/create_account?valid_account_name</a> :刚我就是使用这个创建的testforeos11账户并拿到私钥导入到本地的。</li><li><a href="http://faucet.cryptokylin.io/get_token?valid_account_name" class="uri" target="_blank" rel="noopener">http://faucet.cryptokylin.io/get_token?valid_account_name</a>：可以获取EOS代币，每天做多1000.0000EOS。</li></ul><p>上边两点需要我们关注</p><ol type="1"><li><strong>需要替换掉[valid_account_name]为我们的名称</strong>。</li><li><strong>账户名称需要是12为，并且只允许输入字符 a-z 和1-5</strong>。</li></ol><p>以下信息是我使用麒麟测试网创建账户得到的，我们需要保存下来（如果是主网我们需谨慎保管好私钥，防止丢失和泄漏）。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"msg"</span>:<span class="string">"succeeded"</span>,</span><br><span class="line">    <span class="attr">"keys"</span>:&#123;</span><br><span class="line">        <span class="attr">"active_key"</span>:&#123;</span><br><span class="line">            <span class="attr">"public"</span>:<span class="string">"EOS5FEdnkyV9Rd61dsgQ5fxrNjyHFX2iK2uFo7CsGfWVV59ebfBMi"</span>,</span><br><span class="line">            <span class="attr">"private"</span>:<span class="string">"5HyeMsoDJi8vJCdnyZuga1JoEWq3nyM71Xb2Mnuv5zugsK6jr4W"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"owner_key"</span>:&#123;</span><br><span class="line">            <span class="attr">"public"</span>:<span class="string">"EOS7TFLT13QVegchWyich21M8fWXBauRaZLWey3z5oGUkr2r3jEL3"</span>,</span><br><span class="line">            <span class="attr">"private"</span>:<span class="string">"5HsRwxQW4eTt6z6RPjnTVihR9swiFTGcxiCkhhUjBheh87BzxQZ"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"account"</span>:<span class="string">"testforeos11"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到有两个公钥和私钥，这里和EOS的权限系统有关，后续我们会讲到。 下边是我们私用faucet获取的EOS代币 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-20.png" alt="eos-20"></p><p>我们可以使用eosx.io来查看具体信息，这边有兴趣的可以研究下这个网站，里边有很多东西后续我们可以用到。 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-21.png" alt="eos-21"></p><h5 id="使用jungle测试网">使用Jungle测试网</h5><p>Jungle和麒麟测试网不同，需要我们自己来生产公私钥，然后创建账户。 我们在本地生产两个（分别对应上边麒麟测试网中的active_key和owner_key）或者直接使用上边我们麒麟测试网的,我这里直接使用以上两个。 如图 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-22.png" alt="eos-22"> 下边会有一些详情，我们现在只需关注<strong>newaccount</strong>就可以了。 我们通过网站头部导航<strong>Faucet</strong>获取EOS 然后通过<strong>Account Info</strong>查看账户信息 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-23.png" alt="eos-23"></p><h3 id="创建账户">3.创建账户</h3><h5 id="概念介绍">概念介绍</h5><p>在eos中账户的概念并非和其他币如ETH的概念一样模棱两可，在这里eos的账户很明确。</p><p>以下是官方原文： <img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-24.png" alt="eos-24"> 这是我的翻译： 帐户是一组授权，存储在区块链中，用于标识发件人/收件人。它具有灵活的授权结构，使其可以由个人或组织/部门拥有，具体取决于如何配置权限。需要一个帐户才能向区块链发送或接收有效交易本教程系列使用两个“用户”帐户，bob和alice，以及默认的eosio帐户进行配置。此外，账户还可以为不同的合约来指定。</p><h5 id="创建账户-1">创建账户</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cleos create account eosio test1 EOS7HAsFJgnmfTsKcnYXVba67h6Fg5HZa2c1S3aGAuoxQGGCVx77G</span><br><span class="line">cleos create account eosio test2 EOS7HAsFJgnmfTsKcnYXVba67h6Fg5HZa2c1S3aGAuoxQGGCVx77G</span><br></pre></td></tr></table></figure><p>上边的eosio账户是eosio系统的默认账户（具体请查看），我们创建test1和test2是使用eosio账户的默认配置进行初始化的。（创建账户时eosio所在的钱包和当前公钥所在的钱包必须是unlocked状态，也就是右上角有*号） 这里我们需要注意的就是，现在的权限是依赖于eosio生态的，所以我们的本地节点需要启动起来。这里我们将账户和一个公钥关联起来，每一个EOSIO的账户都会关联一个公钥。 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-25.png" alt="eos-25"></p><h5 id="查看账户相关信息">查看账户相关信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleos get account test1</span><br></pre></td></tr></table></figure><p>使用以上命令可以查看账户绑定的公钥 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-26.png" alt="eos-26"></p><p>注意，实际上test1、test2同时拥有所有者和活动公钥。 EOSIO具有独特的授权结构，为您的帐户增加了安全性。 在使用与您的活动权限相关联的密钥时，您可以通过保持所有者密钥不开放来最小化帐户的风险。 这样，如果您的有效密钥遭到入侵，您可以使用所有者密钥重新控制您的帐户。 另外这里是本地环境，所以这里一个账户一个key拥有两个授权，其实我们通过麒麟测试网创建的账户来看，我们可以使用不同的key来绑定不同的授权。来确保我们账户的安全。这就是eos的强大的地方。 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-27.png" alt="eos-27"> 这里我通过指定API 使用cleos 工具获取麒麟测试网的账户公钥信息，我们可以看到不同的权限绑定在不同的key上。</p><h1 id="四补充eosio">四、补充eosio</h1><p>上边有用到eosio的账户，这是一个默认系统账户，也是eosio生态的一个主要的账户，这里我们在本地开发，避免不了使用这个账户，所以我们需要创建一个这个账户，那么我们使用我们默认的值来创建<strong>default</strong>钱包，并在里边创建一个key, 每一个EOSIO都会有这么一个key,我们称作Development Key。 这里有一个方法导入Development Key（这里会默认导入<strong>default</strong>钱包，导入时保证默认钱包是unlocked状态），使用一下脚本： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleos wallet import</span><br></pre></td></tr></table></figure></p><p>然后他会提示我们输入private key: 然后我们可以使用以下私钥： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3</span><br></pre></td></tr></table></figure></p><p><strong>这里是测试网络使用的，请勿放在主网的节点上！</strong> 这边默认的eosio的账户对应的key是EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV 但是我们发现使用获取账户名称的时候获取不到… <img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-28.png" alt="eos-28"></p><h1 id="五使用scatter钱包">五、使用Scatter钱包</h1><h5 id="创建网络节点">创建网络节点</h5><p>我们也可以使用<a href="https://get-scatter.com/" target="_blank" rel="noopener">Scatter:https://get-scatter.com/</a>钱包工具来查看并管理我们的钱包,我这里使用的是chrome的插件。 我们首先设置我们的节点，点开设置-&gt;NetWorks-&gt;New 来新建节点信息,填写完成并点击save(保存) 通过访问 <a href="http://localhost:8888/v1/chain/get_info" class="uri" target="_blank" rel="noopener">http://localhost:8888/v1/chain/get_info</a> 获取到本地节点信息(主要是chain_id) <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server_version"</span>:<span class="string">"ea08cfd3"</span>,</span><br><span class="line">    <span class="attr">"chain_id"</span>:<span class="string">"cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f"</span>,</span><br><span class="line">    <span class="attr">"head_block_num"</span>:<span class="number">984839</span>,</span><br><span class="line">    <span class="attr">"last_irreversible_block_num"</span>:<span class="number">984838</span>,</span><br><span class="line">    <span class="attr">"last_irreversible_block_id"</span>:<span class="string">"000f07063e914c8d5025bb3bd33fa29eb5bfcf09c6dfb881cd9afe507482cb20"</span>,</span><br><span class="line">    <span class="attr">"head_block_id"</span>:<span class="string">"000f07077dcb7d44e6e0c08e5c0bb76fc111bba2f10fb3584033d237a1c0e287"</span>,</span><br><span class="line">    <span class="attr">"head_block_time"</span>:<span class="string">"2019-01-25T09:18:29.000"</span>,</span><br><span class="line">    <span class="attr">"head_block_producer"</span>:<span class="string">"eosio"</span>,</span><br><span class="line">    <span class="attr">"virtual_block_cpu_limit"</span>:<span class="number">200000000</span>,</span><br><span class="line">    <span class="attr">"virtual_block_net_limit"</span>:<span class="number">1048576000</span>,</span><br><span class="line">    <span class="attr">"block_cpu_limit"</span>:<span class="number">199900</span>,</span><br><span class="line">    <span class="attr">"block_net_limit"</span>:<span class="number">1048576</span>,</span><br><span class="line">    <span class="attr">"server_version_string"</span>:<span class="string">"v1.5.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如下图 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-29.png" alt="eos-29"></p><h5 id="导入私钥">导入私钥</h5><p>找到Key Pairs-&gt;New ,填写私钥，填写一个名称（随意，并非account_name）,并点击保存</p><h5 id="创建身份">创建身份</h5><p>找到 Identities-&gt;New，选择我们本地节点，并选择我们导入的key的名称，选择一个权限，这里选择active就行，然后点击import。</p><p>测试网络也是以上步骤哦。 具体也可以参考六中的3.Chrome 钱包 Scatter 使用教程<a href="https://www.twle.cn/t/503" class="uri" target="_blank" rel="noopener">https://www.twle.cn/t/503</a></p><h1 id="六参考文章">六、参考文章</h1><ol type="1"><li>eos 开发者：<a href="https://developers.eos.io/eosio-home/docs/introduction" class="uri" target="_blank" rel="noopener">https://developers.eos.io/eosio-home/docs/introduction</a></li><li>EOS.GITHUB:<a href="https://github.com/EOSIO/eos" class="uri" target="_blank" rel="noopener">https://github.com/EOSIO/eos</a></li><li>Chrome 钱包 Scatter 使用教程<a href="https://www.twle.cn/t/503" class="uri" target="_blank" rel="noopener">https://www.twle.cn/t/503</a></li></ol>]]></content>
    
    <summary type="html">
    
      EOS智能合约从零到一-2
    
    </summary>
    
      <category term="区块链" scheme="http://weafteam.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://weafteam.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>EOS智能合约从零到一-1</title>
    <link href="http://weafteam.github.io/posts/b66444f9/"/>
    <id>http://weafteam.github.io/posts/b66444f9/</id>
    <published>2019-01-24T08:21:58.000Z</published>
    <updated>2019-03-08T08:11:46.311Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一简介">一、简介</h1><p>之前写过关于Solidity的只能合约，但是现在因为公司的业务的原因，我们又要搞eos合约的开发，所以我就开始搞eos只能合约相关的开发，其实之前也是知道使用的是C++写的，但是没有真正看过，这次马上就要开始了。</p><h1 id="二了解eos">二、了解EOS</h1><p>EOS，可以理解为Enterprise Operation System，即为商用分布式应用设计的一款区块链操作系统。EOS是引入的一种新的区块链架构，旨在实现分布式应用的性能扩展。注意，它并不是像比特币和以太坊那样的货币，而是基于EOS软件项目之上发布的代币，被称为区块链3.0。</p><h1 id="三入门准备">三、入门准备</h1><h3 id="开发环境本文开发环境">1.开发环境（本文开发环境）</h3><table><colgroup><col style="width: 33%"><col style="width: 33%"><col style="width: 33%"></colgroup><thead><tr class="header"><th>名称</th><th>版本</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>Ubuntu</td><td>18.04</td><td>开发环境支持多种操作系统，但是不支持windows,因为我的电脑是安装的ubuntu/windows的双开发系统，所以无需顾虑</td></tr><tr class="even"><td>nodeos</td><td>1.5.0</td><td>eos本地搭建节点版本</td></tr><tr class="odd"><td>cleos</td><td>1.5.1</td><td>eos开发工具</td></tr><tr class="even"><td>keosd</td><td>1.5.0</td><td>eos钱包管理工具</td></tr><tr class="odd"><td>eosio.cdt</td><td>1.5.0</td><td>eos只能合约开发工具包（The EOSIO Contract Development Toolkit,CDT for short.）</td></tr><tr class="even"><td>eosio.contracts</td><td>1.5.2</td><td>eos本地智能合约系统使用合约</td></tr><tr class="odd"><td>Sublime Text3</td><td>3.1.1</td><td>编辑器</td></tr></tbody></table><p>这边也支持使用docker,如果你会docker,可以使用docker并使用windows开发，但是eos官方已经从2018年6月不再对docker镜像进行维护，所以我这边还是推荐使用linux和手里有mac的小伙伴去开发。</p><h3 id="开发技能">2.开发技能</h3><ol type="1"><li>至少需要了解一些区块链相关的知识</li><li>有过开发语言的经验，最好是C/C++.</li><li>使用过Linux/Mac OS系统的电脑等。</li><li>有命令行相关知识。</li></ol><h3 id="可使用编译器">3.可使用编译器</h3><ol type="1"><li><a href="https://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text:https://www.sublimetext.com/</a></li><li><a href="https://atom.io/" target="_blank" rel="noopener">Atom Editor:https://atom.io/</a></li><li><a href="https://www.jetbrains.com/clion/" target="_blank" rel="noopener">CLion:https://www.jetbrains.com/clion/</a></li><li><a href="http://www.eclipse.org/downloads/packages/release/oxygen/1a/eclipse-ide-cc-developers" target="_blank" rel="noopener">Eclipse:http://www.eclipse.org/downloads/packages/release/oxygen/1a/eclipse-ide-cc-developers</a></li><li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code:https://code.visualstudio.com/</a></li></ol><p>我这边使用的是一个编辑器，并没有使用编译器，配置环境比较麻烦。 如果有需要我这里有两篇，大家可以借鉴：</p><ol type="1"><li><a href="https://infinitexlabs.com/setup-ide-for-eos-development/" target="_blank" rel="noopener">Visual Studio Code Setup:https://infinitexlabs.com/setup-ide-for-eos-development/</a></li><li><a href="https://infinitexlabs.com/setup-ide-for-eos-development/" target="_blank" rel="noopener">CLion Setup: https://infinitexlabs.com/setup-ide-for-eos-development/</a></li></ol><h1 id="四准备环境">四、准备环境</h1><h3 id="创建一个开发相关的目录">1.创建一个开发相关的目录</h3><p>这里我在当前用户根目录下创建一个eos目录，并在下边创建一个contracts目录存放合约文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir eos</span><br><span class="line">cd eos</span><br><span class="line">mkdir contracts</span><br></pre></td></tr></table></figure><p><img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-1.png" alt="eos-1"> ### 2.下载和安装 下载和安装eosio 这里我们在下载之前切换到我们创建的eos目录 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/eos</span><br><span class="line">wget https://github.com/eosio/eos/releases/download/v1.5.0/eosio_1.5.0-1-ubuntu-18.04_amd64.deb</span><br><span class="line">sudo apt install ./eosio_1.5.0-1-ubuntu-18.04_amd64.deb</span><br></pre></td></tr></table></figure></p><p>然后启动钱包工具keosd <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keosd &amp;</span><br></pre></td></tr></table></figure></p><p>启动成功你可以看到如下输出： <img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-2.png" alt="eos-2"> 然后我们还是在<strong>~/eos</strong>目录下启动我们的本地节点 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nodeos -e -p eosio \</span><br><span class="line">--plugin eosio::producer_plugin \</span><br><span class="line">--plugin eosio::chain_api_plugin \</span><br><span class="line">--plugin eosio::http_plugin \</span><br><span class="line">--plugin eosio::history_plugin \</span><br><span class="line">--plugin eosio::history_api_plugin \</span><br><span class="line">--data-dir CONTRACTS_DIR/eosio/data \</span><br><span class="line">--config-dir CONTRACTS_DIR/eosio/config \</span><br><span class="line">--access-control-allow-origin='*' \</span><br><span class="line">--contracts-console \</span><br><span class="line">--http-validate-host=false \</span><br><span class="line">--verbose-http-errors \</span><br><span class="line">--filter-on='*' &gt;&gt; nodeos.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><p><img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-3.png" alt="eos-3"> 启动节点后我们可以看到当前目录下有一个<strong>nodeos.log</strong>的文件，这个是本地节点的log输出文件，我们使用<strong>tail</strong>命令来动态的查看输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -fn 400 nodeos.log</span><br></pre></td></tr></table></figure><p>可以看见生产区块的日志 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-5.png" alt="eos-5"></p><p>有时候我们非关闭电脑，或者节点时，再次使用以上命令就会出现以下错误 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-4.png" alt="eos-4"> 出现当前问题我们可以加一个参数<strong>–replay-blockchain –hard-replay-blockchain</strong> 也就是使用如下命令来启动 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodeos -e -p eosio --plugin eosio::producer_plugin --plugin eosio::chain_api_plugin --plugin eosio::http_plugin --plugin eosio::history_plugin --plugin eosio::history_api_plugin --data-dir CONTRACTS_DIR/eosio/data --config-dir CONTRACTS_DIR/eosio/config --access-control-allow-origin='*' --contracts-console --http-validate-host=false --verbose-http-errors --filter-on='*' --replay-blockchain --hard-replay-blockchain &gt;&gt; nodeos.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><p>通过脚本查看钱包账户的一些信息 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cleos wallet list</span><br></pre></td></tr></table></figure></p><p><img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-6.png" alt="eos-6"></p><p>可以看到没有钱包，或者都是非open状态（我们这里是因为没有钱包）</p><p>检查eos节点 直接使用浏览器，或者使用命令行 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8888/v1/chain/get_info</span><br></pre></td></tr></table></figure></p><p><img src="https://weaf.oss-cn-beijing.aliyuncs.com/eos-7.png" alt="eos-7"></p><p>安装CDT <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~/eos</span><br><span class="line">wget https://github.com/EOSIO/eosio.cdt/releases/download/v1.5.0/eosio.cdt_1.5.0-1_amd64.deb</span><br><span class="line">sudo apt install ./eosio.cdt_1.5.0-1_amd64.deb</span><br></pre></td></tr></table></figure></p><p>卸载（可能不会用到） <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove eosio.cdt</span><br></pre></td></tr></table></figure></p><p>安装Sublime Text3 如果有需要的小伙伴可以看看</p><ul><li><a href="http://www.sublimetext.com/docs/3/linux_repositories.html" target="_blank" rel="noopener">Linux instal setup</a></li><li><a href="https://blog.csdn.net/lu_embedded/article/details/79558280" target="_blank" rel="noopener">解决ubuntu下sublime text3不能输入中文问题</a></li></ul><h1 id="五参考文章">五、参考文章</h1><ol type="1"><li>百度百科-EOS：<a href="https://baike.baidu.com/item/EOS/20441174?fr=aladdin" class="uri" target="_blank" rel="noopener">https://baike.baidu.com/item/EOS/20441174?fr=aladdin</a></li><li>设置eos开发环境ide：<a href="https://infinitexlabs.com/setup-ide-for-eos-development/" class="uri" target="_blank" rel="noopener">https://infinitexlabs.com/setup-ide-for-eos-development/</a></li><li>eos 开发者：<a href="https://developers.eos.io/eosio-home/docs/introduction" class="uri" target="_blank" rel="noopener">https://developers.eos.io/eosio-home/docs/introduction</a></li><li>EOS.GITHUB:<a href="https://github.com/EOSIO/eos" class="uri" target="_blank" rel="noopener">https://github.com/EOSIO/eos</a></li><li><a href="http://www.sublimetext.com/docs/3/linux_repositories.html" target="_blank" rel="noopener">Linux install setup</a></li><li><a href="https://blog.csdn.net/lu_embedded/article/details/79558280" target="_blank" rel="noopener">解决ubuntu下sublime text3不能输入中文问题</a></li></ol>]]></content>
    
    <summary type="html">
    
      EOS智能合约从零到一-1
    
    </summary>
    
      <category term="区块链" scheme="http://weafteam.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://weafteam.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Solidity书写智能合约-1</title>
    <link href="http://weafteam.github.io/posts/cd4b7340/"/>
    <id>http://weafteam.github.io/posts/cd4b7340/</id>
    <published>2019-01-14T10:35:58.000Z</published>
    <updated>2019-03-08T08:11:46.309Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一简介">一、简介</h1><p>之前写过一篇关于Solidity书写智能合约的，但是当时其实也是比着葫芦画瓢，了解的不是很多，这一阵很久没有写东西，其中最重要的原因是因为公司比较忙，所以没时间做什么总结，今天也是抽空写一篇相关的内容，以后有时间也许会多出几个，那么最近我都在忙什么呢？没错，我们最近就是忙着写合约，公司要搞DAPP，所以我也正式开始搞起只能合约了，所以才会有今天想写下合约这块相关的内容。</p><h1 id="二了解solidity">二、了解Solidity</h1><p>智能合约是使用<a href="https://solidity.readthedocs.io/en/develop/" target="_blank" rel="noopener"><strong>Solidity</strong></a>书写的，具体学习可以查看官网。 <strong>Solidity</strong>是一门面向合约的、为实现智能合约而创建的高级编程语言。这门语言受到了 C++，Python 和 Javascript 语言的影响，设计的目的是能在以太坊虚拟机（EVM）上运行。Solidity 是静态类型语言，支持继承、库和复杂的用户定义类型等特性。</p><h1 id="三合约类的生成">三、合约类的生成</h1><h3 id="合约代码就不多说了下表面我们使用solc来编译自己的代码">1.合约代码就不多说了，下表面我们使用solc来编译自己的代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solcjs WEAF.sol  --bin --abi --optimize -o ./WEAF</span><br></pre></td></tr></table></figure><p>查看生成的文件 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/weaf_sol.png"> ### 2.通过abi接口文件使用web3j命令行工具生成Java合约类</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web3j solidity generate --javaTypes WEAF_sol_WEAF.bin WEAF_sol_WEAF.abi -o WEAF.java -p top.weaf</span><br></pre></td></tr></table></figure><p><img src="https://weaf.oss-cn-beijing.aliyuncs.com/web3j-10.png"></p><p>找到我们生产的合约类，然后更改类名称：WEAF</p><h1 id="四智能合约的部署与转账">四、智能合约的部署与转账</h1><h3 id="部署合约">1.部署合约</h3><p>首先我们将WEAF.java copy到我们自己项目中，使用我们的钱包发起部署</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Web3j web3j = Web3j.build(<span class="keyword">new</span> HttpService(<span class="string">"https://rinkeby.infura.io/v3/ac1907c0a9314f18967a9609570698ad"</span>));</span><br><span class="line">Credentials credentials =WalletUtils.loadCredentials(password,path);</span><br><span class="line">ContractGasProvider contractGasProvider = <span class="keyword">new</span> DefaultGasProvider();</span><br><span class="line">WEAF contract = WEAF.deploy(web3j, credentials, contractGasProvider, <span class="string">"0xe3342d40dc85a7a0ed0984d89c8905ef491a25dd"</span>,<span class="keyword">new</span> BigInteger(<span class="string">"1000000000000000000000"</span>)).send();</span><br><span class="line">String contractAddress = contract.getContractAddress();</span><br><span class="line">log.info(<span class="string">"Smart contract deployed to address "</span> + contractAddress);</span><br></pre></td></tr></table></figure><p>然后通过测试网络可以查看到我们部署的合约。 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/contract.png"></p><h3 id="合约转账">2.合约转账</h3><p>我们知道所有合约都是部署在以太坊上，发送各种交易都是需要花费矿工费（gas），所以在完成自己代币交易的同时，也需要花费eth作为矿工费。 所以要保证我们的交易完成，要确保账户中ETH充足。</p><p>实现代币转载的方法不止一种，我这里写下几种，大家可以选择着用 ##### 方法1 直接使用合约这是最简单，毋庸置疑。但是并不统用。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Credentials credentials = WalletUtils.loadCredentials(password, filePath);</span><br><span class="line">    WEAF weaf = WEAF.load(contractAddress,web3j,credentials,<span class="keyword">new</span> DefaultGasProvider());</span><br><span class="line">    TransactionReceipt receipt = weaf.transfer(to,amount).send();</span><br><span class="line">    log.info(<span class="string">"转账成功，转账hash = &#123;&#125;"</span>,receipt.getTransactionHash());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    log.error(<span class="string">"转账失败，错误信息 = &#123;&#125;"</span>,e);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="方法2">方法2</h5><p>这种方法很统用,只需制定合约地址就可以。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    Credentials creds = WalletUtils.loadCredentials(password,filePath);</span><br><span class="line">    RawTransactionManager manager = new RawTransactionManager(web3j, creds);</span><br><span class="line">    String data = encodeTransferData(to, amount);</span><br><span class="line">    BigInteger gasPrice = web3j.ethGasPrice().send().getGasPrice();</span><br><span class="line">    BigInteger gasLimit = Constants.GAS_LIMIT;</span><br><span class="line">    EthSendTransaction transaction = manager.sendTransaction(gasPrice, gasLimit, contractAddress, data, BigInteger.ZERO);</span><br><span class="line">    if (transaction.hasError())&#123;</span><br><span class="line">        log.error(&quot;转账失败，失败原因：&#123;&#125;&quot;,transaction.getError().getMessage());</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(&quot;转账hash=&#123;&#125;&quot;,transaction.getTransactionHash());</span><br><span class="line">    return transaction.getTransactionHash();</span><br><span class="line">&#125;catch (Exception e)&#123;</span><br><span class="line">    log.error(&quot;转账失败，失败原因：&#123;&#125;&quot;,e);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br><span class="line">private String encodeTransferData(String toAddress, BigInteger sum) &#123;</span><br><span class="line"></span><br><span class="line">    Function function = new Function(</span><br><span class="line">            &quot;transfer&quot;,</span><br><span class="line">            Arrays.&lt;Type&gt;asList(new Address(toAddress),</span><br><span class="line">                    new Uint256(sum)),</span><br><span class="line">            Collections.&lt;TypeReference&lt;?&gt;&gt;emptyList());</span><br><span class="line">    return FunctionEncoder.encode(function);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="五参考文章">五、参考文章</h1><ol type="1"><li>Solidity：<a href="https://solidity.readthedocs.io/en/develop/" class="uri" target="_blank" rel="noopener">https://solidity.readthedocs.io/en/develop/</a></li><li>Solidity[中文版]：<a href="https://solidity-cn.readthedocs.io/zh/develop/" class="uri" target="_blank" rel="noopener">https://solidity-cn.readthedocs.io/zh/develop/</a></li><li>How To Deploy Smart Contracts Onto The Ethereum Blockchain:<a href="https://medium.com/mercuryprotocol/dev-highlights-of-this-week-cb33e58c745f" class="uri" target="_blank" rel="noopener">https://medium.com/mercuryprotocol/dev-highlights-of-this-week-cb33e58c745f</a></li><li>Remix(Solidity编程工具web):<a href="https://remix.ethereum.org" class="uri" target="_blank" rel="noopener">https://remix.ethereum.org</a></li><li>Greeter：<a href="https://www.ethereum.org/greeter" class="uri" target="_blank" rel="noopener">https://www.ethereum.org/greeter</a></li><li>Web3j#Smart Contracts:<a href="https://web3j.readthedocs.io/en/latest/smart_contracts.html" class="uri" target="_blank" rel="noopener">https://web3j.readthedocs.io/en/latest/smart_contracts.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      Solidity书写智能合约-1
    
    </summary>
    
      <category term="区块链" scheme="http://weafteam.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://weafteam.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>使用Web3j（JAVA）开发ETH钱包-3</title>
    <link href="http://weafteam.github.io/posts/75cd4959/"/>
    <id>http://weafteam.github.io/posts/75cd4959/</id>
    <published>2018-11-06T09:48:58.000Z</published>
    <updated>2019-03-08T08:11:46.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一简介">一、简介</h1><p>之前的文章中已经提到了ETH的转账相关内容，接下来，我们将使用智能合约，发布我们自己的Token,并实现Token的转账等相关操作。 下篇文章我会讲解一些关于事件日志、交易、区块监听相关的内容。</p><h1 id="二智能合约的书写">二、智能合约的书写</h1><p>智能合约是使用<a href="https://solidity.readthedocs.io/en/develop/" target="_blank" rel="noopener"><strong>Solidity</strong></a>书写的，具体学习可以查看官网。 <strong>Solidity</strong>是一门面向合约的、为实现智能合约而创建的高级编程语言。这门语言受到了 C++，Python 和 Javascript 语言的影响，设计的目的是能在以太坊虚拟机（EVM）上运行。Solidity 是静态类型语言，支持继承、库和复杂的用户定义类型等特性。</p><p>web3j可以自动生成智能合约包装器代码，以便在不离开JVM的情况下部署智能合约并与之交互。</p><p>下边实现一个简单合约：WEAF</p><h1 id="三合约类的生成">三、合约类的生成</h1><h3 id="合约代码就不多说了下表面我们使用solc来编译自己的代码">1.合约代码就不多说了，下表面我们使用solc来编译自己的代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">solcjs WEAF.sol  --bin --abi --optimize -o ./WEAF</span><br></pre></td></tr></table></figure><p>查看生成的文件 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/weaf_sol.png"> ### 2.通过abi接口文件使用web3j命令行工具生成Java合约类</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web3j solidity generate --javaTypes WEAF_sol_WEAF.bin WEAF_sol_WEAF.abi -o WEAF.java -p top.weaf</span><br></pre></td></tr></table></figure><p><img src="https://weaf.oss-cn-beijing.aliyuncs.com/web3j-10.png"></p><p>找到我们生产的合约类，然后更改类名称：WEAF</p><h1 id="四智能合约的部署与转账">四、智能合约的部署与转账</h1><h3 id="部署合约">1.部署合约</h3><p>首先我们将WEAF.java copy到我们自己项目中，使用我们的钱包发起部署</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Web3j web3j = Web3j.build(<span class="keyword">new</span> HttpService(<span class="string">"https://rinkeby.infura.io/v3/ac1907c0a9314f18967a9609570698ad"</span>));</span><br><span class="line">Credentials credentials =WalletUtils.loadCredentials(password,path);</span><br><span class="line">ContractGasProvider contractGasProvider = <span class="keyword">new</span> DefaultGasProvider();</span><br><span class="line">WEAF contract = WEAF.deploy(web3j, credentials, contractGasProvider, <span class="string">"0xe3342d40dc85a7a0ed0984d89c8905ef491a25dd"</span>,<span class="keyword">new</span> BigInteger(<span class="string">"1000000000000000000000"</span>)).send();</span><br><span class="line">String contractAddress = contract.getContractAddress();</span><br><span class="line">log.info(<span class="string">"Smart contract deployed to address "</span> + contractAddress);</span><br></pre></td></tr></table></figure><p>然后通过测试网络可以查看到我们部署的合约。 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/contract.png"></p><h3 id="合约转账">2.合约转账</h3><p>我们知道所有合约都是部署在以太坊上，发送各种交易都是需要花费矿工费（gas），所以在完成自己代币交易的同时，也需要花费eth作为矿工费。 所以要保证我们的交易完成，要确保账户中ETH充足。</p><p>实现代币转载的方法不止一种，我这里写下几种，大家可以选择着用 ##### 方法1 直接使用合约这是最简单，毋庸置疑。但是并不统用。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Credentials credentials = WalletUtils.loadCredentials(password, filePath);</span><br><span class="line">    WEAF weaf = WEAF.load(contractAddress,web3j,credentials,<span class="keyword">new</span> DefaultGasProvider());</span><br><span class="line">    TransactionReceipt receipt = weaf.transfer(to,amount).send();</span><br><span class="line">    log.info(<span class="string">"转账成功，转账hash = &#123;&#125;"</span>,receipt.getTransactionHash());</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    log.error(<span class="string">"转账失败，错误信息 = &#123;&#125;"</span>,e);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="方法2">方法2</h5><p>这种方法很统用,只需制定合约地址就可以。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    Credentials creds = WalletUtils.loadCredentials(password,filePath);</span><br><span class="line">    RawTransactionManager manager = new RawTransactionManager(web3j, creds);</span><br><span class="line">    String data = encodeTransferData(to, amount);</span><br><span class="line">    BigInteger gasPrice = web3j.ethGasPrice().send().getGasPrice();</span><br><span class="line">    BigInteger gasLimit = Constants.GAS_LIMIT;</span><br><span class="line">    EthSendTransaction transaction = manager.sendTransaction(gasPrice, gasLimit, contractAddress, data, BigInteger.ZERO);</span><br><span class="line">    if (transaction.hasError())&#123;</span><br><span class="line">        log.error(&quot;转账失败，失败原因：&#123;&#125;&quot;,transaction.getError().getMessage());</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    log.info(&quot;转账hash=&#123;&#125;&quot;,transaction.getTransactionHash());</span><br><span class="line">    return transaction.getTransactionHash();</span><br><span class="line">&#125;catch (Exception e)&#123;</span><br><span class="line">    log.error(&quot;转账失败，失败原因：&#123;&#125;&quot;,e);</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br><span class="line">private String encodeTransferData(String toAddress, BigInteger sum) &#123;</span><br><span class="line"></span><br><span class="line">    Function function = new Function(</span><br><span class="line">            &quot;transfer&quot;,</span><br><span class="line">            Arrays.&lt;Type&gt;asList(new Address(toAddress),</span><br><span class="line">                    new Uint256(sum)),</span><br><span class="line">            Collections.&lt;TypeReference&lt;?&gt;&gt;emptyList());</span><br><span class="line">    return FunctionEncoder.encode(function);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="五参考文章">五、参考文章</h1><ol type="1"><li>Solidity：<a href="https://solidity.readthedocs.io/en/develop/" class="uri" target="_blank" rel="noopener">https://solidity.readthedocs.io/en/develop/</a></li><li>Solidity[中文版]：<a href="https://solidity-cn.readthedocs.io/zh/develop/" class="uri" target="_blank" rel="noopener">https://solidity-cn.readthedocs.io/zh/develop/</a></li><li>How To Deploy Smart Contracts Onto The Ethereum Blockchain:<a href="https://medium.com/mercuryprotocol/dev-highlights-of-this-week-cb33e58c745f" class="uri" target="_blank" rel="noopener">https://medium.com/mercuryprotocol/dev-highlights-of-this-week-cb33e58c745f</a></li><li>Remix(Solidity编程工具web):<a href="https://remix.ethereum.org" class="uri" target="_blank" rel="noopener">https://remix.ethereum.org</a></li><li>Greeter：<a href="https://www.ethereum.org/greeter" class="uri" target="_blank" rel="noopener">https://www.ethereum.org/greeter</a></li><li>Web3j#Smart Contracts:<a href="https://web3j.readthedocs.io/en/latest/smart_contracts.html" class="uri" target="_blank" rel="noopener">https://web3j.readthedocs.io/en/latest/smart_contracts.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      使用Web3j（JAVA）开发ETH钱包-3
    
    </summary>
    
      <category term="区块链" scheme="http://weafteam.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://weafteam.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>使用Web3j（JAVA）开发ETH钱包-2</title>
    <link href="http://weafteam.github.io/posts/2ca79cf/"/>
    <id>http://weafteam.github.io/posts/2ca79cf/</id>
    <published>2018-10-29T10:04:44.000Z</published>
    <updated>2019-03-08T08:11:46.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一简介">一、简介</h1><p>上文中我们谈到了在测试环境中创建账户并使用 通过这样的方式 ，我们就可以创建自己的钱包地址，在测试环境中我们使用<a href="https://www.rinkeby.io/#faucet" class="uri" target="_blank" rel="noopener">https://www.rinkeby.io/#faucet</a>给自己充值测试币. 那么我们接下来的工作就是研究ETH的转账，并会在下一篇在讲述，如何使用基于ERC-20智能合约创建自己的Token和基于自己的合约的转账.</p><h1 id="二eth转账的实现">二、ETH转账的实现</h1><p>转账这里存在一些gas的问题，所谓gas我们都知道是转账时需要花费的旷工费。这里我们可以通过<strong>gasLimit</strong>和<strong>gasPrice</strong>来调整，当然我们肯定希望gas小，但是gas一味的小，会导致没有人愿意帮我们打包我们得到交易，导致交易最终无法成交，形成一个pending的状态。如果gas给的多，那么交易成交速度会比较快，但是我们花费的钱就会变多。</p><p>在之前实现的基础上，我们可以拿到自己创建的钱包，和对应钱包的文件和密码。</p><h2 id="方法1">方法1</h2><p>这个方法需要使用自己的节点，目前Infura节点无法进行当前操作，对应的也是创建账户<strong>方法1</strong>的转账。 毕竟infura无法帮助我们存储钱包文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">private</span> BigInteger gNonce; <span class="comment">//每个账户发起的交易都会自动生成一个交易识别号，这个是一个递增的号码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...省略部分代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    EthGetTransactionCount ethGetTransactionCount = admin.ethGetTransactionCount(from, DefaultBlockParameterName.LATEST).sendAsync().get();</span><br><span class="line">    BigInteger nonce = ethGetTransactionCount.getTransactionCount();</span><br><span class="line">    PersonalUnlockAccount personalUnlockAccount = admin.personalUnlockAccount(from,password).send();</span><br><span class="line">    <span class="keyword">if</span> (personalUnlockAccount == <span class="keyword">null</span>)&#123;</span><br><span class="line">        log.error(<span class="string">"转账失败，账户地址错误，或者账户密码错误"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (gNonce == <span class="keyword">null</span>)&#123;</span><br><span class="line">        gNonce = nonce;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (personalUnlockAccount.accountUnlocked())</span><br><span class="line">    &#123;</span><br><span class="line">        BigInteger gasPrice = Contract.GAS_PRICE;</span><br><span class="line">        BigInteger gasLimit = Contract.GAS_LIMIT;</span><br><span class="line">        <span class="keyword">synchronized</span>(WalletService.class) &#123;</span><br><span class="line">            Transaction transaction = Transaction.createEtherTransaction(from,nonce,gasPrice,gasLimit,to,amount);</span><br><span class="line">            log.info(<span class="string">"转账序号：【&#123;&#125;】"</span>,gNonce);</span><br><span class="line">            gNonce = gNonce.add(<span class="keyword">new</span> BigInteger(<span class="string">"1"</span>));</span><br><span class="line">            EthSendTransaction transactionResponse = admin.ethSendTransaction(transaction).sendAsync().get();</span><br><span class="line">            <span class="keyword">if</span>(transactionResponse.hasError())&#123;</span><br><span class="line">                String message=transactionResponse.getError().getMessage();</span><br><span class="line">                log.error(<span class="string">"转账失败，错误信息&#123;&#125;"</span>,message);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                String hash=transactionResponse.getTransactionHash();</span><br><span class="line">                log.info(<span class="string">"转账成功，转账hash = &#123;&#125;"</span>,hash);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException | IOException e) &#123;</span><br><span class="line">    log.error(<span class="string">"转账失败，失败原因&#123;&#125;"</span>,e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种种方式需要先解锁账户，有一定的安全问题，如果你的节点允许全网访问，会有一些人通过动态扫描以太坊节点，尝试连接这些节点，并通过节点发起资金转账的操作。</p><p>如果你在测试中又发现自己的币无意间被转到一下地址，说明你的节点或者操作存在以上问题。</p><ul><li>Rinkeby: https://rinkeby.etherscan.io/address/0x7097f41f1c1847d52407c629d0e0ae0fdd24fd58</li><li>Ropsten: https://ropsten.etherscan.io/address/0x7097f41F1C1847D52407C629d0E0ae0fDD24fd58</li><li>Kovan: https://kovan.etherscan.io/address/0x7097f41F1C1847D52407C629d0E0ae0fDD24fd58</li><li>Mainnet: https://etherscan.io/address/0x7097f41F1C1847D52407C629d0E0ae0fDD24fd58</li></ul><p>所以这里需要注意不要让你的API端口向全网开放。 这里特别注意一下代码中的 <em><strong>nonce</strong></em>.下边会讲一下它的其他作用。 其实还有还有其他一些类似上面转账的方法，可以自己去研究下。</p><h2 id="方法2">方法2</h2><p>这种方式需要使用钱包文件来发起交易。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Credentials credentials = WalletUtils.loadCredentials(password,filePath);</span><br><span class="line">    TransactionReceipt transferReceipt = Transfer.sendFunds(web3j, credentials, to,amount, Convert.Unit.WEI).send();</span><br><span class="line">    String hash = transferReceipt.getTransactionHash();</span><br><span class="line">    log.info(<span class="string">"转账成功，转账hash = &#123;&#125;"</span>,hash);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    log.error(<span class="string">"转账失败，失败原因&#123;&#125;"</span>,e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式相对安全一些，这里需要注意的是一些ETH的最小单位——<strong>WEI</strong>.</p><p>1ETH = 1*10^18 wei;</p><h1 id="三相关问题">三、相关问题</h1><h3 id="eth交易模块的特点">1.ETH交易模块的特点</h3><ol type="1"><li>必须按顺序处理事务（具有1的nonce为1的事务必须在具有2的nonce的事务之前处理）</li><li>不跳过（具有4的nonce的事务不能包含在块中，直到具有1,2,3的nonce的事务</li></ol><p>通过这种方式，网络能够识别交易的重复并强制执行订单（这对于智能合约至关重要） 这也就上文中说过的<strong>nonce</strong>, ### 2.如何查看我们转账的状态 我们可以通过转账后拿到的TxHash去<a href="https://etherscan.io/" class="uri" target="_blank" rel="noopener">https://etherscan.io/</a>查询。</p><h3 id="如何取消pending状态转账">3.如何取消Pending状态转账</h3><p>上文说到了转账因为gas设置的比较小，可能造成无法成交，一直处于Pending状态。 然后我们可以通过<strong>nonce</strong>去取消Pending的转账， 我们通过nonce的机制可以得知，我们只要新创建一笔转账，其中nonce和Pending状态的订单的nonce一样就可以替换当前Pending状态得到转账。</p><p>那么最好的操作来实现就是发起一笔向自己转账的订单，当然gas我们需要设置得到合理。 转账参考以上两种方法。</p><h3 id="取消或者取代转账">4.取消或者取代转账</h3><p>通过之前<strong>3</strong>中所提到了，我们可以知道，其实一个交易发出后，被覆盖，代替，取消等操作的几率很小。但是也不是不可能。只要当前交易不被挖矿和包含在区块中，是可以做相关关操作的。 具体操作方法还是和<strong>3</strong>相似，但是切记不可更改<strong>nonce</strong>.(具体情况还要和实际相比较，毕竟这种操作实现的概率几乎为0)</p><h1 id="四转账状态查询代码实现">四、转账状态查询代码实现</h1><p>我这里只能查洵成功的和失败的，但是有些转账会查不到，但是不能保证当前转账不存在，或者是pending状态。如果您发现了对应的方法请告知我，谢谢 具体实现 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    EthGetTransactionReceipt transactionReceipt = web3j.ethGetTransactionReceipt(transactionHash).send();</span><br><span class="line">    TransactionReceipt transactionReceipt1 = transactionReceipt.getResult();</span><br><span class="line">    <span class="keyword">if</span> (transactionReceipt1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        log.warn(<span class="string">"转账Hash内容为空，Hash = 【&#123;&#125;】"</span>,transactionHash);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"0x1"</span>.equals(transactionReceipt1.getStatus()))&#123;</span><br><span class="line">            log.info(<span class="string">"转账成功！ Hash = &#123;&#125;"</span>,transactionHash)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"0x0"</span>.equals(transactionReceipt1.getStatus()))&#123;</span><br><span class="line">            log.error(<span class="string">"转账失败！ Hash = &#123;&#125;"</span>,transactionHash)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="五参考文章">五、参考文章</h1><ol type="1"><li>Checking or Replacing a TX After it’s Been Sent：<a href="https://kb.myetherwallet.com/transactions/check-status-of-ethereum-transaction.html" class="uri" target="_blank" rel="noopener">https://kb.myetherwallet.com/transactions/check-status-of-ethereum-transaction.html</a></li><li>Cancel pending transactions on Ethereum:<a href="https://jakubstefanski.com/post/2017/10/ethereum-cancel-pending-transaction/" class="uri" target="_blank" rel="noopener">https://jakubstefanski.com/post/2017/10/ethereum-cancel-pending-transaction/</a></li><li>Node auto send a lot of transaction after call eth.sendTransaction() in one time:<a href="Node%20auto%20send%20a%20lot%20of%20transaction%20after%20call%20eth.sendTransaction()%20in%20one%20time">https://github.com/ethereum/go-ethereum/issues/16691</a></li><li>Web3j：<a href="https://web3j.readthedocs.io/en/latest/" class="uri" target="_blank" rel="noopener">https://web3j.readthedocs.io/en/latest/</a></li></ol>]]></content>
    
    <summary type="html">
    
      使用Web3j（JAVA）开发ETH钱包-2
    
    </summary>
    
      <category term="区块链" scheme="http://weafteam.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://weafteam.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>使用Web3j（JAVA）开发ETH钱包-1</title>
    <link href="http://weafteam.github.io/posts/9bc32875/"/>
    <id>http://weafteam.github.io/posts/9bc32875/</id>
    <published>2018-10-27T01:04:44.000Z</published>
    <updated>2019-03-08T08:11:46.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一简介">一、简介</h1><p>想要使用<strong>web3j</strong>开发ETH钱包，我们需要把准备工作做好，那么先让我们来了解下什么是<a href="https://web3j.readthedocs.io/en/latest/" target="_blank" rel="noopener">web3j:https://web3j.readthedocs.io/en/latest/</a>,我这里是最新版本的地址，随着时间的变化，我们需要使用心得版本来编写我们的程序。 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/web3j-1.png"></p><p><strong>web3j</strong>是一个高度模块化，反应灵敏，类型安全的Java和Android库，用于处理智能合约并与以太坊网络上的客户端（节点）集成：这使您可以使用以太坊区块链，而无需为平台编写自己的集成代码的额外开销。 Java和Blockchain对话提供了区块链，以太坊和web3j的概述。</p><h1 id="二准备工作">二、准备工作</h1><p>想要使用web3j，我们只需使用项目构建工具引入就可</p><h3 id="maven">Maven</h3><p><strong>Java 8:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.web3j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Android:</strong> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.web3j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1-android<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="gradle">Gradle</h3><p><strong>Java 8:</strong> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile ('org.web3j:core:3.6.0')</span><br></pre></td></tr></table></figure></p><p><strong>Android:</strong> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile ('org.web3j:core:3.3.1-android')</span><br></pre></td></tr></table></figure></p><p>然后开启自己的节点，上一篇是说使用自己的geth客户端开启，但是我们现在使用infura,来创建自己的项目</p><p><a href="https://infura.io/" target="_blank" rel="noopener">Infura:https://infura.io/</a></p><p>注册成功后创建自己的项目： <img src="https://weaf.oss-cn-beijing.aliyuncs.com/infura.png"> 可以看到 我们可以使用不同环境的不同节点。</p><h1 id="三账户创建和充值及部分代码">三、账户创建和充值及部分代码。</h1><p>我们现在已经把几乎所有的工作都昨做完了，但是还有一个就是我们钱包的eth的获取，我们可以通过挖矿获取，但是这个是测试环境我们还可以通过其他方式获取（在真实环境我们可以通过交易所来购买）。</p><p>现在我们先写下我们创建账户和入门web3j的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* We start by creating a new web3j instance to connect to remote nodes on the network. </span></span><br><span class="line"><span class="comment">   实例化web3j，这里HttpService()可不传参，默认</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Web3j web3j = Web3j.build(<span class="keyword">new</span> HttpService(<span class="string">"https://rinkeby.infura.io/v3/3f0abe3dcf554486a363809349898253"</span>));</span><br><span class="line">Admin admin = Admin.build(<span class="keyword">new</span> HttpService(<span class="string">"https://rinkeby.infura.io/v3/3f0abe3dcf554486a363809349898253"</span>));</span><br><span class="line">log.info(<span class="string">"Connected to Ethereum client version: "</span>+ web3j.web3ClientVersion().send().getWeb3ClientVersion());</span><br></pre></td></tr></table></figure><p>创建钱包地址：</p><h3 id="方法1">方法1</h3><p>这个方法这是和自己的节点，自己创建账户后，对应的钱包文件会存在../keystore/ 的目录下 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    NewAccountIdentifier newAccountIdentifier = admin.personalNewAccount(password).send();</span><br><span class="line">    log.info(<span class="string">"创建ETH账户成功,账户id = &#123;&#125;"</span>,newAccountIdentifier.getAccountId());</span><br><span class="line">    <span class="keyword">return</span> newAccountIdentifier.getAccountId();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    log.error(<span class="string">"创建ETH账户失败，错误信息：&#123;&#125;"</span>,e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="方法2">方法2</h3><p>这个方式需要自己制定生产钱包文件的目录 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String walletFileName=<span class="string">""</span>;</span><br><span class="line">String password = <span class="string">"123456qwerty"</span>;</span><br><span class="line">String walletFilePath=<span class="string">"C:\\Users\\yaxuSong\\wallet"</span>;</span><br><span class="line">walletFileName = WalletUtils.generateNewWalletFile(password, <span class="keyword">new</span> File(walletFilePath));</span><br><span class="line">log.info(<span class="string">"walletName: "</span>+walletFileName);</span><br></pre></td></tr></table></figure></p><p>通过这样的方式 ，我们就可以创建自己的钱包地址，在测试环境中我们使用<a href="https://www.rinkeby.io/#faucet" class="uri" target="_blank" rel="noopener">https://www.rinkeby.io/#faucet</a>给自己充值测试币</p><p>首先我们需要使用<a href="https://twitter.com/intent/tweet?text=Requesting%20faucet%20funds%20into%200x0000000000000000000000000000000000000000%20on%20the%20%23Rinkeby%20%23Ethereum%20test%20network." target="_blank" rel="noopener">Twitter</a>、<a href="https://www.facebook.com/help/community/question/?id=282662498552845" target="_blank" rel="noopener">Facebook</a>、<a href="https://plus.google.com/" target="_blank" rel="noopener">Google Plus</a>发布新的公开内容，内容是自己的钱包地址，然后粘贴相应的文章的地址到faucet.</p><p>我这里使用的是Google Plus.</p><h5 id="发布带自己钱包地址的公开文章">1.发布带自己钱包地址的公开文章</h5><p>发布成功之后点击分析图表进入的界面如下，就是自己的文章(post)的地址：<a href="https://plus.google.com/103762921276095780168/posts/fhTRmP6gXDb" class="uri" target="_blank" rel="noopener">https://plus.google.com/103762921276095780168/posts/fhTRmP6gXDb</a> <img src="https://weaf.oss-cn-beijing.aliyuncs.com/googleplus.png"></p><h5 id="粘贴地址">2.粘贴地址</h5><p>然后进入<a href="https://www.rinkeby.io/#faucet" target="_blank" rel="noopener">faucet</a>粘贴地址进行充值。 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/rinkeby-1.png"></p><p>粘贴文章地址，并选择充值数量 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/rinkeby-2.png"> 点击充值，显示接受转账 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/rinkeby-3.png"> 显示已经转账成功 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/rinkeby-4.png"></p><p>这里需要注意，有时候测试会有一些卡，可能有很多转账都有发放，所以请等待没有排队对列时进行，不然也不会到账。 ##### 3.查看是否到账和账户状态 我们可以通过我们的地址去 <a href="https://www.rinkeby.io/#explorer" target="_blank" rel="noopener">explorer:https://www.rinkeby.io/#explorer</a></p><p>如图： <img src="https://weaf.oss-cn-beijing.aliyuncs.com/rinkeby-5.png"></p><p>这样我们就有可以操作的ETH进行转账等操作了。</p><h1 id="四参考代码demo">四、参考代码、DEMO</h1><p>sample :<a href="https://github.com/web3j/sample-project-gradle" class="uri" target="_blank" rel="noopener">https://github.com/web3j/sample-project-gradle</a> 因为项目是用Gradle构建的，我这边在下载依赖时出现很多问题，后来改了下仓库，具体修改如下：</p><h3 id="build.gradle">build.gradle</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">group</span> <span class="string">'org.web3j'</span></span><br><span class="line">version <span class="string">'0.0.1'</span></span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">'java'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sourceCompatibility</span> = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    maven&#123;url <span class="string">'http://maven.aliyun.com/nexus/content/groups/public/'</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ext &#123;</span><br><span class="line">    web3jVersion = <span class="string">'3.4.0'</span></span><br><span class="line">    logbackVersion = <span class="string">'1.2.3'</span></span><br><span class="line">    junitVersion = <span class="string">'4.12'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">"org.web3j:core:$web3jVersion"</span>,</span><br><span class="line">            <span class="string">"ch.qos.logback:logback-core:$logbackVersion"</span>,</span><br><span class="line">            <span class="string">"ch.qos.logback:logback-classic:$logbackVersion"</span></span><br><span class="line">    testCompile <span class="string">"junit:junit:$junitVersion"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五参考文档">五、参考文档</h1><p>Web3j：<a href="https://web3j.readthedocs.io/en/latest/" class="uri" target="_blank" rel="noopener">https://web3j.readthedocs.io/en/latest/</a></p>]]></content>
    
    <summary type="html">
    
      使用Web3j（JAVA）开发ETH钱包-1
    
    </summary>
    
      <category term="区块链" scheme="http://weafteam.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://weafteam.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>初识区块链，以太坊节点的创建</title>
    <link href="http://weafteam.github.io/posts/5cee5eeb/"/>
    <id>http://weafteam.github.io/posts/5cee5eeb/</id>
    <published>2018-10-17T01:04:44.000Z</published>
    <updated>2019-03-08T08:11:46.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一简介">一、简介</h1><p>区块链是分布式数据存储、点对点传输、共识机制、加密算法等计算机技术的新型应用模式。 现在区块链技术虽然非常火，但是其真实的应用还很少，几乎没有，现在正是一个区块链技术的一个摸索的阶段，很多人提出区块链应用的领域，但是大都还是刚刚开始去实现，而在区块链技术下的真正的产品还没有出来。它的真正价值也没有展现出来。</p><h1 id="二以太坊">二、以太坊</h1><p>以太坊（英文Ethereum）是一个开源的有智能合约功能的公共区块链平台，通过其专用加密货币以太币（Ether）提供去中心化的虚拟机（“以太虚拟机” Ethereum Virtual Machine）来处理点对点合约。</p><p>以太坊是一个平台，它上面提供各种模块让用户来搭建应用，如果将搭建应用比作造房子，那么以太坊就提供了墙面、屋顶、地板等模块，用户只需像搭积木一样把房子搭起来，因此在以太坊上建立应用的成本和速度都大大改善。具体来说，以太坊通过一套图灵完备的脚本语言（EthereumVirtual Machinecode，简称EVM语言）来建立应用，它类似于汇编语言，我们知道，直接用汇编语言编程是非常痛苦的，但以太坊里的编程并不需要直接使用EVM语言，而是类似C语言、Python、Lisp等高级语言，再通过编译器转成EVM语言。</p><p>不过其实这里边有一个人也就是以太坊之父：Vitalik Buterin。 小伙非常帅，与我同岁，都是94的，编程界的另一个牛人。</p><h1 id="三以太坊节点">三、以太坊节点</h1><h3 id="以太坊客户端">2.1 以太坊客户端</h3><p>以太坊的两个主要的客户端软件是Geth和Parity。</p><p>Geth下载链接:<a href="https://geth.ethereum.org/downloads/" class="uri" target="_blank" rel="noopener">https://geth.ethereum.org/downloads/</a> Parity下载链接：<a href="https://www.parity.io/ethereum/#download" class="uri" target="_blank" rel="noopener">https://www.parity.io/ethereum/#download</a></p><h3 id="使用geth">2.2 使用Geth</h3><p>因为Geth这里提供很多便利的工具，所以这里使用Geth 我这里选择Linux版本，如果是 windows可以直接下载windows版本也是一样的。</p><p>我们这里先尝试连接测试网络rinkeby 这里需要注意的是rink</p><p>具体创建方式我们可以通过以下网址查看：</p><p>geth:<a href="https://www.rinkeby.io/#geth" class="uri" target="_blank" rel="noopener">https://www.rinkeby.io/#geth</a></p><p>首先下载 :rinkeby.json<a href="https://www.rinkeby.io/rinkeby.json" class="uri" target="_blank" rel="noopener">https://www.rinkeby.io/rinkeby.json</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"config"</span>:&#123;<span class="attr">"chainId"</span>:<span class="number">4</span>,<span class="attr">"homesteadBlock"</span>:<span class="number">1</span>,<span class="attr">"eip150Block"</span>:<span class="number">2</span>,<span class="attr">"eip150Hash"</span>:<span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,<span class="attr">"eip155Block"</span>:<span class="number">3</span>,<span class="attr">"eip158Block"</span>:<span class="number">3</span>,<span class="attr">"byzantiumBlock"</span>:<span class="number">1035301</span>,<span class="attr">"clique"</span>:&#123;<span class="attr">"period"</span>:<span class="number">15</span>,<span class="attr">"epoch"</span>:<span class="number">30000</span>&#125;&#125;,<span class="attr">"nonce"</span>:<span class="string">"0x0"</span>,<span class="attr">"timestamp"</span>:<span class="string">"0x58ee40ba"</span>,<span class="attr">"extraData"</span>:<span class="string">"0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"</span>,<span class="attr">"gasLimit"</span>:<span class="string">"0x47b760"</span>,<span class="attr">"difficulty"</span>:<span class="string">"0x1"</span>,<span class="attr">"mixHash"</span>:<span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,<span class="attr">"coinbase"</span>:<span class="string">"0x0000000000000000000000000000000000000000"</span>,<span class="attr">"alloc"</span>:&#123;<span class="attr">"0000000000000000000000000000000000000000"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000001"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000002"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000003"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000004"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000005"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000006"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000007"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000008"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000009"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000000a"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000000b"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000000c"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000000d"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000000e"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000000f"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000010"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000011"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000012"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000013"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000014"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000015"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000016"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000017"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000018"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000019"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000001a"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000001b"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000001c"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000001d"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000001e"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000001f"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000020"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000021"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000022"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000023"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000024"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000025"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000026"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000027"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000028"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000029"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000002a"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000002b"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000002c"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000002d"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000002e"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000002f"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000030"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000031"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000032"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000033"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000034"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000035"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000036"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000037"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000038"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000039"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000003a"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000003b"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000003c"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000003d"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000003e"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000003f"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000040"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000041"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000042"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000043"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000044"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000045"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000046"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000047"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000048"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000049"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000004a"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000004b"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000004c"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000004d"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000004e"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000004f"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000050"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000051"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000052"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000053"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000054"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000055"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000056"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000057"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000058"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000059"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000005a"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000005b"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000005c"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000005d"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000005e"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000005f"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000060"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000061"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000062"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000063"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000064"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000065"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000066"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000067"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000068"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000069"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000006a"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000006b"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000006c"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000006d"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000006e"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000006f"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000070"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000071"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000072"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000073"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000074"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000075"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000076"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000077"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000078"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000079"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000007a"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000007b"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000007c"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000007d"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000007e"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000007f"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000080"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000081"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000082"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000083"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000084"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000085"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000086"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000087"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000088"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000089"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000008a"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000008b"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000008c"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000008d"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000008e"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000008f"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000090"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000091"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000092"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000093"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000094"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000095"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000096"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000097"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000098"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"0000000000000000000000000000000000000099"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000009a"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000009b"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000009c"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000009d"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000009e"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"000000000000000000000000000000000000009f"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000a0"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000a1"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000a2"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000a3"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000a4"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000a5"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000a6"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000a7"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000a8"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000a9"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000aa"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000ab"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000ac"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000ad"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000ae"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000af"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000b0"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000b1"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000b2"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000b3"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000b4"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000b5"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000b6"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000b7"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000b8"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000b9"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000ba"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000bb"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000bc"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000bd"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000be"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000bf"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000c0"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000c1"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000c2"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000c3"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000c4"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000c5"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000c6"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000c7"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000c8"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000c9"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000ca"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000cb"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000cc"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000cd"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000ce"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000cf"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000d0"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000d1"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000d2"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000d3"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000d4"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000d5"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000d6"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000d7"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000d8"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000d9"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000da"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000db"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000dc"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000dd"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000de"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000df"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000e0"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000e1"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000e2"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000e3"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000e4"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000e5"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000e6"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000e7"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000e8"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000e9"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000ea"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000eb"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000ec"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000ed"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000ee"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000ef"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000f0"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000f1"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000f2"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000f3"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000f4"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000f5"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000f6"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000f7"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000f8"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000f9"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000fa"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000fb"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000fc"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000fd"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000fe"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"00000000000000000000000000000000000000ff"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x1"</span>&#125;,<span class="attr">"31b98d14007bdee637298086988a0bbd31184523"</span>:&#123;<span class="attr">"balance"</span>:<span class="string">"0x200000000000000000000000000000000000000000000000000000000000000"</span>&#125;&#125;,<span class="attr">"number"</span>:<span class="string">"0x0"</span>,<span class="attr">"gasUsed"</span>:<span class="string">"0x0"</span>,<span class="attr">"parentHash"</span>:<span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>&#125;</span><br></pre></td></tr></table></figure><p>我们这里选择轻节点 然后解压geth</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf geth-linux-amd64-1.8.17-8bbe7207.tar.gz</span><br></pre></td></tr></table></figure><p>然后切换到geth-linux-amd64-1.8.17-8bbe7207目录下执行以下命令 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir=$HOME/.rinkeby init rinkeby.json</span><br><span class="line"></span><br><span class="line">nohup ./geth --rinkeby --datadir=$HOME/rinkeby --syncmode=light --rpc --rpcapi personal,db,eth,net,web3,web,admin --ethstats='yaxuSong:Respect my authoritah!@stats.rinkeby.io' --rpccorsdomain "*" --rpcaddr "0.0.0.0" &gt;&gt; geth.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><p>我使用 nohup 后台执行，然后可以查看 geth.log，查看启动结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -fn 400 geth.log</span><br></pre></td></tr></table></figure><p>我们可以通过<a href="https://www.rinkeby.io/#stats" class="uri" target="_blank" rel="noopener">https://www.rinkeby.io/#stats</a>查看自己的节点是否连接上了</p><p><img src="https://weaf.oss-cn-beijing.aliyuncs.com/blockchain-1.png"></p><p>四、参考链接</p><p>1.<a href="https://ethfans.org/fedora/articles/264" target="_blank" rel="noopener">ethfans:https://ethfans.org/fedora/articles/264</a></p>]]></content>
    
    <summary type="html">
    
      初识区块链，以太坊节点的创建与开发
    
    </summary>
    
      <category term="区块链" scheme="http://weafteam.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://weafteam.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow data模块详解</title>
    <link href="http://weafteam.github.io/posts/cd5ba0c4/"/>
    <id>http://weafteam.github.io/posts/cd5ba0c4/</id>
    <published>2018-09-02T14:31:21.000Z</published>
    <updated>2018-09-02T14:42:07.705Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>大家好，本周给大家讲解tensorflow的data模块的详细信息，主要涉及到tf.data.Dataset对象的一些操作，和tf.data.Iterator以及后续使用tf.data API实现Numpy数据的读取、TFRecord数据格式的读取、文本文件的读取以及CSV文件的读取，最后应用批数据来进行训练和验证工作。</p><h1 id="tf.data-api的基本特性"><strong>tf.data API的基本特性：</strong></h1><ol type="1"><li>这个<strong>API</strong>让你可以从简单的，重复使用的片段构造出复杂的输入流水线。</li><li>对于图片模型的管道可以从一个分布式文件系统来聚集数据，而且可以实现每张图片的随机抖动。</li><li>可以实现随机选取图片的合并到一个<strong>batch</strong>，然后训练。</li><li>对于文本模型的管道可能会涉及到从原文本中抽取符号。</li><li>转换他们到一个嵌入标识的查询表。</li><li>批处理不同长度的序列。</li><li>这个<strong>API</strong>可以很轻易的实现大数量数据的处理。</li><li>还可以处理不同的数据格式，还可以实现负责的转换。</li></ol><p>对于<strong>TensorFlow tf.data API</strong>介绍了两种抽象：</p><ol type="1"><li><code>tf.data.Dataset</code>代表了元素的序列，每个元素包括一个或者多个<strong>Tensor</strong>对象。举例，在输入图片的流水线中，一个元素可能是一个单独的训练样本，是一对<strong>tensors</strong>，分别代表的是图片数据以及label。下面有两种不同的方式来创建一个<strong>dataset</strong>。</li></ol><ul><li>创建一个<strong>source</strong>(比如，<code>Dataset.from_tensor_slices()</code>) 从一个或者多个<code>tf.Tensor</code>对象构造。</li><li>应用一个<strong>transformation</strong>(比如，<code>Dataset.batch()</code>) 从一个或者多个<code>tf.data.Dataset</code>对象构造。</li></ul><ol type="1"><li>一个<code>tf.data.Iterator</code>提供了从一个<strong>dataset</strong>中提取元素的主要方法。当<code>Iterator.get_next()</code>方法执行以后，返回的就是<strong>Dataset</strong>的下一个元素。典型的作为输入流水线和你的模型之间的接口。最简单的迭代器是一次性的迭代器，它和一个<strong>Dataset</strong>联系，然后可以迭代一次。对于更加复杂的使用，<code>Iterator.initializer</code>操作开启你重新初始化，和参数化一个<strong>iterator</strong>和不同的<strong>datasets</strong>关联。这样，你就可以在同一个程序中，实现训练数据和验证集数据的多次迭代。</li></ol><h1 id="基本的机制"><strong>基本的机制</strong></h1><p>这一部分指引介绍的是创建不同的<strong>Dataset</strong>和<strong>Iterator</strong>，还有怎么从这些对象中抽取数据。</p><p>开始一个输入流水线，你必须定义一个<em>source</em>，举一个例子：</p><ol type="1"><li>为了从内存的tensors构建一个<code>Dataset</code>，你可以使用下面的方法：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.data.Dataset.from_tensors() <span class="keyword">or</span> tf.data.Dataset.from_tensor_slices()</span><br></pre></td></tr></table></figure><ol type="1"><li>如果你的输入数据在硬盘上，那么推荐你是用TFRecord格式，你可以构建一个<code>tf.data.TFRecordDataset</code></li></ol><p>一旦你有了一个<code>Dataset</code>对象，你可以通过链式方法调用来实现新的Dataset的转换。举一个例子，比如你可以应用一个预元素处理方法<code>Dataset.map()</code>实现每个元素的应用操作。多个元素的转换的方法<code>Dataset.batch()</code>。详细情况你可以查看<code>tf.data.Dataset</code>完整的转换方法。</p><p>从<code>Dataset</code>中消耗值最传统的方式是通过<code>iterator</code>对象。这个对象提供了一次访问dataset中的一个元素。（举例，通过调用 <code>Dataset.make_one_shot_iterator()</code>）。一个<code>tf.data.Iterator</code>对象提供了两个操作：1. <code>Iterator.initializer</code>,这个方法可以实现（重）初始化<strong>iterator</strong>的状态。2. <code>Iterator.get_next()</code>,这个方法返回的是<code>tf.Tensor</code>对象，这个对象和下一个元素相关。依赖你使用的情况，你可能选择不同类型的迭代器，选项概述如下。</p><h3 id="数据集结构"><strong>数据集结构</strong></h3><ol type="1"><li>用<code>Dataset.output_types</code>表示数据集数据类型</li><li>用<code>Dataset.output_shapes</code>表示数据集数据大小</li></ol><p><strong>dataset</strong>包含的每个元素都有相同的结构。一个元素包括一个或者多个<code>tf.Tensor</code>对象，被称为组件（这些tensor对象就是组件）。每个组件有一个<code>tf.DType</code>代表的是元素中tensor的类型。一个<code>tf.TensorShape</code>代表的是每个元素静态<strong>shape</strong>（有可能是部分指定）。<code>Dataset.output_types</code>和<code>Dataset.output_shapes</code>属性允许你可以检查推断<strong>dataset</strong>元素每个组件的<strong>types</strong>和<strong>shapes</strong>。这有可能是单个<strong>tensor</strong>，也有可能是<strong>tuple tensors</strong>，或者是<strong>tensors</strong>的嵌套。举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dataset1 = tf.data.Dataset.from_tensor_slices(tf.random_uniform([<span class="number">4</span>, <span class="number">10</span>]))</span><br><span class="line">print(dataset1.output_types)  <span class="comment"># ==&gt; "tf.float32"</span></span><br><span class="line">print(dataset1.output_shapes)  <span class="comment"># ==&gt; "(10,)"</span></span><br><span class="line"></span><br><span class="line">dataset2 = tf.data.Dataset.from_tensor_slices(</span><br><span class="line">   (tf.random_uniform([<span class="number">4</span>]),</span><br><span class="line">    tf.random_uniform([<span class="number">4</span>, <span class="number">100</span>], maxval=<span class="number">100</span>, dtype=tf.int32)))</span><br><span class="line">print(dataset2.output_types)  <span class="comment"># ==&gt; "(tf.float32, tf.int32)"</span></span><br><span class="line">print(dataset2.output_shapes)  <span class="comment"># ==&gt; "((), (100,))"</span></span><br><span class="line"></span><br><span class="line">dataset3 = tf.data.Dataset.zip((dataset1, dataset2))</span><br><span class="line">print(dataset3.output_types)  <span class="comment"># ==&gt; (tf.float32, (tf.float32, tf.int32))</span></span><br><span class="line">print(dataset3.output_shapes)  <span class="comment"># ==&gt; "(10, ((), (100,)))"</span></span><br></pre></td></tr></table></figure><p>对一个元素的组件起一个名字，通常是很便捷的事情。而且起名字以后打印相关信息会变得更加直观。举例，比如如果你代表不同的训练数据。另外，<strong>tuple</strong>你可以使用<code>collections.namedtuple</code>或者一个<strong>dictionary</strong>映射从字符串到tensors来表示一个单个元素的<strong>Dataset</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dataset = tf.data.Dataset.from_tensor_slices(</span><br><span class="line">   &#123;<span class="string">"a"</span>: tf.random_uniform([<span class="number">4</span>]),</span><br><span class="line">    <span class="string">"b"</span>: tf.random_uniform([<span class="number">4</span>, <span class="number">100</span>], maxval=<span class="number">100</span>, dtype=tf.int32)&#125;)</span><br><span class="line">print(dataset.output_types)  <span class="comment"># ==&gt; "&#123;'a': tf.float32, 'b': tf.int32&#125;"</span></span><br><span class="line">print(dataset.output_shapes)  <span class="comment"># ==&gt; "&#123;'a': (), 'b': (100,)&#125;"</span></span><br></pre></td></tr></table></figure><p><code>Dataset</code>转换支持任意结构的<strong>datasets</strong>，当你使用<code>Dataset.map()</code>, <code>Dataset.flat_map()</code>, 和<code>Dataset.filter()</code>转换的时候，为了给每个元素应用一个函数，元素结构决定了函数的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dataset1 = dataset1.map(<span class="keyword">lambda</span> x: ...)</span><br><span class="line"></span><br><span class="line">dataset2 = dataset2.flat_map(<span class="keyword">lambda</span> x, y: ...)</span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">Note:</span> Argument destructuring is not available in Python 3.</span></span><br><span class="line">dataset3 = dataset3.filter(<span class="keyword">lambda</span> x, (y, z): ...)</span><br></pre></td></tr></table></figure><h3 id="创建一个iterator"><strong>创建一个iterator</strong></h3><p>一旦你构建了一个<strong>Dataset</strong>去表示你的输入数据，下一步就是创建一个<strong>Iterator</strong>从<strong>Dataset</strong>访问你的数据。<strong>tf.data API</strong>当前支持下面的迭代器，来提升复杂的等级。</p><ul><li><strong>one-shot</strong></li><li><strong>initializable</strong></li><li><strong>reinitializable</strong></li><li><strong>feedable</strong></li></ul><p><strong>one-shot</strong>迭代器是最简单的迭代器，它只支持，从数据集中迭代读取一次数据，不需要显示的初始化。一次性迭代器基本上可以处理所有基于队列输入管道的支持。但是这不支持参数化。使用<strong>Dataset.range()</strong>的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dataset = tf.data.Dataset.range(<span class="number">100</span>)</span><br><span class="line">iterator = dataset.make_one_shot_iterator()</span><br><span class="line">next_element = iterator.get_next()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    value = sess.run(next_element)</span><br><span class="line">    <span class="keyword">assert</span> i == value</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> Currently, one-shot iterators are the only type that is easily usable with an <code>Estimator</code>.（当前一次性迭代器是唯一一个和Estimator共同使用的类型）</p><p>一个<strong>initializable</strong>迭代器，在使用之前要求你显示运行<code>iterator.initializer</code>操作。对于这个不方便引入的同时，它可以让你参数化一个已经定义好的<strong>Dataset</strong>，当你初始化一个<strong>iterator</strong>可以使用一个或者多个<code>tf.placeholder()</code> tensors来输入数据。就<code>Dataset.range()</code>的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">max_value = tf.placeholder(tf.int64, shape=[])</span><br><span class="line">dataset = tf.data.Dataset.range(max_value)</span><br><span class="line">iterator = dataset.make_initializable_iterator()</span><br><span class="line">next_element = iterator.get_next()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize an iterator over a dataset with 10 elements.</span></span><br><span class="line"><span class="comment"># 必须显示run iterator.initializer</span></span><br><span class="line">sess.run(iterator.initializer, feed_dict=&#123;max_value: <span class="number">10</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    value = sess.run(next_element)</span><br><span class="line">    <span class="keyword">assert</span> i == value</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the same iterator over a dataset with 100 elements.</span></span><br><span class="line">sess.run(iterator.initializer, feed_dict=&#123;max_value: <span class="number">100</span>&#125;)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    value = sess.run(next_element)</span><br><span class="line">    <span class="keyword">assert</span> i == value</span><br></pre></td></tr></table></figure><p>一个<strong>reinitializable</strong>迭代器可以从多个不同的<strong>Dataset</strong>对象中实现初始化。举例，你可能有一个训练输入管道使用随机抖动来增强图片为了实现网络的泛化性能。一个验证集输入管道验证预测是未修改的数据。这些管道就是使用不同的<strong>Dataset</strong>对象的典型示例，但是有相同的结构。（比如，相同的类型，每个组件的兼容shapes）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define training and validation datasets with the same structure.</span></span><br><span class="line"><span class="comment">#　定义训练和验证集　具有相同的结构</span></span><br><span class="line">training_dataset = tf.data.Dataset.range(<span class="number">100</span>).map(</span><br><span class="line">    <span class="keyword">lambda</span> x: x + tf.random_uniform([], <span class="number">-10</span>, <span class="number">10</span>, tf.int64))</span><br><span class="line">validation_dataset = tf.data.Dataset.range(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># A reinitializable iterator is defined by its structure. We could use the</span></span><br><span class="line"><span class="comment"># `output_types` and `output_shapes` properties of either `training_dataset`</span></span><br><span class="line"><span class="comment"># or `validation_dataset` here, because they are compatible.</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">一个reinitializable iterator是由其结构来定义的，我们可以使用（training或者validation）的output_types和output_shapes属性，因为彼此都是兼容的。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">iterator = tf.data.Iterator.from_structure(training_dataset.output_types,</span><br><span class="line">                                           training_dataset.output_shapes)</span><br><span class="line">next_element = iterator.get_next()</span><br><span class="line"></span><br><span class="line">training_init_op = iterator.make_initializer(training_dataset)</span><br><span class="line">validation_init_op = iterator.make_initializer(validation_dataset)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run 20 epochs in which the training dataset is traversed, followed by the</span></span><br><span class="line"><span class="comment"># validation dataset.</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">  　　<span class="comment"># Initialize an iterator over the training dataset.</span></span><br><span class="line">  　　sess.run(training_init_op)</span><br><span class="line">  　　<span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    　　　　sess.run(next_element)</span><br><span class="line"></span><br><span class="line">  　　<span class="comment"># Initialize an iterator over the validation dataset.</span></span><br><span class="line">  　　sess.run(validation_init_op)</span><br><span class="line">  　　<span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">    　　　　sess.run(next_element)</span><br></pre></td></tr></table></figure><p>一个<strong>feedable</strong>迭代器，可以和<code>tf.placeholder</code>一起去选择Iterator为了使用每一次的<code>tf.Session.run()</code>,通过类似于feed_dict的机制来实现这一功能。它提供了和<strong>reinitializable</strong>迭代器相同的功能，但是这个不需要你在切换迭代器的时候初始化迭代器。举例，使用相同的训练和验证的示例，你可以使用<code>tf.data.Iterator.from_string_handle</code>去定义一个<strong>feedable iterator</strong>，然后允许你切换两个数据集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define training and validation datasets with the same structure.</span></span><br><span class="line">training_dataset = tf.data.Dataset.range(<span class="number">100</span>).map(</span><br><span class="line">    <span class="keyword">lambda</span> x: x + tf.random_uniform([], <span class="number">-10</span>, <span class="number">10</span>, tf.int64)).repeat()</span><br><span class="line">validation_dataset = tf.data.Dataset.range(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># A feedable iterator is defined by a handle placeholder and its structure. We</span></span><br><span class="line"><span class="comment"># could use the `output_types` and `output_shapes` properties of either</span></span><br><span class="line"><span class="comment"># `training_dataset` or `validation_dataset` here, because they have</span></span><br><span class="line"><span class="comment"># identical structure.</span></span><br><span class="line">handle = tf.placeholder(tf.string, shape=[])</span><br><span class="line">iterator = tf.data.Iterator.from_string_handle(</span><br><span class="line">    handle, training_dataset.output_types, training_dataset.output_shapes)</span><br><span class="line">next_element = iterator.get_next()</span><br><span class="line"></span><br><span class="line"><span class="comment"># You can use feedable iterators with a variety of different kinds of iterator</span></span><br><span class="line"><span class="comment"># (such as one-shot and initializable iterators).</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">你可以在feedable iterator中使用不同种类的iterator，比如one-shot和initializable iterator</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">training_iterator = training_dataset.make_one_shot_iterator()</span><br><span class="line">validation_iterator = validation_dataset.make_initializable_iterator()</span><br><span class="line"></span><br><span class="line"><span class="comment"># The `Iterator.string_handle()` method returns a tensor that can be evaluated</span></span><br><span class="line"><span class="comment"># and used to feed the `handle` placeholder.</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Iterator.string_handle()方法可以实现handle placeholder的字符串抽取</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">training_handle = sess.run(training_iterator.string_handle())</span><br><span class="line">validation_handle = sess.run(validation_iterator.string_handle())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Loop forever, alternating between training and validation.</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="comment"># Run 200 steps using the training dataset. Note that the training dataset is</span></span><br><span class="line">    <span class="comment"># infinite, and we resume from where we left off in the previous `while` loop</span></span><br><span class="line">    <span class="comment"># iteration.</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">200</span>):</span><br><span class="line">        sess.run(next_element, feed_dict=&#123;handle: training_handle&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Run one pass over the validation dataset.</span></span><br><span class="line">    sess.run(validation_iterator.initializer)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">        sess.run(next_element, feed_dict=&#123;handle: validation_handle&#125;)</span><br></pre></td></tr></table></figure><h3 id="从迭代器中消耗值"><strong>从迭代器中消耗值</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">dataset = tf.data.Dataset.range(<span class="number">5</span>)</span><br><span class="line">iterator = dataset.make_initializable_iterator()</span><br><span class="line">next_element = iterator.get_next()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Typically `result` will be the output of a model, or an optimizer's</span></span><br><span class="line"><span class="comment"># training operation.</span></span><br><span class="line">result = tf.add(next_element, next_element)</span><br><span class="line"></span><br><span class="line">sess.run(iterator.initializer)</span><br><span class="line">print(sess.run(result))  <span class="comment"># ==&gt; "0"</span></span><br><span class="line">print(sess.run(result))  <span class="comment"># ==&gt; "2"</span></span><br><span class="line">print(sess.run(result))  <span class="comment"># ==&gt; "4"</span></span><br><span class="line">print(sess.run(result))  <span class="comment"># ==&gt; "6"</span></span><br><span class="line">print(sess.run(result))  <span class="comment"># ==&gt; "8"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  sess.run(result)</span><br><span class="line"><span class="keyword">except</span> tf.errors.OutOfRangeError:</span><br><span class="line">  print(<span class="string">"End of dataset"</span>)  <span class="comment"># ==&gt; "End of dataset"</span></span><br></pre></td></tr></table></figure><p>一个正常模式就是捕获异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sess.run(iterator.initializer)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    sess.run(result)</span><br><span class="line">  <span class="keyword">except</span> tf.errors.OutOfRangeError:</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>如果<strong>dataset</strong>的每个元素有一个嵌套结构的话，<strong>Iterator.get_next()</strong>方法返回的是一个或者多个对象，也具有相同的嵌套结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dataset1 = tf.data.Dataset.from_tensor_slices(tf.random_uniform([<span class="number">4</span>, <span class="number">10</span>]))</span><br><span class="line">dataset2 = tf.data.Dataset.from_tensor_slices((tf.random_uniform([<span class="number">4</span>]), tf.random_uniform([<span class="number">4</span>, <span class="number">100</span>])))</span><br><span class="line">dataset3 = tf.data.Dataset.zip((dataset1, dataset2))</span><br><span class="line"></span><br><span class="line">iterator = dataset3.make_initializable_iterator()</span><br><span class="line"></span><br><span class="line">sess.run(iterator.initializer)</span><br><span class="line">next1, (next2, next3) = iterator.get_next()</span><br></pre></td></tr></table></figure><p>注意 next1， next2，next3。都是被相同的操作生成的。（通过Iterator.get_next()创建）。因此，评估这些tensors的话，就可以加强迭代所有的组件。一个典型的iterator消费器，将包括所有组件的单一表达式。</p><h3 id="保存迭代器的状态"><strong>保存迭代器的状态</strong></h3><p><code>tf.contrib.data.make_saveable_from_iterator</code>函数从一个迭代器中创建一个<code>SaveableObject</code>，这个对象可以实现当前迭代器的保存和恢复（有效的，就是整个输入管道）。一个saveable对象创建以后可以添加到<code>tf.train.Saver</code>变量list或者是<code>tf.GraphKeys.SAVEABLE_OBJECTS</code>集合里面，为了保存和恢复，这种方式和<code>tf.Variable</code>机制差不多。这涉及到了Saveing and Restoring的细节。怎么保存和恢复变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create saveable object from iterator.</span></span><br><span class="line">saveable = tf.contrib.data.make_saveable_from_iterator(iterator)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Save the iterator state by adding it to the saveable objects collection.</span></span><br><span class="line">tf.add_to_collection(tf.GraphKeys.SAVEABLE_OBJECTS, saveable)</span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> should_checkpoint:</span><br><span class="line">        saver.save(path_to_checkpoint)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Restore the iterator state.</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    saver.restore(sess, path_to_checkpoint)</span><br></pre></td></tr></table></figure><h1 id="读取输入数据"><strong>读取输入数据</strong></h1><h3 id="消耗numpy数组数据"><strong>消耗NumPy数组数据</strong></h3><p>如果你的数据适合在内存中管理，最简单的方式就是将原始数据转换为<code>tf.Tensor</code>对象，然后使用<code>Dataset.from_tenosr_slices</code>来创建一个<strong>Dataset</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load the training data into two NumPy arrays, for example using `np.load()`.</span></span><br><span class="line"><span class="comment"># 加载训练数据到两个Numpy数组，使用np.load()示例</span></span><br><span class="line"><span class="keyword">with</span> np.load(<span class="string">"/var/data/training_data.npy"</span>) <span class="keyword">as</span> data:</span><br><span class="line">    features = data[<span class="string">"features"</span>]</span><br><span class="line">    labels = data[<span class="string">"labels"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Assume that each row of `features` corresponds to the same row as `labels`.</span></span><br><span class="line"><span class="comment"># 假定每一行的features和labels所对应。</span></span><br><span class="line"><span class="keyword">assert</span> features.shape[<span class="number">0</span>] == labels.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">dataset = tf.data.Dataset.from_tensor_slices((features, labels))</span><br></pre></td></tr></table></figure><p>值得注意的是，上面的代码片段将嵌入<strong>features</strong>和<strong>labels</strong>数组到TensorFlow图中的tf.constant()操作。这对于效地数据集是可取的，但是浪费内存—因为数组的内容将会被拷贝多次，—对于<code>tf.GraphDef</code>协议缓存会达到2GB的缓存限制。</p><p>可选的，你可以通过<code>tf.placeholder()</code>tensors来定义一个<strong>Dataset</strong>，当你从一个<strong>Dataset</strong>初始化一个<strong>Iterator</strong>以后，<em>feed</em> Numpy数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load the training data into two NumPy arrays, for example using `np.load()`.</span></span><br><span class="line"><span class="comment"># 加载训练数据到两个Numpy数组，使用np.load()示例</span></span><br><span class="line"><span class="keyword">with</span> np.load(<span class="string">"/var/data/training_data.npy"</span>) <span class="keyword">as</span> data:</span><br><span class="line">    features = data[<span class="string">"features"</span>]</span><br><span class="line">    labels = data[<span class="string">"labels"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Assume that each row of `features` corresponds to the same row as `labels`.</span></span><br><span class="line"><span class="comment"># 假定每一行的features和labels所对应。</span></span><br><span class="line"><span class="keyword">assert</span> features.shape[<span class="number">0</span>] == labels.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">features_placeholder = tf.placeholder(features.dtype, features.shape)</span><br><span class="line">labels_placeholder = tf.placeholder(labels.dtype, labels.shape)</span><br><span class="line"></span><br><span class="line">dataset = tf.data.Dataset.from_tensor_slices((features_placeholder, labels_placeholder))</span><br><span class="line"><span class="comment"># [Other transformations on `dataset`...]</span></span><br><span class="line">dataset = ...</span><br><span class="line">iterator = dataset.make_initializable_iterator()</span><br><span class="line"></span><br><span class="line">sess.run(iterator.initializer, feed_dict=&#123;features_placeholder: features,</span><br><span class="line">                                          labels_placeholder: labels&#125;)</span><br></pre></td></tr></table></figure><h3 id="消耗tfrecord数据"><strong>消耗TFRecord数据</strong></h3><p><strong>tf.data API</strong>支持很多种文件格式，因此，你可以处理很大的数据集而不是直接加载在内存中。举例，TFRecord文件格式是一个简单的面向记录的二进制文件格式，许多TensorFlow的应用都使用它来作为训练数据。<code>tf.data.TFRecordDataset</code>类可以使你流化一个或者多个TFRecord文件作为你输入管道的一部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Creates a dataset that reads all of the examples from two files.</span></span><br><span class="line"><span class="comment"># 从两个文件中读取所有样例，然后创建一个dataset</span></span><br><span class="line">filenames = [<span class="string">"/var/data/file1.tfrecord"</span>, <span class="string">"/var/data/file2.tfrecord"</span>]</span><br><span class="line">dataset = tf.data.TFRecordDataset(filenames)</span><br></pre></td></tr></table></figure><p>给<strong>TFRecordDataset</strong>初始化的<strong>filenames</strong>参数也可以是一个<strong>strings</strong>，或者是一个<code>tf.Tensor</code>的<strong>strings</strong>对象。因此，如果你有两个集合，一个是训练集，一个是测试集，那么你可以使用一个<code>tf.placeholder(tf.string)</code>去代表一个<strong>filenames</strong>，然后从一个合适的<strong>filenames</strong>来初始化一个迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">filenames = tf.placeholder(tf.string, shape=[<span class="keyword">None</span>])</span><br><span class="line">dataset = tf.data.TFRecordDataset(filenames)</span><br><span class="line">dataset = dataset.map(...)  <span class="comment"># Parse the record into tensors. 解析record到tensors</span></span><br><span class="line">dataset = dataset.repeat()  <span class="comment"># Repeat the input indefinitely. 重复无限输入数据</span></span><br><span class="line">dataset = dataset.batch(<span class="number">32</span>)</span><br><span class="line">iterator = dataset.make_initializable_iterator()</span><br><span class="line"></span><br><span class="line"><span class="comment"># You can feed the initializer with the appropriate filenames for the current</span></span><br><span class="line"><span class="comment"># phase of execution, e.g. training vs. validation.</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">你可以给不同阶段的执行初始化不同的filenames，比如训练和验证</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize `iterator` with training data.</span></span><br><span class="line"><span class="comment"># 用训练数据来初始化iterator</span></span><br><span class="line">training_filenames = [<span class="string">"/var/data/file1.tfrecord"</span>, <span class="string">"/var/data/file2.tfrecord"</span>]</span><br><span class="line">sess.run(iterator.initializer, feed_dict=&#123;filenames: training_filenames&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize `iterator` with validation data.</span></span><br><span class="line"><span class="comment"># 用验证数据来初始化iterator</span></span><br><span class="line">validation_filenames = [<span class="string">"/var/data/validation1.tfrecord"</span>, ...]</span><br><span class="line">sess.run(iterator.initializer, feed_dict=&#123;filenames: validation_filenames&#125;)</span><br></pre></td></tr></table></figure><h3 id="消耗text数据"><strong>消耗text数据</strong></h3><p>许多数据集是分布在一个或者多个text文件中的。<code>tf.data.TextLineDataset</code>提供了从一个或者多个text文件中抽取行数据的简单方法。给一个或者多个filenames，一个<strong>TextLineDataset</strong>将会在这些文件的每一行都生成一个<strong>string-value</strong>元素，像<strong>TFRecordDataset</strong>，<strong>TextLineDataset</strong>接受filenames作为<code>tf.Tensor</code>,所以你也可以通过<code>tf.placeholder(tf.string)</code>参数化<strong>filenames</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filenames = [<span class="string">"/var/data/file1.txt"</span>, <span class="string">"/var/data/file2.txt"</span>]</span><br><span class="line">dataset = tf.data.TextLineDataset(filenames)</span><br></pre></td></tr></table></figure><p>默认的，一个<strong>TextLineDataset</strong>产出每一个文件的每一行，这有可能不是我们想要的，举例，如果文件的开始头，或者注释。这些行我们可以通过<code>Dataset.skip()</code>和<code>Dataset.filter()</code>进行转换。为了给每一个文件分别应用转换，我们可以使用<code>Dataset.flat_map()</code>为每一个文件创建一个嵌套的<strong>Dataset</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">filenames = [<span class="string">"/var/data/file1.txt"</span>, <span class="string">"/var/data/file2.txt"</span>]</span><br><span class="line"></span><br><span class="line">dataset = tf.data.Dataset.from_tensor_slices(filenames)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use `Dataset.flat_map()` to transform each file as a separate nested dataset,</span></span><br><span class="line"><span class="comment"># and then concatenate their contents sequentially into a single "flat" dataset.</span></span><br><span class="line"><span class="comment"># * Skip the first line (header row).</span></span><br><span class="line"><span class="comment"># * Filter out lines beginning with "#" (comments).</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">使用 Dataset.flat_map()去转换每一个文件，分离出一个嵌套的dataset</span></span><br><span class="line"><span class="string">然后使用级联他们的内容序列化为一个单个的flat dataset</span></span><br><span class="line"><span class="string">* skip第一行（header row）</span></span><br><span class="line"><span class="string">* filter掉行开始是#注释符号的行</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">dataset = dataset.flat_map(</span><br><span class="line">    <span class="keyword">lambda</span> filename: (</span><br><span class="line">        tf.data.TextLineDataset(filename)</span><br><span class="line">        .skip(<span class="number">1</span>)</span><br><span class="line">        .filter(<span class="keyword">lambda</span> line: tf.not_equal(tf.substr(line, <span class="number">0</span>, <span class="number">1</span>), <span class="string">"#"</span>))))</span><br></pre></td></tr></table></figure><h3 id="消耗csv数据"><strong>消耗CSV数据</strong></h3><p>CSV文件格式是很流行的一种格式，它存储的格式是通过tab来间隔数据，在一个无格式的文本文件中。<code>tf.contrib.data.CsvDataset</code>类提供了从一个或者多个CSV文件中提取数据的方式。给一个或者多个<strong>filenames</strong>或者一个默认的list，一个<strong>CsvDataset</strong>将会生成一个tuple的元素，元素类型和每一个CSV记录默认提供的类型是相关的。像<strong>TFRecordDataset</strong>和<strong>TextLineDataset</strong>一样，<strong>CsvDataset</strong>接受<strong>filenames</strong>作为一个<code>tf.Tenosr</code>,因此你一样可以使用<code>tf.placeholder(tf.string)</code>实现参数化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Creates a dataset that reads all of the records from two CSV files, each with</span></span><br><span class="line"><span class="comment"># eight float columns</span></span><br><span class="line"><span class="comment"># 从两个CSV文件读取所有的记录来创建一个dataset对象</span></span><br><span class="line"><span class="comment"># 每一个csv文件中有八列float数据</span></span><br><span class="line">filenames = [<span class="string">"/var/data/file1.csv"</span>, <span class="string">"/var/data/file2.csv"</span>]</span><br><span class="line">record_defaults = [tf.float32] * <span class="number">8</span>   <span class="comment"># Eight required float columns</span></span><br><span class="line">dataset = tf.contrib.data.CsvDataset(filenames, record_defaults)</span><br></pre></td></tr></table></figure><p>如果有一些列是空的，你可以提供默认的值，代替其类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Creates a dataset that reads all of the records from two CSV files, each with</span></span><br><span class="line"><span class="comment"># four float columns which may have missing values</span></span><br><span class="line"><span class="comment"># 从两个CSV文件读取所有的记录来创建一个dataset对象</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">record_defaults = [[<span class="number">0.0</span>]] * <span class="number">8</span></span><br><span class="line">dataset = tf.contrib.data.CsvDataset(filenames, record_defaults)</span><br></pre></td></tr></table></figure><p>默认的，一个<strong>CsvDataset</strong>产出每一个文件每一行的每列，如果我们不想这么多数据怎么办，举例，如果我们不想要开头，还有一些列我们也不想要。这些行和字段都可以使用<strong>header</strong>和<strong>select_cols</strong>参数来进行忽略。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Creates a dataset that reads all of the records from two CSV files with</span></span><br><span class="line"><span class="comment"># headers, extracting float data from columns 2 and 4.</span></span><br><span class="line"><span class="comment"># 从两个CSV文件读取所有的记录来创建一个dataset对象</span></span><br><span class="line"><span class="comment"># 头忽略，然后只要第二列和第四列</span></span><br><span class="line">record_defaults = [[<span class="number">0.0</span>]] * <span class="number">2</span>  <span class="comment"># Only provide defaults for the selected columns</span></span><br><span class="line">dataset = tf.contrib.data.CsvDataset(filenames, record_defaults, header=<span class="keyword">True</span>, select_cols=[<span class="number">2</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure><h1 id="使用dataset.map来预处理数据"><strong>使用Dataset.map()来预处理数据</strong></h1><p><code>Dataset.map(f)</code>对输入dataset的每一个元素应用函数<strong>f</strong>来生成新的dataset。这是基于<strong>map</strong>函数的，这是在函数式编程语言中通常会应用一个lists或者其他结构的映射方法。函数<strong>f</strong>输入一个<code>tf.Tenosr</code>对象代表一个输入的单个元素。然后返回一个<code>tf.Tensor</code>对象代表新dataset的单个元素。它的实现都是基于TensorFlow的标准转换操作。</p><p>这部分覆盖了一些怎么使用<code>Dataset.map()</code>的例子</p><h3 id="解析tf.example协议缓存信息"><strong>解析<code>tf.Example</code>协议缓存信息</strong></h3><p>许多输入管道从一个<strong>TFRecord-格式文件</strong>（写，举例，使用<code>tf.python_io.TFRecordWriter</code>）提取tf.train.Example协议缓存信息。每一个<code>tf.train.Example</code>记录包含一个或者多个features，输入管道可以转换这些features到tensors。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Transforms a scalar string `example_proto` into a pair of a scalar string and</span></span><br><span class="line"><span class="comment"># a scalar integer, representing an image and its label, respectively.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_parse_function</span><span class="params">(example_proto)</span>:</span></span><br><span class="line">    features = &#123;<span class="string">"image"</span>: tf.FixedLenFeature((), tf.string, default_value=<span class="string">""</span>),</span><br><span class="line">                <span class="string">"label"</span>: tf.FixedLenFeature((), tf.int32, default_value=<span class="number">0</span>)&#125;</span><br><span class="line">    parsed_features = tf.parse_single_example(example_proto, features)</span><br><span class="line">    <span class="keyword">return</span> parsed_features[<span class="string">"image"</span>], parsed_features[<span class="string">"label"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Creates a dataset that reads all of the examples from two files, and extracts</span></span><br><span class="line"><span class="comment"># the image and label features.</span></span><br><span class="line">filenames = [<span class="string">"/var/data/file1.tfrecord"</span>, <span class="string">"/var/data/file2.tfrecord"</span>]</span><br><span class="line">dataset = tf.data.TFRecordDataset(filenames)</span><br><span class="line">dataset = dataset.map(_parse_function)</span><br></pre></td></tr></table></figure><h3 id="编码图片数据然后resize"><strong>编码图片数据然后resize</strong></h3><p>当训练一个用真实世界图片数据的神经网络的时候，将图片的大写resize到一个通用的size是很有必要的。因此必须批处理为固定的大小。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Reads an image from a file, decodes it into a dense tensor, and resizes it</span></span><br><span class="line"><span class="comment"># to a fixed shape.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_parse_function</span><span class="params">(filename, label)</span>:</span></span><br><span class="line">  image_string = tf.read_file(filename)</span><br><span class="line">  image_decoded = tf.image.decode_jpeg(image_string)</span><br><span class="line">  image_resized = tf.image.resize_images(image_decoded, [<span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">  <span class="keyword">return</span> image_resized, label</span><br><span class="line"></span><br><span class="line"><span class="comment"># A vector of filenames.</span></span><br><span class="line">filenames = tf.constant([<span class="string">"/var/data/image1.jpg"</span>, <span class="string">"/var/data/image2.jpg"</span>, ...])</span><br><span class="line"></span><br><span class="line"><span class="comment"># `labels[i]` is the label for the image in `filenames[i].</span></span><br><span class="line">labels = tf.constant([<span class="number">0</span>, <span class="number">37</span>, ...])</span><br><span class="line"></span><br><span class="line">dataset = tf.data.Dataset.from_tensor_slices((filenames, labels))</span><br><span class="line">dataset = dataset.map(_parse_function)</span><br></pre></td></tr></table></figure><h3 id="使用tf.py_func应用任意的python逻辑"><strong>使用tf.py_func()应用任意的Python逻辑</strong></h3><p>为性能的原因，我们鼓励你使用TensorFlow操作来预处理你的数据。然后，有时候当解析你的数据时候调用外部的Python库对你来说是有用的。为了实现这样，在Dataset.map()中调用<code>tf.py_func()</code>来实现转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a custom OpenCV function to read the image, instead of the standard</span></span><br><span class="line"><span class="comment"># TensorFlow `tf.read_file()` operation.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_read_py_function</span><span class="params">(filename, label)</span>:</span></span><br><span class="line">    image_decoded = cv2.imread(filename.decode(), cv2.IMREAD_GRAYSCALE)</span><br><span class="line">    <span class="keyword">return</span> image_decoded, label</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use standard TensorFlow operations to resize the image to a fixed shape.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_resize_function</span><span class="params">(image_decoded, label)</span>:</span></span><br><span class="line">    image_decoded.set_shape([<span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span>])</span><br><span class="line">    image_resized = tf.image.resize_images(image_decoded, [<span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">    <span class="keyword">return</span> image_resized, label</span><br><span class="line"></span><br><span class="line">filenames = [<span class="string">"/var/data/image1.jpg"</span>, <span class="string">"/var/data/image2.jpg"</span>, ...]</span><br><span class="line">labels = [<span class="number">0</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">1</span>, ...]</span><br><span class="line"></span><br><span class="line">dataset = tf.data.Dataset.from_tensor_slices((filenames, labels))</span><br><span class="line">dataset = dataset.map(</span><br><span class="line">    <span class="keyword">lambda</span> filename, label: tuple(tf.py_func(</span><br><span class="line">        _read_py_function, [filename, label], [tf.uint8, label.dtype])))</span><br><span class="line">dataset = dataset.map(_resize_function)</span><br></pre></td></tr></table></figure><h1 id="批处理dataset元素"><strong>批处理dataset元素</strong></h1><h3 id="简单的batching"><strong>简单的batching</strong></h3><p>批处理堆积n个连续的dataset元素到一个单个元素。<code>Dataset.batch()</code>就这这么做的。与之相同的约束是<code>tf.stack()</code>操作，应用到每一个元素的每一个组件，比如，对于每一个组件<strong>i</strong>，所有的元素有相同shape的tensor。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">inc_dataset = tf.data.Dataset.range(<span class="number">100</span>)</span><br><span class="line">dec_dataset = tf.data.Dataset.range(<span class="number">0</span>, <span class="number">-100</span>, <span class="number">-1</span>)</span><br><span class="line">dataset = tf.data.Dataset.zip((inc_dataset, dec_dataset))</span><br><span class="line">batched_dataset = dataset.batch(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">iterator = batched_dataset.make_one_shot_iterator()</span><br><span class="line">next_element = iterator.get_next()</span><br><span class="line"></span><br><span class="line">print(sess.run(next_element))  <span class="comment"># ==&gt; ([0, 1, 2,   3],   [ 0, -1,  -2,  -3])</span></span><br><span class="line">print(sess.run(next_element))  <span class="comment"># ==&gt; ([4, 5, 6,   7],   [-4, -5,  -6,  -7])</span></span><br><span class="line">print(sess.run(next_element))  <span class="comment"># ==&gt; ([8, 9, 10, 11],   [-8, -9, -10, -11])</span></span><br></pre></td></tr></table></figure><h3 id="给tensors批量添加padding"><strong>给tensors批量添加padding</strong></h3><p>关于上面的tensor来讲，有相同的size，然而，许多的模型（比如，序列模型）可以有变化的尺寸。（比如，不同的序列长度）为了处理这种情况，<code>Dataset.padded_batch()</code>转换使得你可以处理不同shapes的tensors，通过指定一个或者多个你想要padding的维度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dataset = tf.data.Dataset.range(<span class="number">100</span>)</span><br><span class="line">dataset = dataset.map(<span class="keyword">lambda</span> x: tf.fill([tf.cast(x, tf.int32)], x))</span><br><span class="line">dataset = dataset.padded_batch(<span class="number">4</span>, padded_shapes=[<span class="keyword">None</span>])</span><br><span class="line"></span><br><span class="line">iterator = dataset.make_one_shot_iterator()</span><br><span class="line">next_element = iterator.get_next()</span><br><span class="line"></span><br><span class="line">print(sess.run(next_element))  <span class="comment"># ==&gt; [[0, 0, 0], [1, 0, 0], [2, 2, 0], [3, 3, 3]]</span></span><br><span class="line">print(sess.run(next_element))  <span class="comment"># ==&gt; [[4, 4, 4, 4, 0, 0, 0],</span></span><br><span class="line">                               <span class="comment">#      [5, 5, 5, 5, 5, 0, 0],</span></span><br><span class="line">                               <span class="comment">#      [6, 6, 6, 6, 6, 6, 0],</span></span><br><span class="line">                               <span class="comment">#      [7, 7, 7, 7, 7, 7, 7]]</span></span><br></pre></td></tr></table></figure><p><code>Dataset.padded_batch()</code>转换允许你去给每一个组件的每一个维度设置不同的padding，而且它可以实现变长（通过指定None的方式）或者固定长度。去复写padding值，也是可以的，默认的值一般是0。</p><h1 id="训练流程"><strong>训练流程</strong></h1><p><strong>tf.data API</strong>提供两种处理相同书的多次epochs。</p><p>最简单的放还是就是使用<code>Dataset.repeat()</code>方法的转换来实现多次的epochs。举例，创建一个dataset然后重复10 epochs。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filenames = [<span class="string">"/var/data/file1.tfrecord"</span>, <span class="string">"/var/data/file2.tfrecord"</span>]</span><br><span class="line">dataset = tf.data.TFRecordDataset(filenames)</span><br><span class="line">dataset = dataset.map(...)</span><br><span class="line">dataset = dataset.repeat(<span class="number">10</span>)</span><br><span class="line">dataset = dataset.batch(<span class="number">32</span>)</span><br></pre></td></tr></table></figure><p>应用<code>Dataset.repeat()</code>时候，如果没有参数，将会无限重复输入。<code>Dataset.repeat()</code>转换符号链接它的参数没有将一个epoch的结束和下一个epoch的开始做信号处理。</p><p>如果你想接受一个epoch结束的信号，你可以写一个训练循环，然后在数据集的结束捕获<code>tf.errors.OutOfRangeError</code>。在这个点上你可以为epoch收集一些统计信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">filenames = [<span class="string">"/var/data/file1.tfrecord"</span>, <span class="string">"/var/data/file2.tfrecord"</span>]</span><br><span class="line">dataset = tf.data.TFRecordDataset(filenames)</span><br><span class="line">dataset = dataset.map(...)</span><br><span class="line">dataset = dataset.batch(<span class="number">32</span>)</span><br><span class="line">iterator = dataset.make_initializable_iterator()</span><br><span class="line">next_element = iterator.get_next()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Compute for 100 epochs.</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    sess.run(iterator.initializer)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          sess.run(next_element)</span><br><span class="line">      <span class="keyword">except</span> tf.errors.OutOfRangeError:</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># [Perform end-of-epoch calculations here.]</span></span><br></pre></td></tr></table></figure><h3 id="随机打乱输入数据"><strong>随机打乱输入数据</strong></h3><p><code>Dataset.shuffle()</code>转换时随机打乱输入数据。类似于<code>tf.RandomShoffleQueue</code>的算法。它包含固定的缓存，和选择下一个元素的正太随机分布的缓存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">filenames = [<span class="string">"/var/data/file1.tfrecord"</span>, <span class="string">"/var/data/file2.tfrecord"</span>]</span><br><span class="line">dataset = tf.data.TFRecordDataset(filenames)</span><br><span class="line">dataset = dataset.map(...)</span><br><span class="line">dataset = dataset.shuffle(buffer_size=<span class="number">10000</span>)</span><br><span class="line">dataset = dataset.batch(<span class="number">32</span>)</span><br><span class="line">dataset = dataset.repeat()</span><br></pre></td></tr></table></figure><h3 id="使用高级的apis"><strong>使用高级的APIs</strong></h3><p><code>tf.train.MonitoredTrainingSession</code> API 简化了许多TensorFlow的分布式设置。<strong>MonitoredTrainingSession</strong>使用<code>tf.errors.OutOfRangeError</code>去信号化训练是否完成，因此使用<strong>tf.data API</strong>,我们推荐使用<code>Dataset.make_one_shor_iterator()</code>,举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">filenames = [<span class="string">"/var/data/file1.tfrecord"</span>, <span class="string">"/var/data/file2.tfrecord"</span>]</span><br><span class="line">dataset = tf.data.TFRecordDataset(filenames)</span><br><span class="line">dataset = dataset.map(...)</span><br><span class="line">dataset = dataset.shuffle(buffer_size=<span class="number">10000</span>)</span><br><span class="line">dataset = dataset.batch(<span class="number">32</span>)</span><br><span class="line">dataset = dataset.repeat(num_epochs)</span><br><span class="line">iterator = dataset.make_one_shot_iterator()</span><br><span class="line"></span><br><span class="line">next_example, next_label = iterator.get_next()</span><br><span class="line">loss = model_function(next_example, next_label)</span><br><span class="line"></span><br><span class="line">training_op = tf.train.AdagradOptimizer(...).minimize(loss)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.train.MonitoredTrainingSession(...) <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> sess.should_stop():</span><br><span class="line">        sess.run(training_op)</span><br></pre></td></tr></table></figure><p>为了在一个<code>tf.estimator.Estimator</code>的<strong>input_fn</strong>中使用<strong>Dataset</strong>，我们也推荐使用<code>Dataset. make_one_shot_iterator()</code>，举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dataset_input_fn</span><span class="params">()</span>:</span></span><br><span class="line">    filenames = [<span class="string">"/var/data/file1.tfrecord"</span>, <span class="string">"/var/data/file2.tfrecord"</span>]</span><br><span class="line">    dataset = tf.data.TFRecordDataset(filenames)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use `tf.parse_single_example()` to extract data from a `tf.Example`</span></span><br><span class="line">    <span class="comment"># protocol buffer, and perform any additional per-record preprocessing.</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parser</span><span class="params">(record)</span>:</span></span><br><span class="line">        keys_to_features = &#123;</span><br><span class="line">          <span class="string">"image_data"</span>: tf.FixedLenFeature((), tf.string, default_value=<span class="string">""</span>),</span><br><span class="line">          <span class="string">"date_time"</span>: tf.FixedLenFeature((), tf.int64, default_value=<span class="string">""</span>),</span><br><span class="line">          <span class="string">"label"</span>: tf.FixedLenFeature((), tf.int64,</span><br><span class="line">                                    default_value=tf.zeros([], dtype=tf.int64)),</span><br><span class="line">      &#125;</span><br><span class="line">        parsed = tf.parse_single_example(record, keys_to_features)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Perform additional preprocessing on the parsed data.</span></span><br><span class="line">        image = tf.image.decode_jpeg(parsed[<span class="string">"image_data"</span>])</span><br><span class="line">        image = tf.reshape(image, [<span class="number">299</span>, <span class="number">299</span>, <span class="number">1</span>])</span><br><span class="line">        label = tf.cast(parsed[<span class="string">"label"</span>], tf.int32)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">"image_data"</span>: image, <span class="string">"date_time"</span>: parsed[<span class="string">"date_time"</span>]&#125;, label</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use `Dataset.map()` to build a pair of a feature dictionary and a label</span></span><br><span class="line">    <span class="comment"># tensor for each example.</span></span><br><span class="line">    dataset = dataset.map(parser)</span><br><span class="line">    dataset = dataset.shuffle(buffer_size=<span class="number">10000</span>)</span><br><span class="line">    dataset = dataset.batch(<span class="number">32</span>)</span><br><span class="line">    dataset = dataset.repeat(num_epochs)</span><br><span class="line">    iterator = dataset.make_one_shot_iterator()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># `features` is a dictionary in which each value is a batch of values for</span></span><br><span class="line">    <span class="comment"># that feature; `labels` is a batch of labels.</span></span><br><span class="line">    features, labels = iterator.get_next()</span><br><span class="line">    <span class="keyword">return</span> features, labels</span><br></pre></td></tr></table></figure><p>这次的tf.data API就讲到这里，本文章翻译自tensorflow官方网站，有一些是用自己的话描述出来，但是难免会有翻译不恰当，或者有误的地方，如果发现错误，可以直接发我邮箱或者加我qq</p><p>qq: 329804334</p><p>email: air@weaf.top</p><p>参考文献：</p><blockquote><p>https://www.tensorflow.org/guide/datasets</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;大家好，本周给大家讲解tensorflow的data模块的详细信息，主要涉及到tf.data.Dataset对象的一些操作，和tf.data.Iterator以及后续使用tf.data
        
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/categories/TensorFlow/"/>
    
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow模型保存、加载与转换详解</title>
    <link href="http://weafteam.github.io/posts/729c646d/"/>
    <id>http://weafteam.github.io/posts/729c646d/</id>
    <published>2018-08-28T01:27:11.000Z</published>
    <updated>2018-09-05T11:10:56.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tensorflow模型加载与转换详解">TensorFlow模型加载与转换详解</h1><h5 id="本次讲解主要涉及到tensorflow框架训练时候模型文件的管理以及转换">本次讲解主要涉及到TensorFlow框架训练时候模型文件的管理以及转换。</h5><ol type="1"><li>首先我们需要明确TensorFlow模型文件的存储格式以及文件个数：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">model_folder:</span><br><span class="line">------checkpoint</span><br><span class="line">------model.meta</span><br><span class="line">------model.data-00000-of-00001</span><br><span class="line">------model.index</span><br><span class="line">以上是模型文件夹里面存在的所有文件：</span><br><span class="line">checkpoint文件是存储所有模型文件的名字，在使用tf.train.latest_checkpoint()的时候，该函数会借助此文件内容获取最新模型文件。</span><br><span class="line">model.meta文件是图的基本架构，pb格式文件，里面包含变量，操作，集合等数据。</span><br><span class="line">model.data-00000-of-00001文件和model.index文件就是ckpt文件，里面的内容存储的就是权重、偏置等内容。在TensorFlow0.11之前，使用ckpt一个后缀文件存储，以后的TensorFlow版本都是使用这两个文件共同存储模型参数。</span><br></pre></td></tr></table></figure><p>明确了这一点以后，我们就开始创建计算图，也就是网络结构已经内部的运算。</p><ol start="2" type="1"><li>网络的搭建，为了简单起见，我们搭建的网络就比较简单：input layer,conv_1,conv_2,fc1,dropout,fc2(输出层),具体搭建代码如下：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">network</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># define the placeholder by using feed the data</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'input_placeholder'</span>):</span><br><span class="line">        x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">784</span>], <span class="string">'x'</span>)  <span class="comment"># 28*28=784 dim</span></span><br><span class="line">        x_input = tf.reshape(x, [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>], <span class="string">'x_reshape'</span>)  <span class="comment"># reshape for conv, -1表示不固定数量，1为通道数</span></span><br><span class="line">        y_label = tf.placeholder(tf.float32, [<span class="keyword">None</span>, FLAGS.classes], <span class="string">'y_label'</span>)  <span class="comment"># label - 10 dim</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># define convolution layer1</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'conv_layer1'</span>):</span><br><span class="line">        W_conv1 = weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">32</span>], name=<span class="string">'w_conv_1'</span>)  <span class="comment"># Weight in:1  out:32</span></span><br><span class="line">        b_conv1 = bias_variable([<span class="number">32</span>], name=<span class="string">'b_conv_1'</span>)  <span class="comment"># bias</span></span><br><span class="line">        h_relu1 = tf.nn.relu(conv2d(x_input, W_conv1) + b_conv1, name=<span class="string">'relu_1'</span>)  <span class="comment"># relu</span></span><br><span class="line">        h_pool1 = max_pool_2(h_relu1, name=<span class="string">'pool_1'</span>)  <span class="comment"># pool after relu1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># define convolution layer2</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'conv_layer2'</span>):</span><br><span class="line">        W_conv2 = weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">64</span>], name=<span class="string">'w_conv_2'</span>)  <span class="comment"># Weight in:32  out:64</span></span><br><span class="line">        b_conv2 = bias_variable([<span class="number">64</span>], name=<span class="string">'b_conv_2'</span>)  <span class="comment"># bias for 64 kernel</span></span><br><span class="line">        h_relu2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2, name=<span class="string">'relu_2'</span>)  <span class="comment"># relu</span></span><br><span class="line">        h_pool2 = max_pool_2(h_relu2, name=<span class="string">'pool_2'</span>)  <span class="comment"># pool after relu2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># define the first FC layer</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'fc1'</span>):</span><br><span class="line">        W_fc1 = weight_variable([<span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>, <span class="number">1024</span>], name=<span class="string">'w_fc1'</span>)  <span class="comment"># Weight in:7*7res*64  out:1024</span></span><br><span class="line">        b_fc1 = bias_variable([<span class="number">1024</span>], name=<span class="string">'b_fc1'</span>)  <span class="comment"># bias for 1024</span></span><br><span class="line">        h_pool2_flat = tf.reshape(h_pool2, [<span class="number">-1</span>, <span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>], name=<span class="string">'pool1'</span>)</span><br><span class="line">        h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1, name=<span class="string">'relu1'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># adding the dropout, in order to restrain overfitting</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'drop_out'</span>):</span><br><span class="line">        keep_prob = tf.placeholder(tf.float32, name=<span class="string">'drop_out_placeholder'</span>)</span><br><span class="line">        drop_fc1 = tf.nn.dropout(h_fc1, keep_prob, name=<span class="string">'drop_out_fc'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># define the second FC layer, by using softmax</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'fc2'</span>):</span><br><span class="line">        W_fc2 = weight_variable([<span class="number">1024</span>, FLAGS.classes], name=<span class="string">'w_fc2'</span>)  <span class="comment"># Weight in:1024  out:10</span></span><br><span class="line">        b_fc2 = bias_variable([FLAGS.classes], name=<span class="string">'b_fc2'</span>)  <span class="comment"># bias for 10, 10类划分</span></span><br><span class="line">        y = tf.nn.softmax(tf.matmul(drop_fc1, W_fc2) + b_fc2, name=<span class="string">'y_out'</span>)  <span class="comment"># 计算结果</span></span><br><span class="line"></span><br><span class="line">    global_step = tf.Variable(<span class="number">0</span>, trainable=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># define the loss</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'loss'</span>):</span><br><span class="line">        cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_label * tf.log(y), reduction_indices=[<span class="number">1</span>]), name=<span class="string">'cross_entropy'</span>)</span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'train_op'</span>):</span><br><span class="line">        train_step = tf.train.AdamOptimizer(FLAGS.lr).minimize(cross_entropy,</span><br><span class="line">                                                               global_step=global_step,</span><br><span class="line">                                                               name=<span class="string">'train_operation'</span>)  <span class="comment"># Adam 替代SGD</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># define the accuracy</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'accuracy'</span>):</span><br><span class="line">        correct_pred = tf.equal(tf.argmax(y, <span class="number">1</span>), tf.argmax(y_label, <span class="number">1</span>), name=<span class="string">'condition'</span>)</span><br><span class="line">        accuracy = tf.reduce_mean(tf.cast(correct_pred, tf.float32), name=<span class="string">'accuracy'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x, y, keep_prob, y_label, train_step, accuracy, global_step</span><br></pre></td></tr></table></figure><p>以上需要注意的地方是，我在每一层中都加入了name_scope，这样的好处就是可以更清楚的分清层与层之间的关系，以及对于后续我们直接通过tensor name来获取变量，而无须创建计算图架构做准备。</p><ol start="3" type="1"><li>数据加载以及开始训练</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据加载</span></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data/"</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># 将数据全部加载在mnist中，供后需训练和测试使用</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模型训练，也可以看到模型保存的类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the sign which save the meta graph, just once.</span></span><br><span class="line">    a = <span class="keyword">False</span></span><br><span class="line">    x, y, keep_prob, y_label, train_step, accuracy, global_step = network()</span><br><span class="line"></span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    saver = tf.train.Saver(max_to_keep=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> FLAGS.use_model:</span><br><span class="line">        model_t = tf.train.latest_checkpoint(FLAGS.model_path)</span><br><span class="line">        saver.restore(sess, model_t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(FLAGS.max_iter_step):</span><br><span class="line">        batch = mnist.train.next_batch(FLAGS.batch_size)  <span class="comment"># 每50个一个batch</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># eval执行过程－训练精度</span></span><br><span class="line">            train_accuracy = sess.run(accuracy, feed_dict=&#123;x: batch[<span class="number">0</span>], y_label: batch[<span class="number">1</span>], keep_prob: <span class="number">1.0</span>&#125;)</span><br><span class="line">            print(<span class="string">"step &#123;step&#125;, training accuracy &#123;acc&#125;"</span>.format(step=i, acc=train_accuracy))</span><br><span class="line">            <span class="keyword">if</span> (train_accuracy &gt; <span class="number">0.5</span>):</span><br><span class="line">                <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">                    saver.export_meta_graph(FLAGS.model_path + FLAGS.meta_graph_name)</span><br><span class="line">                    a = <span class="keyword">True</span></span><br><span class="line">                saver.save(sess, FLAGS.model_path + FLAGS.model_name, global_step=global_step, write_meta_graph=<span class="keyword">False</span>)</span><br><span class="line">        sess.run(train_step, feed_dict=&#123;x: batch[<span class="number">0</span>], y_label: batch[<span class="number">1</span>], keep_prob: FLAGS.keep_drop&#125;)</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>那么怎么构建模型保存呢？</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先，创建Saver对象</span></span><br><span class="line">saver = tf.train.Saver(max_to_keep=<span class="number">3</span>) <span class="comment"># 这里设置的模型文件最大保存个数是三个，也就是说checkpoint文件中始终有三个版本的模型文件</span></span><br><span class="line"><span class="comment"># 第二步，那就是根据不同的迭代或者epoch，你可以随心所欲的保存模型。</span></span><br><span class="line"><span class="comment"># 我这里处理的逻辑就是每训练一百次，然后train_accuracy的大小大于0.5，那么我就开始存储。</span></span><br><span class="line"><span class="comment"># 这里需要注意一点，那就是在保存模型文件的时候，完全没有必要每次都保存meta，所以，可以单独在第一次保存meta，因为meta是graph，所以后续训练不会对meta起作用，所以减少开销。</span></span><br><span class="line">saver.export_meta_graph(FLAGS.model_path + FLAGS.meta_graph_accuracy)</span><br><span class="line"><span class="comment"># 上面的代码只是在第一次保存模型的时候执行</span></span><br><span class="line">saver.save(sess, FLAGS.model_path + FLAGS.model_name, global_step=global_step, write_meta_graph=<span class="keyword">False</span>)</span><br><span class="line"><span class="comment"># 上面的代码每次都执行，但是不会保存meta数据，在一般的保存模型的时候，write_meta_graph标志位是True</span></span><br></pre></td></tr></table></figure><ol start="5" type="1"><li>好，那么我们训练完成以后，模型文件已经有了，那么我们该如何导入刚才的模型文件执行测试呢？</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> FLAGS.use_model:</span><br><span class="line">        <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">            saver = tf.train.import_meta_graph(FLAGS.model_path + FLAGS.meta_graph_name)</span><br><span class="line">            saver.restore(sess, tf.train.latest_checkpoint(FLAGS.model_path))</span><br><span class="line"></span><br><span class="line">            graph = tf.get_default_graph()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment"># one operation possibly have many outputs, so you need specify the which output, such as "name:0"</span></span><br><span class="line">            x = graph.get_tensor_by_name(<span class="string">"input_placeholder/x:0"</span>)</span><br><span class="line">            y_label = graph.get_tensor_by_name(<span class="string">"input_placeholder/y_label:0"</span>)</span><br><span class="line">            keep_prob = graph.get_tensor_by_name(<span class="string">"drop_out/drop_out_placeholder:0"</span>)</span><br><span class="line">            accuracy = graph.get_tensor_by_name(<span class="string">"accuracy/accuracy:0"</span>)</span><br><span class="line"></span><br><span class="line">            feed_dict = &#123;x: mnist.test.images,</span><br><span class="line">                         y_label: mnist.test.labels,</span><br><span class="line">                         keep_prob: <span class="number">1.0</span>&#125;</span><br><span class="line"></span><br><span class="line">            acc = sess.run(accuracy, feed_dict=feed_dict)</span><br><span class="line">            print(<span class="string">"test accuracy &#123;acc:.4f&#125;"</span>.format(acc=acc))</span><br></pre></td></tr></table></figure><p>上面的代码：</p><p>首先判断是否使用模型文件，</p><p>然后打开会话，在这里注意，我并没有创建网络结构，也就是说，在TensorFLow默认的图中是不存在我的计算图结构的。</p><p>然后我们使用tf.train.import_meta_graph()方法将模型图，也就是meta文件导入给saver</p><p>然后使用saver的restore方法将模型文件导入</p><p>然后使用tf.get_default_graph()方法获取TensorFlow默认的计算图（这回会获取到那个我们保存的计算图）</p><p>因为，我们没有定义网络结构中的变量，所以我们无法得到具体的网络执行变量，所以我们需要借助graph.get_tensor_by_name()方法来实现计算图变量的获取。</p><p>然后通过sess.run()方法来运行想要的tenosr值</p><p>（上面的代码中需要注意的是get_tensor_by_name的名字组成：（name_scope）/(tensor_name):第几个值）因为我们的运算是建立在tensor上的，但是每次运行的结果都是通过operation来实现的，也就是说，后面的那个index就是我们的第几个operation所要取的值。</p><ol start="6" type="1"><li>好，这里把模型文件的特殊保存和加载都讲完了，所以需要转换成pb文件，因为在后续我们使用TensorRT部署TensorFLow模型文件的时候，是需要pb文件，然后将pb文件转换为uff文件或者onnx文件来实现TenorRT网络的构建。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_pb_file</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> FLAGS.use_model:</span><br><span class="line">        saver = tf.train.import_meta_graph(FLAGS.model_path + FLAGS.meta_graph_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        model_t = tf.train.latest_checkpoint(FLAGS.model_path)</span><br><span class="line">        saver.restore(sess, model_t)</span><br><span class="line"></span><br><span class="line">        graphdef = tf.get_default_graph().as_graph_def()</span><br><span class="line"></span><br><span class="line">        frozen_graph = tf.graph_util.convert_variables_to_constants(sess, graphdef, [<span class="string">'fc2/y_out'</span>]) <span class="comment"># 这个地方需要注意，是最后一个输出节点的tenosr名字</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tf.graph_util.remove_training_nodes(frozen_graph)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">graph_def = save_pb_file()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> graph_def <span class="keyword">is</span> <span class="keyword">False</span>:</span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">"The meta graph do not exist!!!"</span>)</span><br><span class="line"></span><br><span class="line">    output_file = <span class="string">'./graph.pb'</span></span><br><span class="line">    <span class="keyword">with</span> tf.gfile.GFile(name = output_file, mode = <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        s = graph_def.SerializeToString()</span><br><span class="line">        f.write(s)</span><br></pre></td></tr></table></figure><p>首先也是加载图，然后加载权重参数文件，然后将graph作为一个graphdef返回，然后通过tf.graph_util.convert_variables_to_constants将参数文件转换为常量，最后，使用tf.graph_util.remove_training_nodes(frozen_graph)将在训练阶段才使用的变量去除，也就是一些gradients。</p><p>返回去除训练阶段的节点，然后通过tf.gfile.GFile写入到指定文件。</p><ol start="7" type="1"><li>整体的代码：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2018/4/24 20:08</span></span><br><span class="line"><span class="comment"># @Author  : milittle</span></span><br><span class="line"><span class="comment"># @Site    : www.weaf.top</span></span><br><span class="line"><span class="comment"># @File    : model.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line"><span class="keyword">import</span> dataset</span><br><span class="line"></span><br><span class="line">ops.reset_default_graph()</span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line">FLAGS = tf.app.flags.FLAGS</span><br><span class="line">tf.app.flags.DEFINE_integer(<span class="string">'max_iter_step'</span>, <span class="number">1000</span>, <span class="string">'define iteration times'</span>)</span><br><span class="line">tf.app.flags.DEFINE_integer(<span class="string">'batch_size'</span>, <span class="number">128</span>, <span class="string">'define batch size'</span>)</span><br><span class="line">tf.app.flags.DEFINE_integer(<span class="string">'classes'</span>, <span class="number">10</span>, <span class="string">'define classes'</span>)</span><br><span class="line">tf.app.flags.DEFINE_float(<span class="string">'keep_drop'</span>, <span class="number">0.5</span>, <span class="string">'define keep dropout'</span>)</span><br><span class="line">tf.app.flags.DEFINE_float(<span class="string">'lr'</span>, <span class="number">0.001</span>, <span class="string">'define learning rate'</span>)</span><br><span class="line">tf.app.flags.DEFINE_string(<span class="string">'model_path'</span>, <span class="string">'model\\'</span>,<span class="string">'define model path'</span>)</span><br><span class="line">tf.app.flags.DEFINE_string(<span class="string">'model_name'</span>, <span class="string">'model.ckpt'</span>, <span class="string">'define model name'</span>)</span><br><span class="line">tf.app.flags.DEFINE_string(<span class="string">'meta_graph_name'</span>, <span class="string">'model.meta'</span>, <span class="string">'define model name'</span>)</span><br><span class="line">tf.app.flags.DEFINE_bool(<span class="string">'use_model'</span>, <span class="keyword">False</span>, <span class="string">'define use_model sign'</span>)</span><br><span class="line">tf.app.flags.DEFINE_bool(<span class="string">'is_train'</span>, <span class="keyword">True</span>, <span class="string">'define train sign'</span>)</span><br><span class="line">tf.app.flags.DEFINE_bool(<span class="string">'is_test'</span>, <span class="keyword">False</span>, <span class="string">'define train sign'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data/"</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># mnist_train = dataset.train("MNIST_data/")</span></span><br><span class="line"><span class="comment"># mnist_test = dataset.train("MNIST_data/")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># define W &amp; b</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span><span class="params">(para, name)</span>:</span></span><br><span class="line">    <span class="comment"># 采用截断的正态分布，标准差stddev＝0.1</span></span><br><span class="line">    initial = tf.truncated_normal(para,stddev=<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_variable</span><span class="params">(para, name)</span>:</span></span><br><span class="line">    initial = tf.constant(<span class="number">0.1</span>, shape=para)</span><br><span class="line">    <span class="keyword">return</span> tf.Variable(initial, name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># define conv &amp; pooling</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv2d</span><span class="params">(x,W)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.conv2d( x,W,strides=[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],padding=<span class="string">'SAME'</span> )</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">max_pool_2</span><span class="params">(x, name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(x,ksize=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],strides=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>],padding=<span class="string">'SAME'</span>, name=name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">network</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># define the placeholder by using feed the data</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'input_placeholder'</span>):</span><br><span class="line">        x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">784</span>], <span class="string">'x'</span>)  <span class="comment"># 28*28=784 dim</span></span><br><span class="line">        x_input = tf.reshape(x, [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>], <span class="string">'x_reshape'</span>)  <span class="comment"># reshape for conv, -1表示不固定数量，1为通道数</span></span><br><span class="line">        y_label = tf.placeholder(tf.float32, [<span class="keyword">None</span>, FLAGS.classes], <span class="string">'y_label'</span>)  <span class="comment"># label - 10 dim</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># define convolution layer1</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'conv_layer1'</span>):</span><br><span class="line">        W_conv1 = weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">32</span>], name=<span class="string">'w_conv_1'</span>)  <span class="comment"># Weight in:1  out:32</span></span><br><span class="line">        b_conv1 = bias_variable([<span class="number">32</span>], name=<span class="string">'b_conv_1'</span>)  <span class="comment"># bias</span></span><br><span class="line">        h_relu1 = tf.nn.relu(conv2d(x_input, W_conv1) + b_conv1, name=<span class="string">'relu_1'</span>)  <span class="comment"># relu</span></span><br><span class="line">        h_pool1 = max_pool_2(h_relu1, name=<span class="string">'pool_1'</span>)  <span class="comment"># pool after relu1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># define convolution layer2</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'conv_layer2'</span>):</span><br><span class="line">        W_conv2 = weight_variable([<span class="number">5</span>, <span class="number">5</span>, <span class="number">32</span>, <span class="number">64</span>], name=<span class="string">'w_conv_2'</span>)  <span class="comment"># Weight in:32  out:64</span></span><br><span class="line">        b_conv2 = bias_variable([<span class="number">64</span>], name=<span class="string">'b_conv_2'</span>)  <span class="comment"># bias for 64 kernel</span></span><br><span class="line">        h_relu2 = tf.nn.relu(conv2d(h_pool1, W_conv2) + b_conv2, name=<span class="string">'relu_2'</span>)  <span class="comment"># relu</span></span><br><span class="line">        h_pool2 = max_pool_2(h_relu2, name=<span class="string">'pool_2'</span>)  <span class="comment"># pool after relu2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># define the first FC layer</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'fc1'</span>):</span><br><span class="line">        W_fc1 = weight_variable([<span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>, <span class="number">1024</span>], name=<span class="string">'w_fc1'</span>)  <span class="comment"># Weight in:7*7res*64  out:1024</span></span><br><span class="line">        b_fc1 = bias_variable([<span class="number">1024</span>], name=<span class="string">'b_fc1'</span>)  <span class="comment"># bias for 1024</span></span><br><span class="line">        h_pool2_flat = tf.reshape(h_pool2, [<span class="number">-1</span>, <span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>], name=<span class="string">'pool1'</span>)</span><br><span class="line">        h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1, name=<span class="string">'relu1'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># adding the dropout, in order to restrain overfitting</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'drop_out'</span>):</span><br><span class="line">        keep_prob = tf.placeholder(tf.float32, name=<span class="string">'drop_out_placeholder'</span>)</span><br><span class="line">        drop_fc1 = tf.nn.dropout(h_fc1, keep_prob, name=<span class="string">'drop_out_fc'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># define the second FC layer, by using softmax</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'fc2'</span>):</span><br><span class="line">        W_fc2 = weight_variable([<span class="number">1024</span>, FLAGS.classes], name=<span class="string">'w_fc2'</span>)  <span class="comment"># Weight in:1024  out:10</span></span><br><span class="line">        b_fc2 = bias_variable([FLAGS.classes], name=<span class="string">'b_fc2'</span>)  <span class="comment"># bias for 10, 10类划分</span></span><br><span class="line">        y = tf.nn.softmax(tf.matmul(drop_fc1, W_fc2) + b_fc2, name=<span class="string">'y_out'</span>)  <span class="comment"># 计算结果</span></span><br><span class="line"></span><br><span class="line">    global_step = tf.Variable(<span class="number">0</span>, trainable=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># define the loss</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'loss'</span>):</span><br><span class="line">        cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_label * tf.log(y), reduction_indices=[<span class="number">1</span>]), name=<span class="string">'cross_entropy'</span>)</span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'train_op'</span>):</span><br><span class="line">        train_step = tf.train.AdamOptimizer(FLAGS.lr).minimize(cross_entropy,</span><br><span class="line">                                                               global_step=global_step,</span><br><span class="line">                                                               name=<span class="string">'train_operation'</span>)  <span class="comment"># Adam 替代SGD</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># define the accuracy</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'accuracy'</span>):</span><br><span class="line">        correct_pred = tf.equal(tf.argmax(y, <span class="number">1</span>), tf.argmax(y_label, <span class="number">1</span>), name=<span class="string">'condition'</span>)</span><br><span class="line">        accuracy = tf.reduce_mean(tf.cast(correct_pred, tf.float32), name=<span class="string">'accuracy'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x, y, keep_prob, y_label, train_step, accuracy, global_step</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># the sign which save the meta graph, just once.</span></span><br><span class="line">    a = <span class="keyword">False</span></span><br><span class="line">    x, y, keep_prob, y_label, train_step, accuracy, global_step = network()</span><br><span class="line"></span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    saver = tf.train.Saver(max_to_keep=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> FLAGS.use_model:</span><br><span class="line">        model_t = tf.train.latest_checkpoint(FLAGS.model_path)</span><br><span class="line">        saver.restore(sess, model_t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(FLAGS.max_iter_step):</span><br><span class="line">        batch = mnist.train.next_batch(FLAGS.batch_size)  <span class="comment"># 每50个一个batch</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># eval执行过程－训练精度</span></span><br><span class="line">            train_accuracy = sess.run(accuracy, feed_dict=&#123;x: batch[<span class="number">0</span>], y_label: batch[<span class="number">1</span>], keep_prob: <span class="number">1.0</span>&#125;)</span><br><span class="line">            print(<span class="string">"step &#123;step&#125;, training accuracy &#123;acc&#125;"</span>.format(step=i, acc=train_accuracy))</span><br><span class="line">            <span class="keyword">if</span> (train_accuracy &gt; <span class="number">0.5</span>):</span><br><span class="line">                <span class="keyword">if</span> a == <span class="number">0</span>:</span><br><span class="line">                    saver.export_meta_graph(FLAGS.model_path + FLAGS.meta_graph_name)</span><br><span class="line">                    a = <span class="keyword">True</span></span><br><span class="line">                saver.save(sess, FLAGS.model_path + FLAGS.model_name, global_step=global_step, write_meta_graph=<span class="keyword">False</span>)</span><br><span class="line">        sess.run(train_step, feed_dict=&#123;x: batch[<span class="number">0</span>], y_label: batch[<span class="number">1</span>], keep_prob: FLAGS.keep_drop&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> FLAGS.use_model:</span><br><span class="line">        <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">            saver = tf.train.import_meta_graph(FLAGS.model_path + FLAGS.meta_graph_name)</span><br><span class="line">            saver.restore(sess, tf.train.latest_checkpoint(FLAGS.model_path))</span><br><span class="line"></span><br><span class="line">            graph = tf.get_default_graph()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment"># one operation possibly have many outputs, so you need specify the which output, such as "name:0"</span></span><br><span class="line">            x = graph.get_tensor_by_name(<span class="string">"input_placeholder/x:0"</span>)</span><br><span class="line">            y_label = graph.get_tensor_by_name(<span class="string">"input_placeholder/y_label:0"</span>)</span><br><span class="line">            keep_prob = graph.get_tensor_by_name(<span class="string">"drop_out/drop_out_placeholder:0"</span>)</span><br><span class="line">            accuracy = graph.get_tensor_by_name(<span class="string">"accuracy/accuracy:0"</span>)</span><br><span class="line"></span><br><span class="line">            feed_dict = &#123;x: mnist.test.images,</span><br><span class="line">                         y_label: mnist.test.labels,</span><br><span class="line">                         keep_prob: <span class="number">1.0</span>&#125;</span><br><span class="line"></span><br><span class="line">            acc = sess.run(accuracy, feed_dict=feed_dict)</span><br><span class="line">            print(<span class="string">"test accuracy &#123;acc:.4f&#125;"</span>.format(acc=acc))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_pb_file</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> FLAGS.use_model:</span><br><span class="line">        saver = tf.train.import_meta_graph(FLAGS.model_path + FLAGS.meta_graph_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        model_t = tf.train.latest_checkpoint(FLAGS.model_path)</span><br><span class="line">        saver.restore(sess, model_t)</span><br><span class="line"></span><br><span class="line">        graphdef = tf.get_default_graph().as_graph_def()</span><br><span class="line"></span><br><span class="line">        frozen_graph = tf.graph_util.convert_variables_to_constants(sess, graphdef, [<span class="string">'fc2/y_out'</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tf.graph_util.remove_training_nodes(frozen_graph)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> FLAGS.is_train:</span><br><span class="line">        train()</span><br><span class="line">    <span class="keyword">elif</span> FLAGS.is_test:</span><br><span class="line">        test()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        graph_def = save_pb_file()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> graph_def <span class="keyword">is</span> <span class="keyword">False</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"The meta graph do not exist!!!"</span>)</span><br><span class="line"></span><br><span class="line">        output_file = <span class="string">'./graph.pb'</span></span><br><span class="line">        <span class="keyword">with</span> tf.gfile.GFile(name = output_file, mode = <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            s = graph_def.SerializeToString()</span><br><span class="line">            f.write(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        main()</span><br><span class="line">    <span class="keyword">except</span> (ValueError, IndexError) <span class="keyword">as</span> ve:</span><br><span class="line">        print(ve)</span><br></pre></td></tr></table></figure><p>今天的TensorFlow模型保存以及加载，以及将三个训练阶段使用的模型文件整合到一个pb文件中，这个pb文件不仅仅可以在构建TensorRT的网络中使用，也可以使用在部署TensorFlow serving中。整体的结构和存储过程就是这样。有什么问题，随时联系air@weaf.top。我一直都在。</p><p>如果你觉得我的内容对你有帮助，可以关注以下公众号，了解更多相关信息：</p><p><img src="https://s1.ax1x.com/2018/08/28/PLcufe.md.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;tensorflow模型加载与转换详解&quot;&gt;TensorFlow模型加载与转换详解&lt;/h1&gt;
&lt;h5
        
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/categories/TensorFlow/"/>
    
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>TensorRT-开发入门</title>
    <link href="http://weafteam.github.io/posts/e0818c8b/"/>
    <id>http://weafteam.github.io/posts/e0818c8b/</id>
    <published>2018-08-12T09:56:37.000Z</published>
    <updated>2018-08-28T03:35:00.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tensorrt-开发入门">TensorRT-开发入门</h1><h1 id="docker-for-ubuntu-16.04心路历程">Docker For Ubuntu 16.04（心路历程）</h1><h2 id="以及在ubuntu上docker中使用tensorrt的心路历程这也是我为以后像搭建出要给实实在在能用的深度学习应用而做的准备">以及在Ubuntu上Docker中使用TensorRT的心路历程，这也是我为以后像搭建出要给实实在在能用的深度学习应用而做的准备</h2><p>这篇记录在Ubuntu上安装Docker，并且安装nvidia-docker的心路历程，还有NGC（Nvidia GPU Cloud ）的里面的container的使用。（尤其是TensorRT container的一个使用）</p><h2 id="一在ubuntu上安装docker-ce">一、在Ubuntu上安装docker-ce</h2><p>这里的docker-ce是docker的社区版，因为社区版是不收费的，一般情况下已经够用了。先去官网，<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Docker For Ubuntu</a> 这里可以找到安装的教程，我这里使用deb文件安装。</p><ol type="1"><li><p>去（1）<a href="https://download.docker.com/linux/ubuntu/dists/" target="_blank" rel="noopener">ubuntu的docker deb文件</a>， 根据你的ubuntu的版本，查看Ubuntu版本命令， <code>cat /etc/issue</code> 会显示出ubuntu的版本号，根据版本号在这个网站上（2）<a href="https://blog.csdn.net/zhengmx100/article/details/78352773" target="_blank" rel="noopener">ubuntu版本号名字对应关系表</a>， 然后在（1）链接中找到自己系统的对应名字，点进去<code>名字/pool/stable/</code> 到了这一级目录，就到了选择主机位数的时候了，不清楚的小伙伴，使用<code>cat /proc/version</code> 命令查看，我的是amd64。（需要注意一点就是我的ubuntu的名字是xenial）。这里有一个小小的提示，在后面安装nvidia-docker2的时候，需要docker-ce 18.06的支持，所以大家在下载的时候，需要下载这个版本的。（一张图胜过千言万语，下面是deb文件展示，上面是路径，我下载的版本是红色箭头指向的那个版本）</p><p><img src="https://s1.ax1x.com/2018/08/12/PcyAWn.png" alt="1533028434101"></p></li><li><p>下面就开始安装了，安装之前需要废话两句，如果你的系统上已经有了docker怎么办，那要看你是通过apt还是apt-get安装的。命令如下：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看是否安装命令</span><br><span class="line">apt list --installed | grep docker</span><br><span class="line"><span class="meta">#</span> 或者</span><br><span class="line">apt-get list --installed | grep docker</span><br><span class="line"><span class="meta">#</span> 以上的两条命令可以查到安装信息，如果你的版本和这个系统的版本是冲突的，那么你可以通过卸载这个当前的版本，安装新的版本，但是前提是你有这个权利做这件事情，sudo权限，而且，你卸载了对其他用户不会造成影响的前提下，如果你卸载了，对其他用户产生影响，后果自负。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 1 开始安装，如果你是root用户，则不需要加下面的sudo，如果你的用户没有sudo权限，那么需要你让管理员安装，或者，让管理员把你加载sudo组里。</span><br><span class="line">sudo dpkg -i docker-ce_18.06.0_ce_3-0_ubuntu_amd64.deb</span><br><span class="line"><span class="meta">#</span> 2 安装结束以后，需要测试一下安装是否成功</span><br><span class="line">sudo docker run hello-world</span><br><span class="line"><span class="meta">#</span> 如果以上命令出现一些图2的信息，那么就是成功了</span><br></pre></td></tr></table></figure><p><img src="C:\Users\milittle\AppData\Local\Temp\1533029081395.png" alt="1533029081395"></p><p>图2</p><h2 id="二在ubuntu上安装nvidia-docker和使用ngc-container">二、在ubuntu上安装nvidia-docker和使用NGC container</h2><p>这里有一个大前提是，你的主机上已经安装过nvidia的驱动了，详细的过程请查看<a href="https://docs.nvidia.com/ngc/ngc-titan-setup-guide/index.html#installing-nvidia-driver" target="_blank" rel="noopener">安装nvidia driver</a>。</p><ol type="1"><li>安装nvidia-docker(这个步骤一定要在安装docker之后)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/gpkey | \</span><br><span class="line">sudo apt-key add -</span><br><span class="line"><span class="meta">#</span> 上面是一条命令</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/ubuntu16.04/amd64/nvidia-docker.list | \</span><br><span class="line">sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br><span class="line"><span class="meta">#</span> 上面是一条命令</span><br><span class="line"><span class="meta">#</span># 上面的两条命令都是将源挂载在本地</span><br><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get install -y nvidia-docker2 # 这是安装命令</span><br><span class="line">sudo usermod -aG docker $USER # 这一条是将用户添加到docker组中</span><br></pre></td></tr></table></figure><ol type="1"><li>然后去注册NGC<a href="https://docs.nvidia.com/ngc/ngc-getting-started-guide/index.html" target="_blank" rel="noopener">注册教程</a></li></ol><p>上面的教程已经很清楚了。（最主要的是生成那个api key）</p><p><img src="https://s1.ax1x.com/2018/08/12/PcyEzq.png" alt="1533044008307"></p><p>附一张注册以后的主页</p><p>这里面是所有的container</p><p>后面运行示例的时候会下载TensorRT的样例。</p><ol type="1"><li>本地安装NGC image（这是Docker的镜像文件，可以当作一个application），以及运行image为container</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sudo docker login nvcr.io</span><br><span class="line"><span class="meta">#</span>上面的命令是登录nvcr image服务器</span><br><span class="line">sudo docker run --runtime=nvidia --rm nvcr.io/nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04 nvidia-smi</span><br><span class="line"><span class="meta">#</span> 上面这条命令是运行cuda环境，后面的那个nvidia-smi是查看GPU信息的，相比大家都很熟悉。</span><br><span class="line"><span class="meta">#</span> 这就测试了docker的环境是否是可运行了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 下面是安装NGC 里面的那些image</span><br><span class="line"><span class="meta">#</span> 一下的示例是TensorRT的示例</span><br><span class="line">sudo docker pull nvcr.io/nvidia/tensorrt:18.07-py2</span><br><span class="line"><span class="meta">#</span> 上面的命令是将tensorrt的iamge文件下到本地，可能需要点时间。大约2.61G</span><br><span class="line"><span class="meta">#</span> 后面就是运行示例</span><br><span class="line">sudo nvidia-docker run -it --rm nvcr.io/nvidia/tensorrt:18.07-py2</span><br><span class="line"><span class="meta">#</span> 然后就会进入linux container，这里面已经含有tensorrt的示例了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 下面是tensorrt的示例运行。</span><br><span class="line"><span class="meta">#</span> c++ example示例运行</span><br><span class="line"><span class="meta">#</span> 图4所示</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> python example示例运行</span><br><span class="line"><span class="meta">#</span> 图5所示</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/08/12/PcykJs.png" alt="1533046538343"></p><p>图3</p><p><img src="https://s1.ax1x.com/2018/08/12/PcyeyV.png" alt="1533046802225"></p><p>图4</p><p><img src="https://s1.ax1x.com/2018/08/12/PcyFij.png" alt="1533047137981"></p><p>图5</p><h2 id="三到此我们就结束了可能有很多小伙伴说这些太简单了其实不简单这些内容是我花了一整天时间查各种文档最后简练的将这些东西整合到一起的如果大家有什么不明白的地方可以直接给我发邮件或者直接加我qq我或许可以解答你的疑惑">三、到此我们就结束了，可能有很多小伙伴说这些太简单了，其实不简单，这些内容是我花了一整天时间，查各种文档，最后简练的将这些东西整合到一起的。如果大家有什么不明白的地方，可以直接给我发邮件或者直接加我qq，我或许可以解答你的疑惑。</h2><p>qq：329804334</p><p>Email：air@weaf.top</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;tensorrt-开发入门&quot;&gt;TensorRT-开发入门&lt;/h1&gt;
&lt;h1 id=&quot;docker-for-ubuntu-16.04心路历程&quot;&gt;Docker For Ubuntu 16.04（心路历程）&lt;/h1&gt;
&lt;h2
        
      
    
    </summary>
    
      <category term="TensorRT" scheme="http://weafteam.github.io/categories/TensorRT/"/>
    
    
      <category term="TensorRT" scheme="http://weafteam.github.io/tags/TensorRT/"/>
    
  </entry>
  
  <entry>
    <title>Android 混淆</title>
    <link href="http://weafteam.github.io/posts/df5d12f4/"/>
    <id>http://weafteam.github.io/posts/df5d12f4/</id>
    <published>2018-08-10T18:04:44.000Z</published>
    <updated>2018-08-22T14:49:02.600Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一开启混淆">一：开启混淆</h4><p>Android studio中开启混淆很简单，找到build.gradle文件，设置minifyEnabled=true。如下：</p><pre><code>     buildTypes {        release {            minifyEnabled true            shrinkResources true               proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;        }    }</code></pre><p>shrinkResources设置为true可以在开启混淆后去掉无用的资源文件，减小应用的体积</p><h4 id="二配置混淆文件">二：配置混淆文件</h4><p>找到proguard-rules.pro文件，就可以开始我们的混淆规则了。 一些简单的规则需要我们了解下</p><pre><code># 代表行注释符- 表示一条规则的开始keep 保留 ：dont 不要 : dontwarn：表示不要提示警告ignore 忽略，例如ignorewarning：表示忽略警告# 不优化-dontoptimize# 代码循环优化次数，0-7，默认为5-optimizationpasses 5# 不做预校验-dontpreverify</code></pre><p>首先需要区分下 * 和 **；</p><pre><code>-keep class xxxx.info.**-keep class xxxx.info.*</code></pre><p>前者表示本包以及子包下的类名都保持，而后者表示本包不混淆，子包下的类名会被混淆。 当然这两者都是会混淆具体的方法名和变量的，所以你如果想要都保持，不被混淆处理的话，需要写成下面这种：</p><pre><code>-keep class xxxx.info.* {*;}</code></pre><p>另外我们还可以保留类中的某些部分不被混淆，如：</p><pre><code>-keep class xxxx.info.One {     public &lt;methods&gt;;}</code></pre><p>或许你觉得类名也不需要保留，那就不能使用keep了，这里还有几种别的，如</p><pre><code>-keepclassmembers 不保留包名 防止成员被移除或者被重命名-keepclasseswithmembers 保留类名和成员名</code></pre><h5 id="基本规则">1：基本规则</h5><p>一般情况下我们需要保存四大组件，自定义view不被混淆，因为 这些子类都有可能被外部调用。</p><pre><code>-keep public class * extends android.app.Activity-keep public class * extends android.app.Application-keep public class * extends android.support.multidex.MultiDexApplication-keep public class * extends android.app.Service-keep public class * extends android.content.BroadcastReceiver-keep public class * extends android.content.ContentProvider-keep public class * extends android.app.backup.BackupAgentHelper-keep public class * extends android.preference.Preference-keep public class * extends android.view.View-keep class android.support.** {*;}</code></pre><h5 id="反射">2：反射</h5><p>反射用到的类一般需要保留，否则会出现问题。 实体类不被混淆</p><pre><code> -keep class xxxx.info.Bean.** { *; }</code></pre><h5 id="枚举不能被混淆">3：枚举不能被混淆</h5><pre><code>-keepclassmembers enum * {    public static **[] values();    public static ** valueOf(java.lang.String);}</code></pre><h5 id="继承的保留">4：继承的保留</h5><pre><code>-keep public class * extends android.support.v4.**-keep public class * extends android.support.v7.**-keep public class * extends android.support.annotation.**-keep class * implements android.os.Parcelable {     public static final android.os.Parcelable$Creator *;}</code></pre><h5 id="jni-方法不可混淆">5：jni 方法不可混淆</h5><pre><code>-keepclasseswithmembernames class * {        native &lt;methods&gt;;</code></pre><p>}</p><h5 id="资源文件不被混淆">6： 资源文件不被混淆</h5><pre><code>-keep class **.R$* {    *;}-keepclassmembers class **.R$* {     public static &lt;fields&gt;;}</code></pre><h5 id="webview的一些处理">7：webview的一些处理</h5><pre><code>-keepclassmembers class fqcn.of.javascript.interface.for.Webview {      public *; } -keepclassmembers class * extends android.webkit.WebViewClient {  public void *(android.webkit.WebView, java.lang.String, android.graphics.Bitmap);  public boolean *(android.webkit.WebView, java.lang.String);}-keepclassmembers class * extends android.webkit.WebViewClient { public void *(android.webkit.WebView, jav.lang.String);}</code></pre><p>在app中与HTML5的JavaScript的交互进行特殊处理 我们需要确保这些js要调用的原生方法不能够被混淆，于是我们需要做如下处理：</p><pre><code>-keepclassmembers class com.ljd.example.JSInterface { &lt;methods&gt;; }   </code></pre><h5 id="其他的一些操作">8：其他的一些操作</h5><p>删除代码中Log相关的代码</p><pre><code>-assumenosideeffects class android.util.Log {    public static boolean isLoggable(java.lang.String, int);    public static int v(...); public static int i(...);    public static int w(...); public static int d(...);     public static int e(...);}</code></pre><p>保留测试相关的代码</p><pre><code> -dontnote junit.framework.** -dontnote junit.runner.** -dontwarn android.test.** -dontwarn android.support.test.** -dontwarn org.junit.**</code></pre><p>另外还有一些第三方的我这里就不贴出来了，接入时文档都会给出混淆策略。</p>]]></content>
    
    <summary type="html">
    
      Android 混淆
    
    </summary>
    
      <category term="ANDROID" scheme="http://weafteam.github.io/categories/ANDROID/"/>
    
    
      <category term="ANDROID" scheme="http://weafteam.github.io/tags/ANDROID/"/>
    
  </entry>
  
  <entry>
    <title>Python 类型系统的下一步</title>
    <link href="http://weafteam.github.io/posts/684b8f9/"/>
    <id>http://weafteam.github.io/posts/684b8f9/</id>
    <published>2018-08-10T17:35:33.000Z</published>
    <updated>2018-08-12T09:51:01.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面">写在前面</h2><p>本文翻译自 <a href="https://blog.daftcode.pl/next-steps-with-python-type-system-efc4df5251c9" target="_blank" rel="noopener">Next Steps with Python Type System</a>。</p><p>自豪的采用搜狗翻译。</p><p>这是 Python 类型系统的第二篇文章。这篇文章中，我将展示 Python 类型的一些更高级的特性。此外也会包括一些关于使用特定类型功能的提示，和一个如何将类型系统引入你的代码库中的简短指南。</p><h2 id="约束类型">1. 约束类型</h2><p>在上一篇博客文章中描述了 <code>Optional</code> 类型。让我们回到展示其用法的片段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Optional</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user_id</span><span class="params">()</span> -&gt; Optional[int]:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_user_id</span><span class="params">(user_id: int)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_id = get_user_id()</span><br><span class="line">process_user_id(user_id)  <span class="comment"># 错误:</span></span><br><span class="line"><span class="comment"># Argument 1 to "process_user_id" has incompatible type "Optional[int]"; expected "int"</span></span><br></pre></td></tr></table></figure><p>mypy 类型检查器报告的错误确实是正确和有用的。但是如果你真的知道在当前上下文中 <code>get_user_id()</code> 会返回一个 <code>int</code>，而你只想把它传递给 <code>process_user_id()</code> 怎么办？首先，考虑一下你的程序结构是否不复杂，是否需要重构。你还想这么做吗？嗯，我们需要以某种方式通知mypy 类型已经改变了。在我们的例子中，这种变化实际上是限制性的：从 <code>Optional[int]</code> （即 <code>Union[int, None]</code>）到 <code>int</code>。首先，让我们尝试最显而易见的方法来实现它。</p><h3 id="具有新的类型注解的类型约束-不正确">1.1 具有新的类型注解的类型约束 [不正确]</h3><p>最简单的方法似乎是用更严格的类型注解变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user_id: int = get_user_id()  <span class="comment"># 错误:</span></span><br><span class="line"><span class="comment"># Incompatible types in assignment (expression has type "Optional[int]",</span></span><br><span class="line"><span class="comment">#   variable has type "int")</span></span><br><span class="line"></span><br><span class="line">process_user_id(user_id)</span><br></pre></td></tr></table></figure><p>然而我们不能这样做。为什么？因为类型注解不会强制变量使用类型，它告知类型。如果有任何不一致，类型检查器会报告它。事实上，如果这种方法是正确的，整个类型检查思想就会崩溃。</p><p>类型检查思想会崩溃，特别是当一个新类型不是旧类型的子类型时（如 <code>int</code> 和 <code>str</code>）。我们可以想象一种假设的情况，在这种情况下，mypy 会接受类型约束（通过使用注解将类型从更一般的类型变为不太一般的类型）。在我们的例子中，它将会从 <code>Union[int, None]</code> 约束到 <code>int</code>。但是，目前它不受支持。</p><p>至少有两种正确的方法可以通知 mypy 类型检查器不同于预期的类型。</p><h3 id="具有类型检查的类型约束-正确">1.2 具有类型检查的类型约束 [正确]</h3><p>更改类型的正确方法是确保新类型的 <code>isinstance</code> 返回 <code>True</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">user_id = get_user_id()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isinstance(user_id, int):</span><br><span class="line">    process_user_id(user_id)  <span class="comment"># 没有错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="keyword">assert</span> isinstance(user_id, int)</span><br><span class="line">process_user_id(user_id)  <span class="comment"># 没有错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在我们的例子中可以</span></span><br><span class="line"><span class="keyword">if</span> user_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">    process_user_id(user_id)  <span class="comment"># 没有错误</span></span><br></pre></td></tr></table></figure><p>现在，mypy 确信 <code>user_id</code> 具有正确的类型——否则，将不会执行对 <code>process_user_id</code> 的调用。</p><p>请注意，使用 <code>isinstance</code> 会带来少量运行时开销。另外，我们还会得到额外的运行时检查，这可能会很有用。</p><h3 id="具有强制类型转换的类型约束-正确">1.3 具有强制类型转换的类型约束 [正确]</h3><p>告诉 mypy 该类型受到约束（或以其他方式更改）的另一个正确方法是使用 <code>cast</code> 函数。这在 <a href="https://www.python.org/dev/peps/pep-0484/#casts" target="_blank" rel="noopener">PEP 484</a> 中有明确描述。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> cast</span><br><span class="line"></span><br><span class="line">user_id = cast(int, get_user_id())</span><br><span class="line">process_user_id(user_id)  <span class="comment"># 没有错误</span></span><br></pre></td></tr></table></figure><p>正如我们所见，这个函数是在 <code>typing</code> 模块中定义的。类型系统不应对运行时产生任何影响，这个函数保持了这个承诺（除了空函数调用）——在 Python 的源代码中，它被定义为一个身份函数 （删除了 docstring）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cast</span><span class="params">(typ, val)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> val</span><br></pre></td></tr></table></figure><p>因此不执行运行时检查。当使用 <code>cast</code> 时，对于类型检查者来说，盲目相信这种新类型是一条命令。</p><p>请注意，使用 <code>cast</code> 可能会掩盖错误：前一种类型——可能是正确的——会被忽略。因此，在某种程度上，它的工作方式类似于 <code>Any</code> 和 <code>#type: ignore</code>（见下文），因此要小心使用。</p><h2 id="组合类型并定义类型别名">2. 组合类型并定义类型别名</h2><p>Python 的类型可以自由组合。想要一个整数、浮点数、字符串或 <code>None</code> 的列表吗？只需使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List[Union[int, float, str, <span class="keyword">None</span>]]</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List[Optional[Union[int, float, str]]]</span><br></pre></td></tr></table></figure><p>随便你。</p><p>由字符串组成的元组和由整数组成的元组列表以及由整数、字符串和字符串列表组成的元组列表怎么样？也很直白😅：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Tuple[str, List[Tuple[int, List[Tuple[int, str, List[str]]]]]]</span><br></pre></td></tr></table></figure><p>看起来很有趣！不是吗？事实上，我们有时会在程序中使用这些复杂的数据类型。如何将类型注解与它们一起使用，并且不要失去理智？</p><p>要使类型更易于管理和阅读，请使用类型别名。要创建别名，只需为变量分配一个类型：<code>alias = T</code>。现在我们可以使用 <code>alias</code> 代替 <code>T</code>。</p><p>这里的关键是正确命名别名。大多数情况下，创建反映命名类型结构的别名，如 <code>ListOfListsOfDictsFromStrToIntOrFloat</code>，并没有真正意义。要使用内部反映“业务对象”的名称。同样，相应地嵌套别名。像这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List, Tuple</span><br><span class="line"></span><br><span class="line">ItemId = int</span><br><span class="line">ItemName = str</span><br><span class="line">ItemTag = str</span><br><span class="line">ItemTags = List[ItemTag]</span><br><span class="line">Item = Tuple[ItemId, ItemName, ItemTags]</span><br><span class="line">Items = List[Item]</span><br><span class="line"></span><br><span class="line">OrderId = int</span><br><span class="line">Order = Tuple[OrderId, Items]</span><br><span class="line">Orders = List[Order]</span><br><span class="line"></span><br><span class="line">ShipmentId = str</span><br><span class="line">Shipment = Tuple[ShipmentId, Orders]</span><br></pre></td></tr></table></figure><p>使用 <code>NamedTuple</code> 来定义 <code>Item</code>、<code>Order</code> 和 <code>Shipment</code> 将会进一步提高我们代码的可读性。另外，在现实的代码中，我们可能会使用自定义类来代替。尽管如此，类型别名仍然是有用的。</p><p><code>Shipment</code> 看起来比 <code>Tuple[str, List[Tuple[int, List[Tuple[int, str, List[str]]]]]]</code> 好得多，不是吗？需要键入的字符也少得多。</p><p>现在，我们的代码可以用业务相关的类型注解，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_item_id</span><span class="params">()</span> -&gt; ItemId:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_item</span><span class="params">(name: ItemName, tags: ItemTags)</span> -&gt; Item:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_order</span><span class="params">(items: Items)</span> -&gt; Order:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_order</span><span class="params">(order: Order)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等等</span></span><br></pre></td></tr></table></figure><p>代码更清晰，业务逻辑明显。此外，类型注解和类型本身的错误更容易被发现。</p><h2 id="newtype-函数">3. NewType 函数</h2><p>在最后一节中，我们看到为一个简单的类型分配了别名，如 <code>ItemId = int</code>。即使是这个简单的别名也有意义，因为它表示这个特定整数的“意义”。尽管如此，它并不能保护我们免受以下错误的影响：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ItemId = int</span><br><span class="line">OrderId = int</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_last_item_id</span><span class="params">()</span> -&gt; ItemId:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_last_order_id</span><span class="params">()</span> -&gt; OrderId:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_order</span><span class="params">(id_: OrderId)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">order_id = get_last_item_id()</span><br><span class="line">order = get_order(order_id)  <span class="comment"># 没有错误</span></span><br></pre></td></tr></table></figure><p>mypy 很开心，IDE 很开心，我们也很开心。让我们祈祷进行代码审查的人会发现错误！</p><p>为了防止这种情况，我们可以额外定义直接从 <code>int</code> 继承的子类（子类型）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItemId</span><span class="params">(int)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderId</span><span class="params">(int)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_last_item_id</span><span class="params">()</span> -&gt; ItemId:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_last_order_id</span><span class="params">()</span> -&gt; OrderId:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_order</span><span class="params">(id_: OrderId)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">order_id = get_last_item_id()</span><br><span class="line">order = get_order(order_id)  <span class="comment"># 错误:</span></span><br><span class="line"><span class="comment"># Argument 1 to "get_order" has incompatible type "ItemId"; expected "OrderId"</span></span><br></pre></td></tr></table></figure><p>很好，错误被发现了。不幸的是，通过额外的构造函数传递值会带来运行时开销。当我们必须处理许多实例时，这尤其痛苦。为了解决这个问题，<code>typing</code> 模块具有 <code>NewType</code> 函数。它用于定义不同的子类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> NewType</span><br><span class="line"></span><br><span class="line">ItemId = NewType(<span class="string">"ItemId"</span>, int)</span><br><span class="line">OrderId = NewType(<span class="string">"OrderId"</span>, int)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_last_item_id</span><span class="params">()</span> -&gt; ItemId:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_last_order_id</span><span class="params">()</span> -&gt; OrderId:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_order</span><span class="params">(id_: OrderId)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">order_id = get_last_item_id()</span><br><span class="line">order = get_order(order_id)  <span class="comment"># 错误:</span></span><br><span class="line"><span class="comment"># Argument 1 to "get_order" has incompatible type "ItemId"; expected "OrderId"</span></span><br></pre></td></tr></table></figure><p><code>NewType</code> 只是返回一个身份函数，因此在运行时没有定义子类。此外，这只会带来最小的开销。请参见<a href="https://github.com/python/typing/blob/master/src/typing.py#L2210-L2234" target="_blank" rel="noopener">这里</a>的源代码。</p><p>使用用 <code>NewType</code> 定义的类型，我们可以在代码中添加额外的类型“跟踪”。这在安全环境中可能很方便——例如区分安全和（潜在的）不安全字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> NewType</span><br><span class="line"></span><br><span class="line">SafeStr = NewType(<span class="string">'SafeStr'</span>, str)</span><br><span class="line"></span><br><span class="line">safe_code = SafeStr(<span class="string">'2 + 2'</span>)</span><br><span class="line">user_provided_code = <span class="string">'import sys; sys.melt_cpu()'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exec_code</span><span class="params">(string: SafeStr)</span>:</span></span><br><span class="line">    exec(string)</span><br><span class="line"></span><br><span class="line">exec_code(safe_code)</span><br><span class="line">exec_code(user_provided_code)  <span class="comment"># 错误:</span></span><br><span class="line"><span class="comment"># Argument 1 to "exec_code" has incompatible type "str"; expected "SafeStr"</span></span><br></pre></td></tr></table></figure><p>请注意，获取 <code>user_provided_code</code> 的值可能离对 <code>exec_code</code> 的调用很远，因此如果没有 mypy 帮助，很难发现它是不安全的。</p><p>在运行时，通过 <code>NewType</code>——在我们的例子中是 <code>SafeStr('2 + 2')</code>（第 5 行）——传递值几乎没有开销，实际上没有任何变化。对 mypy 来说，它的工作方式就像 <code>cast(SafeStr, '2 + 2')</code>。</p><h2 id="可调用类型">4. 可调用类型</h2><p>到目前为止，我们定义了函数的参数类型和返回类型。但是，如果我们想将一个函数本身传递给另一个函数（在 Python 中，函数是第一类对象，所以可以这样做）怎么办——我们如何表达传递函数的类型？</p><p>让我们离题一会儿……在 Python 的类型系统中，函数的类型就像任何其他类型一样（记住：函数是第一类对象，就像整数或字符串一样）。起初这可能令人惊讶，但如果你仔细想想，这是很自然的。例如，这样注解的函数类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(arg: str)</span> -&gt; int:</span> ...</span><br></pre></td></tr></table></figure><p>可以被认为是“<code>str</code> 到 <code>int</code>”。事实上，函数的类型在某种程度上非常类似于 <code>Dict</code> 类型，它将一个值“映射”到另一个值；像 <code>Dict[str, int]</code> 将 <code>str</code> 映射到 <code>int</code>。从类型的角度来看，函数更复杂——可以没有、一个或多个参数，字典只有一个键。然而，映射的思想是一样的。</p><p>在 Python 中，描述函数类型（和其他可调用类型）时使用 <code>Callable</code> 类型。它的定义如下：</p><blockquote><p><code>Callable[[t1, t2, …, tn], tr]</code> 具有位置参数类型 <code>t1</code> 等的函数，返回类型 <code>tr</code>。[<a href="https://www.python.org/dev/peps/pep-0483/#fundamental-building-blocks" target="_blank" rel="noopener">来源</a>]</p></blockquote><p>让我们看看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Callable, List</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_function_on_value</span><span class="params">(func: Callable[[str], int], value: str)</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">return</span> func(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_length</span><span class="params">(text: str)</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">return</span> len(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result1 = apply_function_on_value(</span><br><span class="line">    func=text_length, value=<span class="string">"I know a dead parrot when I see one."</span></span><br><span class="line">)  <span class="comment"># 没有错误</span></span><br></pre></td></tr></table></figure><p><code>apply_function_on_value</code> 将一个函数 <code>func</code> 作为它第一个参数并将它应用于其第二个参数 <code>value</code>。这个函数的类型为“<code>str</code> 到 <code>int</code>”，或者 <code>Callable[[str], int]</code>。所以将 <code>text_length</code> 函数（它只是定义在字符串上的 <code>len</code> 函数）传递给它是正确的，因为 <code>func</code> 被定义为获取 <code>str</code> 并返回 <code>int</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append_parrot</span><span class="params">(text: str)</span> -&gt; str:</span></span><br><span class="line">    <span class="keyword">return</span> text + <span class="string">' Parrot!'</span></span><br><span class="line"></span><br><span class="line">result2 = apply_function_on_value(</span><br><span class="line">    func=append_parrot,</span><br><span class="line">    value=<span class="string">"Now that's what I call a dead parrot."</span>,</span><br><span class="line">)  <span class="comment"># 错误:</span></span><br><span class="line"><span class="comment"># Argument "func" to "apply_function_on_value" has incompatible type</span></span><br><span class="line"><span class="comment">#   "Callable[[str], str]"; expected "Callable[[str], int]"</span></span><br></pre></td></tr></table></figure><p><code>append_parrot</code> 无法正确传递给 <code>apply_function_on_value</code>，因为它与 <code>func</code> 类型不兼容：返回一个 <code>str</code>，而不是 <code>int</code>。</p><h2 id="any-类型与关闭-mypy-检查">5. Any 类型与关闭 mypy 检查</h2><p>Python 的类型规则非常严格，但是 Python 为你不想让 mypy 抱怨某个类型的情况提供了漏洞。这个漏洞是 <code>Any</code> 类型。<code>Any</code> 与每种类型都一致，每种类型都与 <code>Any</code> 一致。</p><blockquote><p>当一个值具有类型 <code>Any</code> 时，类型检查器将允许对其进行所有操作，并且类型 <code>Any</code> 的值可以分配给一个更受约束类型的变量（或者用作返回值）。[<a href="https://www.python.org/dev/peps/pep-0484/#the-any-type" target="_blank" rel="noopener">来源</a>]</p></blockquote><p>让我们证明一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Any</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查类型</span></span><br><span class="line">lassie: Dog</span><br><span class="line">anything1: Any</span><br><span class="line">lassie = anything1  <span class="comment"># 没有错误</span></span><br><span class="line"></span><br><span class="line">scooby: Dog</span><br><span class="line">anything2: Any</span><br><span class="line">anything2 = scooby  <span class="comment"># 没有错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查属性</span></span><br><span class="line">anything3: Any</span><br><span class="line">anything3.enter_hiperspace()  <span class="comment"># 没有错误</span></span><br></pre></td></tr></table></figure><p>正如文档所述：</p><blockquote><p><code>Any</code> 可以被认为是具有所有值和所有方法的类型。结合上面的子类型定义，这将 <code>Any</code> 部分的放在类型层次结构的顶部（它有所有值）和底部（它有所有方法）。<a href="https://www.python.org/dev/peps/pep-0483/#summary-of-gradual-typing" target="_blank" rel="noopener">来源</a></p></blockquote><p>可以这样表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">                      Any                     &lt;- 所有类型都是 Any</span><br><span class="line">                      / \                        (就像 `object`</span><br><span class="line">                     /*  \*                       -- 所有对象都是 `object`)</span><br><span class="line">                    /     \</span><br><span class="line">            SomeType1     SomeType2</span><br><span class="line">           /       |       |       \</span><br><span class="line">          /        |       |        \</span><br><span class="line">         /         |       |         \</span><br><span class="line"> Subtype1_1  Subtype1_2  Subtype2_1  Subtype2_2</span><br><span class="line">     |          |           |           |</span><br><span class="line">     |*         |*          |*          |*</span><br><span class="line">     |          |           |           |</span><br><span class="line">    Any        Any         Any         Any       &lt;- Any 有所有属性</span><br><span class="line">                                                     (不像 `object`</span><br><span class="line">                                                      -- `object` 没有属性)</span><br><span class="line">* 一致性关系，不是子类型，见下文</span><br></pre></td></tr></table></figure><p>请注意，严格来说，<code>Any</code> 类型和其他类型之间的关系不是微妙的关系，而是保持一致的关系。有关正式定义和更多上下文，请参见<a href="https://www.python.org/dev/peps/pep-0483/#summary-of-gradual-typing" target="_blank" rel="noopener">这里</a>。</p><p>实际上，<code>Any</code> 只是关闭它正在注解的项目的 mypy 检查。禁用 mypy 检查的另一种更残酷的方法是使用 <code># type: ignore</code>。在你想让 mypy 错误消失的行上使用它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">height: int</span><br><span class="line">height = <span class="string">'25'</span>  <span class="comment"># type: ignore</span></span><br><span class="line"><span class="comment"># 没有错误</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span> <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">lassie: Dog</span><br><span class="line">lassie.fly()  <span class="comment"># type: ignore</span></span><br><span class="line"><span class="comment"># 没有错误</span></span><br></pre></td></tr></table></figure><p><code>Any</code> 的使用应该尽可能少，而使用 <code># type: ignore</code> 应该是最后一招。尤其是当你认真对待整个类型工作的时候。</p><p>你绝对不应该在下列情况下使用它们：</p><ul><li>你想推迟注解一些东西。如果你现在不想添加一个类型，就让这个东西没有类型。Python 类型系统是完全可选的——您可以自由注解代码的一部分，而不注解另一部分。</li><li>你不理解 mypy 的错误信息，只想摆脱它。有时候它可能是太神秘或者太普通了，但是真的值得深入研究这个问题。在我的经验中，几乎每次 mypy 都发现了什么。</li></ul><p><code>Any</code> 在哪可能有用？</p><ul><li>当你真的不知道变量的类型时，使用 <code>Any</code>。典型的例子是从外部提供的 JSON 创建的数据。这样创建的变量的类型是什么？它是一个 <code>list</code>，<code>dict</code>，<code>int</code>，<code>float</code>，<code>bool</code> 还是 <code>None</code>？也可以是 <code>Any</code>。请注意，使用嵌套类型（<code>Dict</code>、<code>List</code> 等）正确定义 JSON 格式是不可能的（或者至少非常困难），因为 <a href="https://www.json.org/" target="_blank" rel="noopener">JSON 的递归结构</a>。</li></ul><p><code># type: ignore</code> 在哪可能有用？</p><ul><li>当 mypy 不知道发生了什么。例如，运行时发生了一些变化——就像方法被动态添加到类中或者类层次结构发生了变化。如果 mypy 的错误真的不太胜任，并且你无法想出另一种方法来处理这个问题，使用 <code># type: ignore</code> 。但是首先，试着理解为什么 mypy 在抱怨。事实上，mypy 是一个非常好的坏味道代码检测器。</li><li>当某些东西还不兼容 mypy 时（比如 <a href="https://docs.python.org/3.6/library/enum.html" target="_blank" rel="noopener">enums</a>，一开始不支持）。</li><li>mypy 中有 bug。记得在 <a href="https://github.com/python/mypy/issues" target="_blank" rel="noopener">github</a> 上提出这件事！</li></ul><h2 id="qa">Q&amp;A</h2><p>如果你还不能被说服开始使用 Python 类型系统，请继续阅读。</p><h3 id="我喜欢我的-python-代码具有动态性和鸭子类型类型会毁了这一切是吗">我喜欢我的 Python 代码具有动态性和鸭子类型。类型会毁了这一切。是吗？</h3><p>首先，mypy 确实不会理解一些与语言的动态特性相关的运行时黑科技。然而，作为回报，你会得到更可靠的代码。</p><p>其次，Python 类型系统<a href="https://www.python.org/dev/peps/pep-0544/" target="_blank" rel="noopener">支持协议</a>（也称为“鸭子类型”），既支持内置协议，也支持用户定义的协议 （本主题不在此讨论）。所以不用担心。</p><h3 id="坦白地说我不喜欢这整件类型系统的事情是不是慢慢地将-python-变成了-java">坦白地说，我不喜欢这整件类型系统的事情。是不是慢慢地将 Python 变成了 Java？</h3><p>不要担心，与 Java 不同，Python 的类型系统：</p><ul><li>完全可选（*），</li><li>不会影响运行时（**）。</li></ul><p>（*）好吧，不完全是，<code>dataclasses</code> <a href="https://docs.python.org/3/library/dataclasses.html" target="_blank" rel="noopener">强迫你使用类型</a>。希望这是一个异端。</p><p>（**）好吧，不完全是…… 首先，从 <code>typing</code> 中导入会影响。其次，一些值——例如 <code>cast</code> 和 <code>NewType</code> ——通过身份函数传递。第三，<a href="https://docs.python.org/3/library/typing.html#typing.Generic" target="_blank" rel="noopener">泛型类型</a>（本文中未涵盖）使用自定义元类，这可能与用户定义的元类冲突；<a href="https://www.python.org/dev/peps/pep-0560/" target="_blank" rel="noopener">在 Python 3.7 中，这不再是一个问题</a>。</p><h3 id="没错但是看看类型化的-python-代码更像-java而不是好的老-python">没错，但是看看类型化的 Python 代码：更像 Java，而不是好的老 Python。</h3><p>这可能是第一印象，但是你真的看过企业 Java 代码库吗？我不否认类型化的 Python 代码看起来与非类型化代码不同，你需要习惯阅读它。但是当你这样做的时候——并且代码本身是以一种聪明的方式具有类型的（例如，通过使用别名）——它会变得比添加类型之前更加易读易懂。它仍然是 Pythonic 的，因为它增加了代码的清晰性和可读性。</p><h3 id="好吧让我试试这个-我如何开始在代码库中使用类型注解">好吧，让我试试这个… 我如何开始在代码库中使用类型注解？</h3><p>我推荐以下步骤：</p><ol type="1"><li>从在你的非类型化代码上运行 mypy 开始，看看会发生什么。你可能会惊讶于它已经理解了这么多。（您可能希望首先使用 <code>--ignore-missing-imports</code> 和 <code>--follow-imports skip</code> 参数来运行它。）</li><li>修复所有初始的 mypy 错误。</li><li>现在，只需开始向代码中添加类型注解。你可以从任何地方开始，但是我认为最好从最重要的代码开始。这样，你的代码库将会更可靠。不要担心错误的类型注解会破坏你的代码：类型会尽可能少地影响 Python 的运行时。</li><li>继续添加类型注解。过了一段时间，添加类型注解将开始见效。你可能会收到越来越多的捕捉到真正错误的 mypy 错误。（只是不要忘记运行 mypy。）</li><li>下一步是将 mypy 检查添加到 CI 流程（也许是预提交钩子）中，并使代码始终更加可靠。</li></ol><p>一般来说，如果你致力于类型，最好注解所有新代码。另一种方法是，当您只想快速原型化功能时，跳过注解阶段。当你知道代码会稳定下来，你可以添加类型注解。</p><p>您也可以尝试从使用自动工具添加类型注解开始。<a href="https://github.com/dropbox/pyannotate" target="_blank" rel="noopener">pyannotate</a> 库从运行时观察实际类型中获取类型信息。类似地，<a href="https://github.com/kensho-technologies/pytest-annotate" target="_blank" rel="noopener">pytest-annotate</a> 通过运行测试和观察类型添加类型注解。另外，<a href="https://github.com/google/pytype" target="_blank" rel="noopener">pytype</a> 可以基于代码的静态分析添加注解。我没有使用这些工具的经验，但是我认为仔细验证其中任何一个工具给出的注解是一个好主意。研究这些注解甚至可能导致发现代码中的一些错误。</p><h3 id="当我没有时间理解-mypy-的错误时该怎么办">当我没有时间理解 mypy 的错误时该怎么办？</h3><p>找到时间，它可能会有回报。不要用 <code># type: ignore</code>，但是先试着理解这个问题（有时在 <a href="https://github.com/python/mypy/issues" target="_blank" rel="noopener">mypy 问题页面</a>上搜索是唯一的方法），只有当你确信没有好的选择时，才使用它。mypy 可能，很可能，发现了什么东西。</p><p>另一方面，无论代价是什么，不要试图取悦 mypy。经验法则是：不要仅仅为了抑制 mypy 错误而让代码变得更糟。它仍然只是一种工具。</p><p>请记住，mypy 正在不断发展。它的错误信息越来越好，误报（不时被发现）也越来越少。所以，记得在新版本发布时更新 mypy。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;本文翻译自 &lt;a href=&quot;https://blog.daftcode.pl/next-steps-with-python-type-system-efc4df5251c9&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python 类型系统的第一步</title>
    <link href="http://weafteam.github.io/posts/cde2bcff/"/>
    <id>http://weafteam.github.io/posts/cde2bcff/</id>
    <published>2018-08-08T13:52:35.000Z</published>
    <updated>2018-08-12T09:51:01.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面">写在前面</h2><p>本文翻译自 <a href="https://blog.daftcode.pl/first-steps-with-python-type-system-30e4296722af" target="_blank" rel="noopener">First Steps with Python Type System</a>。</p><p>自豪的采用搜狗翻译。</p><h2 id="这是什么玩意">这是什么玩意？</h2><p>在过去几年中，类型注解的语法和语义逐渐被引入 Python 语言。类型在 Python 中仍然是一个非常新颖并且经常被误解的主题。在这篇文章中，我会介绍它的基础知识，而一些更高级的功能将出现在本文的后续部分中。</p><p>这篇文章基于 <a href="https://www.python.org/dev/peps/pep-0483" target="_blank" rel="noopener">PEP 483: The Theory of Type Hints</a>，<a href="https://www.python.org/dev/peps/pep-0484" target="_blank" rel="noopener">PEP 484: Type Hints</a>，Python 类型<a href="https://docs.python.org/3/library/typing.html" target="_blank" rel="noopener">文档</a>，mypy 的 <a href="https://github.com/python/mypy/issues" target="_blank" rel="noopener">github issues</a>，和我个人对于类型在现实代码方面的经验。我在使用的版本为 Python 3.6 和 mypy 0.620。</p><h2 id="类型和类">1. 类型和类</h2><p>为了更好地掌握 Python 的类型系统，我们需要区分类型和类。在发布 PEP 483 和 484 之前，这两个概念有些混乱。现在，一般来说，类型是类型检查器概念，类是运行时概念。在这两者的基本描述中，我们已经获得了关键信息：类型不在运行时的 “领域” 中。实际上，类型是程序的另一个 “层” 上的东西，一个用于类型检查的层。</p><p>但是什么是类型检查器？这是一个分析我们代码的工具（类似于 flake8，但更智能）。它不以任何方式运行我们的代码，只会静态检查代码的类型一致性。Python 社区的官方类型检查器是 mypy。此外还有 Facebook 的 <a href="https://github.com/facebook/pyre-check" target="_blank" rel="noopener">pyre-check</a> 和谷歌的 <a href="https://github.com/google/pytype" target="_blank" rel="noopener">pytype</a>。</p><h3 id="如何定义类型">1.1 如何定义类型？</h3><p>类型检查器需要关于类型的信息来检查我们的程序。定义类型有三种基本方法：</p><ol type="1"><li>通过定义一个类，</li><li>通过指定使用类型变量的函数，</li><li>通过使用更基本的类型来创建更复杂的类型。</li></ol><p>第一种情况中，语句 <code>class Animal: …</code> 同时定义了 <code>Animal</code> 类和 <code>Animal</code> 类型。这也适用于内置类型：<code>int</code>，<code>float</code>，<code>str</code>，<code>list</code>，<code>dict</code> 等等，它们也同时是类和类型。在这种情况下，类之间的继承关系被一一映射到子类型关系。因此，如果 <code>Dog</code> 是 <code>Animal</code> 的一个子类，那么 <code>Dog</code> 就是 <code>Animal</code> 的一个子类型，等等。这种处理类型的方法被称为“命名子类型”。一会儿，我将展示它在类型检查的情境中是如何工作的。</p><p>第二种情况是鸭子类型的精神：我们通过指定哪些函数/方法使用此类型的变量来定义类型。例如，如果一个对象有 <code>__len__</code> 方法，那么它具有 <code>Sized</code> 类型。这种处理类型的方法被称为“结构子类型”。这本身就是一个话题，在这篇文章中只会略加讨论。</p><p>在第三种情况中，我们使用早期定义的类型（以任何方式）来定义更复杂的类型。例如，我们可以定义以下类型：“仅包含整数或字符串实例的列表”。稍后将介绍这些类型。</p><h2 id="类型注解语法">2. 类型注解语法</h2><p>为了用类型信息给我们的代码做注解，我们需要一种特殊的语法。这种语法逐渐被引入到语言中，但是现在只关注它的当前（也很可能是最终）状态。</p><h3 id="注解变量">2.1 注解变量</h3><p>要注解变量，我们使用变量名后跟冒号和类型名。变量初始化是可选的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name: Type</span><br></pre></td></tr></table></figure><p>类型注解与初始化变量，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name: Type = initial_value</span><br></pre></td></tr></table></figure><p>所以从现在开始，mypy 知道，在这个范围内，<code>name</code> 应该具有 <code>Type</code> 类型，并将检查是否确实如此。事实上，第一次检查是在赋值阶段进行的：<code>initial_value</code> 是 <code>Type</code> 类型的吗？</p><p>如果一个变量没有初始化，我们就不能使用它（会引发 <code>NameError</code>），但是稍后，在我们初始化它之后，mypy 会用声明的变量类型来检查值的类型。</p><p>让我们看看它是什么样的。为了方便起见，我会把所有的 mypy 错误放在注释中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">width: int</span><br><span class="line">width = <span class="number">15</span>  <span class="comment"># 没有错误</span></span><br><span class="line"></span><br><span class="line">height: int</span><br><span class="line">height = <span class="string">"25"</span>  <span class="comment"># 错误:</span></span><br><span class="line"><span class="comment"># Incompatible types in assignment (expression has type "str", variable has type "int")</span></span><br><span class="line"></span><br><span class="line">depth: int = <span class="number">15.5</span>  <span class="comment"># 错误:</span></span><br><span class="line"><span class="comment"># error:Incompatible types in assignment (expression has type "float", variable has type "int")</span></span><br></pre></td></tr></table></figure><p>所以即使在这些简单的情况下，mypy 也已经很有用了。</p><h3 id="注解函数">2.2 注解函数</h3><p>我们还可以注解函数的参数类型和返回值类型。使用以下语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function</span><span class="params">(arg1: Type1, arg2: Type2)</span> -&gt; ReturnType:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>让我们看看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_ints</span><span class="params">(x: int, y: int)</span> -&gt; int:</span></span><br><span class="line">    <span class="keyword">return</span> x + y  <span class="comment"># 没有错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_ints(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 没有错误</span></span><br><span class="line">add_ints(<span class="number">1</span>, <span class="number">2.0</span>)  <span class="comment"># 错误:</span></span><br><span class="line"><span class="comment"># Argument 2 to "add_ints" has incompatible type "float"; expected "int"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">broken_add</span><span class="params">(x: int, y: int)</span> -&gt; str:</span></span><br><span class="line">    <span class="keyword">return</span> x + y  <span class="comment"># 错误:</span></span><br><span class="line">    <span class="comment"># Incompatible return value type (got "int", expected "str")</span></span><br></pre></td></tr></table></figure><p>在第二个例子中，mypy 通过检查 <code>+</code> 运算符（实际上是 <code>__add__</code> 方法）的返回类型知道 <code>broken_add</code> 在两个 <code>int</code> 上使用时有错误的返回类型：它是一个 <code>int</code>，而不是 <code>str</code>，所以函数的返回类型声明不正确。</p><h2 id="子类型">3. 子类型</h2><p>在我们开始尝试所有关于 Python 类型的东西之前，我们需要更好地理解基本的子类型关系。</p><p>让我们来看看这两个类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>基本上，子类型是一种不太普遍的类型。在我们的例子中，<code>Dog</code> 没有 <code>Animal</code> 一般，所以它是 <code>Animal</code> 的一个子类型。但是让我们深入一点，看看 Python 中如何定义子类型关系。这个定义将决定赋值规则和属性规则的使用，这些规则是 mypy 在代码上强制执行的。</p><h3 id="定义">3.1 定义</h3><p>我们用 <code>&lt;:</code> 表示子类型关系。（例如 <code>B &lt;: A</code> 表示 <code>B</code> 是 <code>A</code> 的子类型。）</p><p>现在，<code>B &lt;: A</code> 当且仅当：</p><ol type="1"><li>类型 <code>B</code> 的每个值也在类型 <code>A</code> 的值的集合中；并且</li><li>类型 <code>A</code> 的每个函数也在类型 <code>B</code> 的函数的集合中。</li></ol><p>（“类型 <code>A</code> 的函数” 基本上意味着“接受类型 <code>A</code> 的对象作为其参数的函数”。因此，它可以是一个具有 <code>A</code> 类型参数的独立函数，也可以是在 <code>A</code> 类上定义的方法。）</p><p>因此，在子类型化过程中，值集合变得更小，而函数集合变得更大（参见<a href="https://www.python.org/dev/peps/pep-0483/#subtype-relationships" target="_blank" rel="noopener">文档</a>和<a href="https://www.stephanboyer.com/post/132/what-are-covariance-and-contravariance" target="_blank" rel="noopener">这个博客</a>，它启发了符号和示例）。</p><p>就我们的两种类型而言，<code>Dog &lt;: Animal</code> 意味着：</p><ol type="1"><li>一组 <code>Dog</code> 是 <code>Animal</code> 的子集（每只 <code>Dog</code> 都是 <code>Animal</code>，但不是每只 <code>Animal</code> 都是 <code>Dog</code>）。这基本上意味着 <code>Dog</code> 比 <code>Animal</code> 少。</li><li><code>Animal</code> 的一组函数是 <code>Dog</code> 的函数的子集（<code>Dog</code> 可以做任何 <code>Animal</code> 能做的事情，但是 <code>Animal</code> 不能做任何 <code>Dog</code> 能做的事情）。基本上，<code>Animal</code> 能做的比 <code>Dog</code> 少。</li></ol><h3 id="赋值规则">3.2 赋值规则</h3><p>这个定义决定了哪些赋值是可接受的，哪些是不可接受的。让我们尝试将一种类型的变量分配给另一种类型的变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dog &lt;: Animal</span></span><br><span class="line">scooby: Dog</span><br><span class="line">an_animal: Animal</span><br><span class="line"></span><br><span class="line">an_animal = scooby  <span class="comment"># 没有错误</span></span><br></pre></td></tr></table></figure><p>将 <code>scooby</code> 赋值给 <code>an_animal</code> 是类型安全的，因为 <code>scooby</code> 被保证是一只 <code>Animal</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dog &lt;: Animal</span></span><br><span class="line">scooby: Dog</span><br><span class="line">an_animal: Animal</span><br><span class="line"></span><br><span class="line">scooby = an_animal  <span class="comment"># 错误:</span></span><br><span class="line"><span class="comment"># Incompatible types in assignment (expression has type "Animal", variable has type "Dog")</span></span><br></pre></td></tr></table></figure><p>把 <code>an_animal</code> 赋值给 <code>scooby</code> 不是类型安全的，因为 <code>an_animal</code> 可能不是 <code>Dog</code>。</p><p>检查继承关系是命名子类型化方法的一部分。</p><h3 id="属性规则">3.3 属性规则</h3><p>mypy 不仅关注赋值，还关注属性的使用。更准确地说，它检查属性是否实际定义在对象上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span> ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bark</span><span class="params">(self)</span>:</span> ...</span><br></pre></td></tr></table></figure><p>现在 <code>Animal</code> 可以 <code>eat</code>，<code>Dog</code> 可以 <code>eat</code> （通过继承）和 <code>bark</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dog &lt;: Animal</span></span><br><span class="line">an_animal: Animal</span><br><span class="line">snoopy: Dog</span><br><span class="line"></span><br><span class="line">an_animal.eat()  <span class="comment"># 没有错误</span></span><br><span class="line">snoopy.eat()  <span class="comment"># 没有错误</span></span><br><span class="line"></span><br><span class="line">snoopy.bark()  <span class="comment"># 没有错误</span></span><br><span class="line">an_animal.bark()  <span class="comment"># 错误: "Animal" has no attribute "bark"</span></span><br></pre></td></tr></table></figure><p>mypy 确保确实在相关对象上定义了方法。<code>an_animal</code> 没有定义 <code>bark</code> 方法，因此会报告一个错误。</p><p>检查属性，特别是方法，是结构子类型化方法的一部分。在这种方法中，“子类型关系是从声明的方法中推导出来的”[<a href="https://www.python.org/dev/peps/pep-0483/#background" target="_blank" rel="noopener">来源</a>]。</p><h2 id="定义复杂类型">4. 定义复杂类型</h2><p>让我们看看如何使用更基本的类型来创建更复杂的类型。这是在 Python 中定义类型的第三种方法。我将集中讨论几个典型的复杂类型，而其余的工作方式基本相同。</p><h3 id="列表">4.1 列表</h3><p>其中最基本的是 <code>List</code>。除了大写字母 <code>L</code> 之外，它的拼写与内置 <code>list</code> 相同。语法如下：<code>List[TypeOfElements]</code>。所以整数列表是 <code>List[int]</code>，字符串列表是 <code>List[str]</code> 等等。让我们来看看代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> List</span><br><span class="line"></span><br><span class="line">my_list: List[int] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]  <span class="comment"># 没有错误</span></span><br><span class="line"></span><br><span class="line">my_other_list: List[int] = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">"3"</span>]  <span class="comment">#  错误:</span></span><br><span class="line"><span class="comment"># List item 2 has incompatible type "str"; expected "int"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scooby = Dog()</span><br><span class="line">lassie = Dog()</span><br><span class="line">pinky = Animal()</span><br><span class="line"></span><br><span class="line">my_dogs: List[Dog] = [scooby, lassie, pinky]  <span class="comment"># 错误:</span></span><br><span class="line"><span class="comment"># List item 2 has incompatible type "Animal"; expected "Dog"</span></span><br></pre></td></tr></table></figure><p>这是有道理的，但是我们都知道，在 Python 列表中，我们可以放置多种类型的项目： <code>[1, 2, '3']</code> 仍然是有效的列表。一会儿，我们将看到如何表达像 “整数或字符串” 这样的类型。但是首先，让我们看看元组和字典类型。</p><h3 id="元组">4.2 元组</h3><p>在 Python 语言中，元组传统上有两个用途。首先，这是一个 “不可改变的列表”。第二，它是 “记录” 或 “一行值”，其中每个位置上的值通常都有特定定义的类型；把它想象成 SQL 数据库中的一行。<code>Tuple</code>（大写 <code>T</code> ）类型支持这两种方法。</p><p>要将元组定义为记录，使用以下语法：<code>Tuple[Type1, Type2, Type3]</code>（等等）。</p><p>要将元组定义为不可变列表，使用元组与省略号对象（用三个点拼写：<code>...</code>）：<code>Tuple[TypeOfAllElements, ...]</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Tuple</span><br><span class="line"></span><br><span class="line">bob: Tuple[str, str, int] = (<span class="string">"Bob"</span>, <span class="string">"Smith"</span>, <span class="number">25</span>)  <span class="comment"># 没有错误</span></span><br><span class="line"></span><br><span class="line">frank: Tuple[str, str, int] = (<span class="string">"Frank"</span>, <span class="string">"Brown"</span>, <span class="number">43.4</span>)  <span class="comment"># 错误:</span></span><br><span class="line"><span class="comment"># Incompatible types in assignment (expression has type "Tuple[str, str, float]",</span></span><br><span class="line"><span class="comment">#   variable has type "Tuple[str, str, int]")</span></span><br><span class="line"></span><br><span class="line">ann: Tuple[str, str, int] = (<span class="string">"Ann"</span>, <span class="string">"X"</span>, <span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 错误:</span></span><br><span class="line"><span class="comment"># Incompatible types in assignment (expression has type "Tuple[str, str, int, int]",</span></span><br><span class="line"><span class="comment">#   variable has type "Tuple[str, str, int]")</span></span><br><span class="line"></span><br><span class="line">scores1: Tuple[int, ...] = (<span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">-1</span>)  <span class="comment"># 没有错误</span></span><br><span class="line"></span><br><span class="line">scores2: Tuple[int, ...] = (<span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">-1</span>, <span class="keyword">None</span>, <span class="number">7</span>)  <span class="comment"># 错误:</span></span><br><span class="line"><span class="comment"># Incompatible types in assignment (expression has type</span></span><br><span class="line"><span class="comment">#   "Tuple[int, int, int, int, None, int]", variable has type "Tuple[int, ...]")</span></span><br></pre></td></tr></table></figure><h3 id="命名元组">4.3 命名元组</h3><p>在 Python 中也有 <code>namedtuple</code>。即使不涉及类型，这也是一个非常方便的元组扩展。它增加了字段名查找和一个漂亮的字符串表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">    Person = namedtuple(<span class="string">'Person'</span>, <span class="string">'first_name last_name age'</span>)</span><br><span class="line"></span><br><span class="line">    bob = Person(first_name=<span class="string">'Bob'</span>, last_name=<span class="string">'Smith'</span>, age=<span class="number">41</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bob.age</span><br><span class="line"><span class="number">41</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bob</span><br><span class="line">Person(first_name=<span class="string">'Bob'</span>, last_name=<span class="string">'Smith'</span>, age=<span class="number">41</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 依然可以使用旧的访问方式：</span></span><br><span class="line">    bob[<span class="number">0</span>]</span><br><span class="line"><span class="string">'Bob'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bob[<span class="number">1</span>:]</span><br><span class="line">(<span class="string">'Smith'</span>, <span class="number">41</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(bob)</span><br><span class="line">[<span class="string">'Bob'</span>, <span class="string">'Smith'</span>, <span class="number">41</span>]</span><br></pre></td></tr></table></figure><p>在 Python 3 中，<code>namedtuple</code> 有一个更年轻的类型兄弟：<code>NamedTuple</code>（同样，用大写字母 <code>N</code> 和 <code>T</code> 拼写）。在运行时，它具有与 <code>namedtuple</code> 完全相同的 API，但是另外，它支持类型注解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> NamedTuple</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(NamedTuple)</span>:</span></span><br><span class="line">    first_name: str</span><br><span class="line">    last_name: str</span><br><span class="line">    age: int</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Person(<span class="string">"Bob"</span>, <span class="string">"Smith"</span>, <span class="number">41</span>)  <span class="comment"># 没有错误</span></span><br><span class="line"></span><br><span class="line">Person(<span class="string">"Kate"</span>, <span class="string">"Smith"</span>, <span class="string">"32"</span>)  <span class="comment"># 错误:</span></span><br><span class="line"><span class="comment"># Argument 3 to "Person" has incompatible type "str"; expected "int"</span></span><br></pre></td></tr></table></figure><p>不错，易读，方便！</p><h3 id="字典">4.4 字典</h3><p>另一种重要的 Python 类型是字典。其类型的定义类似于元组：<code>Dict[KeyType, ValueType]</code>。因此，将整数键映射到字符串值的字典是 <code>Dict[int, str]</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Dict</span><br><span class="line"></span><br><span class="line">id_to_name: Dict[int, str] = &#123;<span class="number">1</span>: <span class="string">"Bob"</span>, <span class="number">23</span>: <span class="string">"Ann"</span>, <span class="number">7</span>: <span class="string">"Kate"</span>&#125;  <span class="comment"># 没有错误</span></span><br><span class="line">id_to_age: Dict[int, int] = &#123;<span class="string">"1"</span>: <span class="number">41</span>, <span class="number">2</span>: <span class="number">22</span>&#125;  <span class="comment"># 错误:</span></span><br><span class="line"><span class="comment"># Dict entry 0 has incompatible type "str": "int"; expected "int": "int"</span></span><br><span class="line"></span><br><span class="line">name_to_phone_no: Dict[str, str] = &#123;<span class="string">"Bob"</span>: <span class="string">"55534534"</span>, <span class="string">"Ann"</span>: <span class="number">55599412</span>&#125;  <span class="comment"># 错误:</span></span><br><span class="line"><span class="comment"># Dict entry 1 has incompatible type "str": "int"; expected "str": "str"</span></span><br></pre></td></tr></table></figure><p>还有其他 Python 集合的类型：<code>Set</code>、<code>FrozenSet</code>、<code>DefaultDict</code>、<code>Counter</code>、<code>Deque</code> 和许多其他类型。有关完整列表，请参见<a href="https://docs.python.org/3/library/typing.html" target="_blank" rel="noopener">文档</a>。</p><p>现在让我们关注另一种创建复杂类型的方法。</p><h3 id="union">4.5 Union</h3><p>假设我们有一个变量可以有 <code>str</code> 类型或 <code>int</code> 类型，这取决于情况（像不同的数据源）。为了定义这种类型，我们可以使用 <code>Union</code>。在我们的例子中，它将是<code>Union[str, int]</code>。在方括号中，我们可以根据需要放置任意多的类型：<code>Union[Type1, Type2, Type3, Type4]</code>（等等）。形式上：</p><blockquote><p><code>Union[t1, t2, ...]</code>. <code>t1, ...</code> 中至少一个的子类型是这个类型的子类型。[<a href="https://www.python.org/dev/peps/pep-0483/#fundamental-building-blocks" target="_blank" rel="noopener">来源</a>]</p></blockquote><p>一些例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Union</span><br><span class="line"></span><br><span class="line">width1: Union[int, float] = <span class="number">20</span>  <span class="comment"># 没有错误</span></span><br><span class="line">width2: Union[int, float] = <span class="number">20.5</span>  <span class="comment"># 没有错误</span></span><br><span class="line">width3: Union[int, float] = <span class="string">"44"</span>  <span class="comment"># 错误:</span></span><br><span class="line"><span class="comment"># Incompatible types in assignment (expression has type "str",</span></span><br><span class="line"><span class="comment">#   variable has type "Union[int, float]")</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lizard</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restricted_eat</span><span class="params">(animal: Union[Dog, Cat])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    animal.eat()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a_dog: Dog</span><br><span class="line">restricted_eat(a_dog)  <span class="comment"># 没有错误</span></span><br><span class="line"></span><br><span class="line">a_cat: Cat</span><br><span class="line">restricted_eat(a_cat)  <span class="comment"># 没有错误</span></span><br><span class="line"></span><br><span class="line">a_lizard: Lizard</span><br><span class="line">restricted_eat(a_lizard)  <span class="comment"># 错误:</span></span><br><span class="line"><span class="comment"># Argument 1 to "restricted_eat" has incompatible type "Lizard";</span></span><br><span class="line"><span class="comment">#   expected "Union[Dog, Cat]"</span></span><br></pre></td></tr></table></figure><h3 id="none-类型和可选类型">4.6 None 类型和可选类型</h3><p>一种常见的编程模式是使用一个变量来表示具体的值，或者用一个符号来表示没有值（当值丢失、损坏、还不可用、在当前上下文中不充分等等）。在 Python 中，为了表示没有值，<code>None</code> 是最常用的对象。</p><p>None 的类型是 <code>NoneType</code>，但是在类型系统中，它有一个别名，即… <code>None</code> 本身。别名非常有用，因为它不涉及导入任何内容。因此，表达 <code>T</code> 类型或 <code>None</code> 类型的值的最自然方式是 <code>Union[T, None]</code>。所以整型或无应该是 <code>Union[int, None]</code>。</p><p>这种类型或无的模式非常普遍，以至于在 Python 的类型系统中 <code>Union[T, None]</code> 有一个别名：<code>Optional[T]</code>。例如，要想表达 <code>Union[int, None]</code> 应该使用 <code>Optional[int]</code>。</p><p>忘记变量的“可选性”常常会导致错误。mypy 真的可以帮到我们。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;本文翻译自 &lt;a href=&quot;https://blog.daftcode.pl/first-steps-with-python-type-system-30e4296722af&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>内存中的栈、堆和静态区的用法</title>
    <link href="http://weafteam.github.io/posts/978fb366/"/>
    <id>http://weafteam.github.io/posts/978fb366/</id>
    <published>2018-07-29T09:46:14.000Z</published>
    <updated>2018-08-08T06:25:10.793Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本周的第三篇博客，这个题目应该也是老生常谈的问题。</p></blockquote><h2 id="堆区">1 堆区</h2><p>先了解下Heap的作用，堆区是专门用来存储对象的实例的，也就是我们平时通过new出来的对象，但是实际上这里面也只是保存了对象实例的属性值，属性的类型和对象本身的标记等一些内容，其中值得注意的是它里面并不保存对象的方法（方法也可以理解成指令，保存在stack中）</p><p>所以我们加以总结和延伸下：</p><p><strong>1</strong> 它存储的都是对象，而且每个对象都包含一个与之对应的class的信息。这样做的目的是能够让对象得到操作的指令集。</p><p><strong>2</strong> 需要注意的是JVM中只有一块堆区（Heap），而且它是被所有线程共享的。堆区中存放的只有对象本身，不存放基本数据类型和对象的引用。</p><p><strong>3</strong> 关于堆区的分配和释放一般是由程序员做这个操作。其实这一点很好理解，程序员new一个对象相当于对这块区域做了分配的工作，而当程序员做delete操作时，相当于释放了这部分空间，同时如果程序员的习惯不好，不对无用的对象进行释放的话，当程序结束时，也会由OS做这个工作。</p><h2 id="栈">2 栈</h2><p>然后我们再了解下Stack的作用，当我们在堆区中为我们new出来的对象分配好空间之后，我们需要在栈中保存一个4字节的Heap的地址，用来定位该对象实例在Heap中的位置，便于找到该对象实例。</p><p>其实Stack的功能不止于此：</p><p><strong>1</strong> 不同于Heap，Stack的个数是和线程挂钩的，每个线程都包含一个Stack，而且栈中只包含了基本的数据类型的变量和对象的引用。</p><p><strong>2</strong> 栈之间是相互独立的，所以栈中的数据都是私有的，其他的栈不能访问。</p><p><strong>3</strong> 栈可以分为三个部分：基本数据类型变量区、执行环境的上下文、操作指令区</p><p><strong>4</strong> 栈相对于堆区，它的分配和释放的工作是系统自己做的</p><h2 id="静态区方法区">3 静态区/方法区</h2><p>类似于堆区，而且是被所有线程所共享的。方法区中存放了整个程序中所有的永远唯一的变量，例如：class信息和static变量等。</p><p>它也是分了三块：全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。</p><h2 id="注意">注意</h2><p><strong>栈是运行时的单位，而堆是存储时的单位</strong></p><p>值得注意的是：堆和栈不都可以存储数据吗，为什么要将这两者区分开来？</p><p>** 1 ** 首先从软件设计的角度来看这个问题，栈其实代表了处理逻辑，而堆代表了数据存储。这种分而治之的思想，使得我们的处理逻辑更为清晰。</p><p>** 2 ** 因为堆是共享的，所以堆中的内容也是被多个栈共享的。这样做的收益有两个方面：一方面这种共享提供了一种有效的数据交互方式，另一方面，堆中的共享常量和缓存可以被所有的栈访问到。</p><p>以上。感谢驻足~</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;本周的第三篇博客，这个题目应该也是老生常谈的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;堆区&quot;&gt;1
        
      
    
    </summary>
    
      <category term="JAVA" scheme="http://weafteam.github.io/categories/JAVA/"/>
    
    
      <category term="面试" scheme="http://weafteam.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>StackOverflow上简单数字识别案例学习</title>
    <link href="http://weafteam.github.io/posts/8b09dcdd/"/>
    <id>http://weafteam.github.io/posts/8b09dcdd/</id>
    <published>2018-07-24T04:59:38.000Z</published>
    <updated>2018-08-07T08:56:41.652Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>正如题目那样，这次的学习是StackOverflow上的一个案例，它的地址为<a href="https://stackoverflow.com/questions/9413216/simple-digit-recognition-ocr-in-opencv-python" class="uri" target="_blank" rel="noopener">https://stackoverflow.com/questions/9413216/simple-digit-recognition-ocr-in-opencv-python</a>，但是源地址上的代码略微有点旧，很多函数在OpenCV3中有了些许的改动，所以我还是会贴上我自己改正过后的代码，然后附上我对作者的思路的理解整理以及对所有代码的理解，如有问题，欢迎和我进行沟通交流，邮箱地址：cliugeek@us-forever.com</p></blockquote><h1 id="思路">思路：</h1><p>整体的思路：我们需要有一个训练（其实严格意义上说不上是训练，其实我们最终要做的是每个数字的特征提取并且将他们与实际的数字字符一一对应起来，姑且就称这个过程为“训练”吧）的图像，然后我们提取其中所有的数字的特征，然后根据一一对应的的关系，将特征和对应的字符存储起来，以便我们后续做其他图像中的数字识别使用。</p><p>所以先贴一下训练用到的数据图：</p><p><img src="https://i.loli.net/2018/07/24/5b56be2a72945.png" alt="digit.png"></p><p>其实这样的训练数据存在着一个问题，那就是所有的字母都是相同的字体和大小，所以整体的鲁棒性很受影响。所以这是本程序需要做继续优化的地方。</p><p>接下来我们讲具体的训练过程：</p><pre><code>1 加载图像2 检测数字（通过轮廓查找找，并且通过对检测到的字母的面积和高度做相应的约束，来避免错误的检测）3 对检测到的字母绘制边框4 每绘制出一个边框，我们就需要在键盘上键入相应的数字键，这一步很关键，否则会导致我们训练过程无效，导致后面一系列的工作无法进行5 当我们按下相应的数字键之后，边框里面的东西便会进行重新的resize，变成10x10的大小，然后将其存入到一个100维的数组中（其实就是将这些像素值都存了进去作为我们的特征提取），相应的也会将我们键入的数字存到另一个data文件当中去6 训练过程完成之后，系统生成两个data文件。</code></pre><p>在手动数字分类结束时，训练数据（其实就是上面给大家的那张图像）中所有的数字，都已经由我们手工标记，结果如下：</p><p><img src="https://i.loli.net/2018/07/24/5b56bf1d8d153.png" alt="norm.png"></p><p>下面就是针对上述过程的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">im = cv2.imread(<span class="string">'digit.png'</span>)</span><br><span class="line">im3 = im.copy()</span><br><span class="line"></span><br><span class="line">gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)</span><br><span class="line">blur = cv2.GaussianBlur(gray, (<span class="number">5</span>, <span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line">thresh = cv2.adaptiveThreshold(blur, <span class="number">255</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#################      Now finding Contours         ###################</span></span><br><span class="line"></span><br><span class="line">image, contours, hierarchy = cv2.findContours(thresh, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"></span><br><span class="line">samples = np.empty((<span class="number">0</span>, <span class="number">100</span>))</span><br><span class="line">responses = []</span><br><span class="line">keys = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">48</span>, <span class="number">58</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cnt <span class="keyword">in</span> contours:</span><br><span class="line">    <span class="keyword">if</span> cv2.contourArea(cnt) &gt; <span class="number">50</span>:</span><br><span class="line">        [x, y, w, h] = cv2.boundingRect(cnt)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> h &gt; <span class="number">28</span>:</span><br><span class="line">            cv2.rectangle(im, (x, y), (x + w, y + h), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">            roi = thresh[y:y + h, x:x + w]</span><br><span class="line">            roismall = cv2.resize(roi, (<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">            cv2.imshow(<span class="string">'norm'</span>, im)</span><br><span class="line">            key = cv2.waitKey(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> key == <span class="number">27</span>:  <span class="comment"># (escape to quit)</span></span><br><span class="line">                sys.exit()</span><br><span class="line">            <span class="keyword">elif</span> key <span class="keyword">in</span> keys:</span><br><span class="line">                responses.append(int(chr(key)))</span><br><span class="line">                sample = roismall.reshape((<span class="number">1</span>, <span class="number">100</span>))</span><br><span class="line">                samples = np.append(samples, sample, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">responses = np.array(responses, np.float32)</span><br><span class="line">responses = responses.reshape((responses.size, <span class="number">1</span>))</span><br><span class="line">print(<span class="string">"training complete"</span>)</span><br><span class="line"></span><br><span class="line">np.savetxt(<span class="string">'generalsamples.data'</span>, samples)</span><br><span class="line">np.savetxt(<span class="string">'generalresponses.data'</span>, responses)</span><br></pre></td></tr></table></figure><p>代码其实也很简单，所以简单的说一下，首先对图像进行灰度化，然后进行高斯去噪，再然后做二值化。接下来进行轮廓检测，然后对每个检测到的轮廓在面积和高度上进行控制，如果符合设定的标准就进行画框、resize和display，同时将输入的key进行相应的存储，到最后进行save，将他们分别存到generalsamples.data和generalresponses.data中。</p><p>接下来进行测试部分，同样先给出测试所用的图像：</p><p><img src="https://i.loli.net/2018/07/24/5b56ca87860f9.png" alt="dig.png"></p><p>再然后就是测试部分的步骤：首先将刚才我们生成的data文件load进来，也就是将刚才的模型加载到内存中，然后我们用KNN（K邻近值法，选取与当前的测试图像中最相近的作为我们预测出来的值）做预测，然后针对于检测出来的每个轮廓都进行这样的操作，预测出来的图像，我们通过puttext方法放到将要生成的图像out上，最后将原图im和生成图out显示出来。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#######   training part    ###############</span></span><br><span class="line">samples = np.loadtxt(<span class="string">'generalsamples.data'</span>, np.float32)</span><br><span class="line">responses = np.loadtxt(<span class="string">'generalresponses.data'</span>, np.float32)</span><br><span class="line">responses = responses.reshape((responses.size, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">model = cv2.ml.KNearest_create()</span><br><span class="line">model.train(samples, cv2.ml.ROW_SAMPLE, responses)</span><br><span class="line"><span class="comment"># model.train(samples,responses)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############################# testing part  #########################</span></span><br><span class="line"></span><br><span class="line">im = cv2.imread(<span class="string">'dig.png'</span>)</span><br><span class="line">out = np.zeros(im.shape, np.uint8)</span><br><span class="line">gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)</span><br><span class="line">thresh = cv2.adaptiveThreshold(gray, <span class="number">255</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">image, contours, hierarchy = cv2.findContours(thresh, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cnt <span class="keyword">in</span> contours:</span><br><span class="line">    <span class="keyword">if</span> cv2.contourArea(cnt) &gt; <span class="number">50</span>:</span><br><span class="line">        [x, y, w, h] = cv2.boundingRect(cnt)</span><br><span class="line">        <span class="keyword">if</span> h &gt; <span class="number">28</span>:</span><br><span class="line">            cv2.rectangle(im, (x, y), (x + w, y + h), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">            roi = thresh[y:y + h, x:x + w]</span><br><span class="line">            roismall = cv2.resize(roi, (<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line">            roismall = roismall.reshape((<span class="number">1</span>, <span class="number">100</span>))</span><br><span class="line">            roismall = np.float32(roismall)</span><br><span class="line">            retval, results, neigh_resp, dists = model.findNearest(roismall, k=<span class="number">1</span>)</span><br><span class="line">            string = str(int((results[<span class="number">0</span>][<span class="number">0</span>])))</span><br><span class="line">            cv2.putText(out, string, (x, y + h), <span class="number">0</span>, <span class="number">1</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">'im'</span>, im)</span><br><span class="line">cv2.imshow(<span class="string">'out'</span>, out)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>这部分的代码其实按照刚才的流程理解就可以，所以不再赘述。</p><p>最后给大家看下效果：</p><p><img src="https://i.loli.net/2018/07/24/5b56dd88da6ad.png" alt="im.png"></p><p><img src="https://i.loli.net/2018/07/24/5b56dd88c14c9.png" alt="out.png"></p><p>我仔细对比了一遍，准确率可以达到100%。对于这个简单的例子，这样的结果可以称得上完美吧。</p><p>以上就是本次学习的所有内容。感谢驻足~</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;正如题目那样，这次的学习是StackOverflow上的一个案例，它的地址为&lt;a
        
      
    
    </summary>
    
      <category term="OCR" scheme="http://weafteam.github.io/categories/OCR/"/>
    
    
      <category term="OpenCV-Python" scheme="http://weafteam.github.io/tags/OpenCV-Python/"/>
    
  </entry>
  
  <entry>
    <title>Thread和Runnable的区别</title>
    <link href="http://weafteam.github.io/posts/42fb2e58/"/>
    <id>http://weafteam.github.io/posts/42fb2e58/</id>
    <published>2018-07-23T07:32:42.000Z</published>
    <updated>2018-08-07T08:56:41.651Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>两周的小暑假也算是过完了，接下来得好好做东西了，博客从今天开始也要跟上进度了。</p></blockquote><h2 id="两种创建的方式">1. 两种创建的方式</h2><pre><code>1 继承Thread类，并且重写其中的run()方法2 实现Runnable接口，重写其中的run()方法</code></pre><p>但是在实现应用时，我们多用实现Runnable接口的方式，这是因为Java的单继承多实现的机制，这样一来就可以避免由于这个机制代码的局限性。其实我们用Runnable的原因不止于此，最主要的一点是Runnable是可以进行数据共享的，但因此它也是线程不安全的。现在对这两点进行逐一解释，我们首先通过一个老生常谈的售票的例子，对数据共享这一点进行解释。</p><h2 id="示例代码">2. 示例代码</h2><p><strong>示例代码1</strong></p><p>首先我们看一下我们自己定义一个MyThread，让它继承Thread，然后我们定义一个count，这个count参数可以想象成我们要共享的资源。然后代码就很简单了，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        MyThread thread1 = <span class="keyword">new</span> MyThread(<span class="string">"一号窗口"</span>);</span><br><span class="line">        MyThread thread2 = <span class="keyword">new</span> MyThread(<span class="string">"二号窗口"</span>);</span><br><span class="line">        MyThread thread3 = <span class="keyword">new</span> MyThread(<span class="string">"三号窗口"</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"当前售票窗口为："</span> + <span class="keyword">this</span>.name + <span class="string">"       售票："</span> + count--);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果1：</strong></p><p><img src="https://i.loli.net/2018/07/24/5b569215608d6.png" alt="thread.png"></p><p>我们先将两个代码都给大家，稍后再做分析。</p><p><strong>示例代码2</strong></p><p>同样，我们定义一个内部类，让它实现Runnable接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testRunnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        MyThread mt = <span class="keyword">new</span> MyThread();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(mt, <span class="string">"一号窗口"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(mt, <span class="string">"二号窗口"</span>);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(mt, <span class="string">"二号窗口"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"当前线程为："</span> + Thread.currentThread().getName() + <span class="string">"  售票为："</span> + count--);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果2：</strong></p><p><img src="https://i.loli.net/2018/07/24/5b56921561f91.png" alt="runnable.png"></p><h2 id="分析">3. 分析</h2><p>通过代码运行结果我们不难看出，这两种方法的截然不同，相信大家现在也能理解了，为什么说Runnable是可以进行资源共享的，不过还是在多说一点吧。</p><p>我们继承了Thread的MyThead类，通过三次实例化，分别的将这三个再start起来，就相当于给了三个售票窗口每人一个卖5张票的任务，他们因为是三个实例，各自做各自的事情，各自完成这个卖票的任务。</p><p>而我们实现了Runnable的MyThread类，相当于先创建了一个任务（其实就是我们new MyThread过程）,然后通过实例化三个Thread，创建了三个线程共同去完成这个任务。</p><p>那为什么说Runnable是线程不安全的呢，理由其实很简单：如果我们在System.out…之前加上一个线程休眠操作的话，就会很有可能导致我们的count最后能输出-1，也就是说存在一张票被售卖两次的状况。如果想对于这一点进行测试的话，大家要注意一点，票数要设置的大一些，休眠时间写成1毫秒就行，这样的测试效果比较明显。</p><p>那么如何才能保证我们用Runnable时的线程安全性呢？思路很简单，就是我们需要在这个地方加上同步操作（互斥锁），确保在同一时刻只有一个线程在执行售票的操作。而我们之前的继承Thread的方法并不需要这么做，原因就是每个线程执行自己的Thread对象中的代码，不存在多个线程共同执行同一个方法的情况。</p><p>以上是本次的所有内容，感谢驻足~</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;两周的小暑假也算是过完了，接下来得好好做东西了，博客从今天开始也要跟上进度了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;两种创建的方式&quot;&gt;1. 两种创建的方式&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1
        
      
    
    </summary>
    
      <category term="JAVA" scheme="http://weafteam.github.io/categories/JAVA/"/>
    
    
      <category term="面试" scheme="http://weafteam.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Java中List和ArrayList的区别</title>
    <link href="http://weafteam.github.io/posts/e85880/"/>
    <id>http://weafteam.github.io/posts/e85880/</id>
    <published>2018-06-23T11:10:07.000Z</published>
    <updated>2018-08-07T08:56:41.620Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>开始补博客了<sub>从5月初到现在应该有8篇博客需要补，废话不多说，开始写吧</sub></p></blockquote><h1 id="区别">区别</h1><p>这俩个的区别很明显，List是一个接口，而ArrayList是一个类，它继承AbstractList抽象类并且实现了List接口。</p><p>所以当我们需要实例化一个List的时候，我们并不能直接的new一个List（显然是废话，接口肯定是不能通过new实例化的），而只能是实例化一个继承并实现它的类的实例并将这个实例化的值赋值给我们的list实现List的实例化。说了这么多，其实可以用一行代码来表示（其实就是创建一个指向List对象的引用，这就是面向对象编程中多态的优势吧！）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如我们要拿来比较的ArrayList</span></span><br><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者继承List的其他类</span></span><br><span class="line">List b = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>所以通过以上的代码，可以很清晰的看到，List的实例化的具体操作，当然你也可以直接的写一行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List list;</span><br></pre></td></tr></table></figure><p>只不过这样做出来的list是一个空的列表，你可以在后续的操作为它做填充。</p><h2 id="注意事项">注意事项：</h2><p>我们接着刚才的 List list = new ArrayList(); 来说。首先list是一个List类型的对象，虽然我们是new的一个ArrayList的，但是有些ArrayList具有的而List类中没有的属性和方法，list都不能再用了。</p><p>那么如何才能保证ArrayList中独有的方法和属性都能被使用到呢？很简单，毕竟ArrayList是一个类，直接实例化是没问题的，这样它所有的属性和方法就都可以使用了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList A = <span class="keyword">new</span> ArrayList();</span><br></pre></td></tr></table></figure><p>我们再接着讲List list = new ArrayList();如果List和ArrayList中存在相同的属性（例如：int i）和相同的方法（例如：f()），这时候list.i的时候，我们调用的是List中的属性，而a.f()调用的是ArrayList中的方法f()。</p><h1 id="其他">其他</h1><p>有关于List和ArrayList本文用到的是没有指定泛化类型的写法，这个也是一个很重要的点，有关实装箱和拆箱的内容，我这提供一个网址。</p><p><a href="http://www.cnblogs.com/a164266729/p/4561651.html" class="uri" target="_blank" rel="noopener">http://www.cnblogs.com/a164266729/p/4561651.html</a></p><h1 id="本文参考">本文参考</h1><p><a href="http://www.cnblogs.com/aisiteru/articles/1151874.html" class="uri" target="_blank" rel="noopener">http://www.cnblogs.com/aisiteru/articles/1151874.html</a></p><p><a href="https://blog.csdn.net/erlian1992/article/details/51298276" class="uri" target="_blank" rel="noopener">https://blog.csdn.net/erlian1992/article/details/51298276</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;开始补博客了&lt;sub&gt;从5月初到现在应该有8篇博客需要补，废话不多说，开始写吧&lt;/sub&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1
        
      
    
    </summary>
    
      <category term="JAVA" scheme="http://weafteam.github.io/categories/JAVA/"/>
    
    
      <category term="面试" scheme="http://weafteam.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot使用Swagger2</title>
    <link href="http://weafteam.github.io/posts/d023fbc0/"/>
    <id>http://weafteam.github.io/posts/d023fbc0/</id>
    <published>2018-06-10T18:04:44.000Z</published>
    <updated>2018-08-22T14:49:02.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一简介">一、简介</h1><p>Swagger2是一款可以生成RESTful接口文档的工具。而且书写起来很方便，开发人员只需维护代码，不用额外书写文档。使用起来更方便，而且呈现的方式很棒。还支持在线测试。</p><h1 id="二springboot集成">二、SpringBoot集成</h1><p>我这里时使用的最新版本2.9.2 我这里项目是使用Maven构建的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- start swagger --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- end swagger --&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ：yaxuSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 增加swagger的rest API查看</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 13:20 2018/8/20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> by:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否开启swagger，正式环境一般是需要关闭的，可根据springboot的多环境配置进行设置</span></span><br><span class="line">    <span class="meta">@Value</span>(value = <span class="string">"$&#123;swagger.enabled&#125;"</span>)</span><br><span class="line">    Boolean swaggerEnabled;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo())</span><br><span class="line">            <span class="comment">// 是否开启</span></span><br><span class="line">            .enable(swaggerEnabled).select()</span><br><span class="line">            <span class="comment">// 扫描的路径包</span></span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.xxx.controller"</span>))</span><br><span class="line">            <span class="comment">// 指定路径处理PathSelectors.any()代表所有的路径</span></span><br><span class="line">            .paths(PathSelectors.any()).build().pathMapping(<span class="string">"/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">            .title(<span class="string">"后端服务接口详情"</span>)</span><br><span class="line">            .description(<span class="string">"yaxuSong"</span>)</span><br><span class="line">            <span class="comment">// 作者信息</span></span><br><span class="line">            .contact(<span class="keyword">new</span> Contact(<span class="string">"yaxuSong"</span>, <span class="string">"https://weaf.top"</span>, <span class="string">"earth@weaf.top"</span>))</span><br><span class="line">            .version(<span class="string">"1.0.0"</span>)</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>部分项目配置不同可能需要配置访问静态文件的路径 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ：yaxuSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 允许访问Swagger ui静态页面</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 13:20 2018/8/20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> by:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/static/**"</span>).addResourceLocations(<span class="string">"classpath:/static/"</span>);</span><br><span class="line"></span><br><span class="line">        registry.addResourceHandler(<span class="string">"swagger-ui.html"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>);</span><br><span class="line"></span><br><span class="line">        registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//跨域支持</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">"/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>设置文档内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxx.annotation.EnableRequestLog;</span><br><span class="line"><span class="keyword">import</span> com.xxx.common.CommonConverter;</span><br><span class="line"><span class="keyword">import</span> com.xxx.common.Constants;</span><br><span class="line"><span class="keyword">import</span> com.xxxx.common.Restful;</span><br><span class="line"><span class="keyword">import</span> com.xxx.common.Restful.Result;</span><br><span class="line"> <span class="comment">//...........</span></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParams;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ：yaxuSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 17:17 2018/5/25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> by:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="meta">@Api</span>(tags = <span class="string">"用户API"</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  type = 0 为粉丝列表 1 - 为关注者列表 默认0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@EnableRequestLog</span>(<span class="string">"查看粉丝，关注列表"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"list"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"查看粉丝和关注列表"</span>,httpMethod = <span class="string">"POST"</span>,</span><br><span class="line">            notes = <span class="string">"type= 0,是查看粉丝列表，type =1 是查看关注列表，默认值是0"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">list</span><span class="params">(@RequestParam(value = <span class="string">"type"</span>,defaultValue = <span class="string">"0"</span>,required = <span class="keyword">false</span>)</span> <span class="keyword">int</span> type</span></span><br><span class="line"><span class="function">            ,<span class="keyword">int</span> limit,<span class="keyword">int</span> offset,HttpServletRequest request)</span>&#123;</span><br><span class="line">        AppUser appUser = getUser(request);</span><br><span class="line">        <span class="keyword">if</span> (appUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Restful.failure(RestfulResultEnum.USER_UNLOGIN);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Restful.success(userService.getFollowList(appUser.getId(),limit,offset));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            List&lt;UserListVO&gt; list = userService.getFocusList(appUser.getId(), limit, offset);</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">                <span class="keyword">return</span> Restful.success(list);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">                    list.get(i).setRank(Long.parseLong(rankService.getRank(list.get(i).getId())+<span class="string">""</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> Restful.success(list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EnableRequestLog</span>(<span class="string">"同步微信信息"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"同步微信信息"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"sync/wechat"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"微信对象"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"WeChatDTO"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">syncWechat</span><span class="params">(WeChatDTO weChatDTO,HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        AppUser appUser = getUser(request);</span><br><span class="line">        <span class="keyword">if</span> (appUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Restful.failure(RestfulResultEnum.USER_UNLOGIN);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"【用户ID = &#123;&#125;,类名 = UserController,方法名 = syncWechat, 参数为 = &#123;&#125;】"</span>,appUser.getId(),weChatDTO.toString());</span><br><span class="line">        UserInfoVO vo = userService.syncWeChat(weChatDTO,appUser.getId());</span><br><span class="line">        <span class="keyword">if</span> (vo==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Restful.failure(RestfulResultEnum.USER_SYNC_WECHAT_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Restful.success(vo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.entry.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ：yaxuSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 11:32 2018/5/29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> by:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeChatDTO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value=<span class="string">"手机号码"</span>,dataType=<span class="string">"String"</span>,name=<span class="string">"phone"</span>,example=<span class="string">"15300000000"</span>)</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value=<span class="string">"名称"</span>,dataType=<span class="string">"String"</span>,name=<span class="string">"name"</span>,example=<span class="string">"愿得一人心"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value=<span class="string">"性别"</span>,dataType=<span class="string">"String"</span>,name=<span class="string">"gender"</span>,example=<span class="string">"男"</span>)</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value=<span class="string">"unionID"</span>,dataType=<span class="string">"String"</span>,name=<span class="string">"unionId"</span>,example=<span class="string">"o17g2621sE-9Ak-Nva2QbHzeF4"</span>)</span><br><span class="line">    <span class="keyword">private</span> String unionId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value=<span class="string">"头像路径"</span>,dataType=<span class="string">"String"</span>,name=<span class="string">"avatar"</span>,example=<span class="string">"https://xxxx.png"</span>)</span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value=<span class="string">"openID"</span>,dataType=<span class="string">"String"</span>,name=<span class="string">"openId"</span>,example=<span class="string">"othzc0VW0T8yyEk52C3lh2H_lTE0"</span>)</span><br><span class="line">    <span class="keyword">private</span> String openId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value=<span class="string">"省份"</span>,dataType=<span class="string">"String"</span>,name=<span class="string">"province"</span>,example=<span class="string">"北京"</span>)</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value=<span class="string">"国家"</span>,dataType=<span class="string">"String"</span>,name=<span class="string">"country"</span>,example=<span class="string">"中国"</span>)</span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value=<span class="string">"验证码"</span>,dataType=<span class="string">"String"</span>,name=<span class="string">"code"</span>,example=<span class="string">"2341"</span>)</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value=<span class="string">"邀请码"</span>,dataType=<span class="string">"String"</span>,name=<span class="string">"inviteCode"</span>,example=<span class="string">"LTEtNTQzMDMtRkUwQzQzNjE3NkE0NEM1MzAzNTBGRjk1NkU2QzQ4MkQ="</span>)</span><br><span class="line">    <span class="keyword">private</span> String inviteCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三结果展示">三、结果展示</h1><p>访问路径 <a href="http://127.0.0.1:10086/swagger-ui.html#/" class="uri" target="_blank" rel="noopener">http://127.0.0.1:10086/swagger-ui.html#/</a> <img src="https://weaf.oss-cn-beijing.aliyuncs.com/swagger-1.png"></p><p>设置请求方法的“查看粉丝和关注列表”（<strong>设置了请求方法</strong>） <img src="https://weaf.oss-cn-beijing.aliyuncs.com/swagger-3.png"></p><p>未设置请求方法的api <img src="https://weaf.oss-cn-beijing.aliyuncs.com/swagger-4.png"></p><p>两种设置方法的详细内容（通过点击try it可以进行测试）这里我们也可以通过<strong>Postman</strong>进行测试 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/swagger-5.png"> <img src="https://weaf.oss-cn-beijing.aliyuncs.com/swagger-6.png"></p><h1 id="四相关注解">四、相关注解</h1><p><img src="https://weaf.oss-cn-beijing.aliyuncs.com/swagger-7.png"></p><p>参考文档：<a href="https://swagger.io/" class="uri" target="_blank" rel="noopener">https://swagger.io/</a></p>]]></content>
    
    <summary type="html">
    
      SpringBoot使用Swagger2
    
    </summary>
    
      <category term="JAVA" scheme="http://weafteam.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://weafteam.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>asyncio 不完全指北（七）</title>
    <link href="http://weafteam.github.io/posts/a6235d78/"/>
    <id>http://weafteam.github.io/posts/a6235d78/</id>
    <published>2018-06-09T09:35:25.000Z</published>
    <updated>2018-08-07T08:56:41.657Z</updated>
    
    <content type="html"><![CDATA[<p>书接上文。</p><h2 id="使用-aiohttp-作为-web-服务器">使用 aiohttp 作为 Web 服务器</h2><p>上篇文章中提到，aiohttp 不仅仅是一个 http 客户端，同时也是一个 Web 服务器。在这一节，我们使用 aiohttp 实现一个简单的 Web 程序，同时与 flask 比较一下性能上的差别。</p><h3 id="准备工作">准备工作</h3><p>首先安装我们需要的第三方库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install aiohttp</span><br><span class="line">pip install flask</span><br></pre></td></tr></table></figure><p>然后准备好要使用的 Web 容器，这里我们使用对 aiohttp 和 flask 都很友好的 gunicorn。为了让 flask 得到异步支持， 需要同时安装 gevent：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gunicorn[gevent]</span><br></pre></td></tr></table></figure><p>安装 wrk，它是一个简单的性能测试工具：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install wrk</span><br></pre></td></tr></table></figure><h3 id="hello-world">Hello, world</h3><p>我们的起手式当然是 Hello, world。这里，我们分别使用 flask 和 aiohttp 实现一个返回 Hello, world 的 Web 服务。</p><h4 id="flask">flask</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flask_app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(<span class="string">"flask_app"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, world!"</span></span><br></pre></td></tr></table></figure><p>非常简单！</p><p>接下来让我们看一下性能测试的结果。首先用 gunicorn 启动应用，将 socket 绑定到 localhost:5000，打开访问日志，使用 4 个 worker，并使用 gevent 作为 worker 的类型：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -b localhost:5000 --access-logfile - -w 4 -k gevent flask_app:app</span><br></pre></td></tr></table></figure><p>然后就可以进行性能测试了，这里我们使用 8 个线程，每个线程负责 200 个请求，共测试 10 秒，并开启详细日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wrk -t8 -c200 -d10s --latency http://localhost:5000</span><br></pre></td></tr></table></figure><p>我们会得到这样的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Running 10s test @ http://localhost:5000</span><br><span class="line">  8 threads and 200 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency     9.80ms   94.91ms   1.67s    99.06%</span><br><span class="line">    Req/Sec     1.07k   555.92     2.14k    63.76%</span><br><span class="line">  Latency Distribution</span><br><span class="line">     50%    1.55ms</span><br><span class="line">     75%    1.82ms</span><br><span class="line">     90%    2.27ms</span><br><span class="line">     99%   20.89ms</span><br><span class="line">  23325 requests in 10.01s, 3.96MB read</span><br><span class="line">  Socket errors: connect 0, read 0, write 0, timeout 8</span><br><span class="line">Requests/sec:   2330.74</span><br><span class="line">Transfer/sec:    405.20KB</span><br></pre></td></tr></table></figure><p>这里只关注几个重要的信息：</p><ul><li>Latency，可以理解为响应时间，wrk 提供了平均值，标准差，最大值，以及正负一个标准差的占比；</li><li>Req/Sec，每个线程每秒钟的完成的请求数，同样有以上数据类型；</li><li>Latency Distribution，响应时间的分布情况，50%、75%、90%、99%的请求在多长时间内结束；</li><li>Socket errors，在测试中有多少错误发生；</li><li>Requests/sec，每秒钟完成多少请求；</li><li>Transfer/sec，每秒钟产生的数据量；</li></ul><p>知道了上述信息的含义，就可以对应用程序的性能有一个大概的了解了。</p><h4 id="aiohttp">aiohttp</h4><p>同样我们用 aiohttp 实现一个 Hello world 应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># aio_app.py</span></span><br><span class="line"><span class="keyword">from</span> aiohttp <span class="keyword">import</span> web</span><br><span class="line"></span><br><span class="line">routes = web.RouteTableDef()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@routes.get("/")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> web.Response(text=<span class="string">"Hello, world!"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = web.Application()</span><br><span class="line">app.add_routes(routes)</span><br></pre></td></tr></table></figure><p>然后用 gunicorn 启动它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -b localhost:5000 --access-logfile - -w 4 -k aiohttp.GunicornWebWorker aio_app:app</span><br></pre></td></tr></table></figure><p>大部分参数都相同，唯一的区别是使用了 aiohttp 的 wroker 类型。</p><p>也用同样的参数启动 wrk，得到以下结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Running 10s test @ http://localhost:5000</span><br><span class="line">  8 threads and 200 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency    32.58ms   15.57ms 120.43ms   68.40%</span><br><span class="line">    Req/Sec   773.91    167.40     1.16k    67.25%</span><br><span class="line">  Latency Distribution</span><br><span class="line">     50%   36.83ms</span><br><span class="line">     75%   42.40ms</span><br><span class="line">     90%   46.73ms</span><br><span class="line">     99%   66.48ms</span><br><span class="line">  61709 requests in 10.03s, 9.65MB read</span><br><span class="line">Requests/sec:   6150.18</span><br><span class="line">Transfer/sec:      0.96MB</span><br></pre></td></tr></table></figure><h4 id="对比">对比</h4><p>我们把性能测试的结果放在一块对比一下，左边是 flask，右边是 aiohttp：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Running 10s test @ http://localhost:5000                    Running 10s test @ http://localhost:5000</span><br><span class="line">  8 threads and 200 connections                               8 threads and 200 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev           Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency     9.80ms   94.91ms   1.67s    99.06%              Latency    32.58ms   15.57ms 120.43ms   68.40%</span><br><span class="line">    Req/Sec     1.07k   555.92     2.14k    63.76%              Req/Sec   773.91    167.40     1.16k    67.25%</span><br><span class="line">  Latency Distribution                                        Latency Distribution</span><br><span class="line">     50%    1.55ms                                               50%   36.83ms</span><br><span class="line">     75%    1.82ms                                               75%   42.40ms</span><br><span class="line">     90%    2.27ms                                               90%   46.73ms</span><br><span class="line">     99%   20.89ms                                               99%   66.48ms</span><br><span class="line">  23325 requests in 10.01s, 3.96MB read                       61709 requests in 10.03s, 9.65MB read</span><br><span class="line">  Socket errors: connect 0, read 0, write 0, timeout 8</span><br><span class="line">Requests/sec:   2330.74                                     Requests/sec:   6150.18</span><br><span class="line">Transfer/sec:    405.20KB                                   Transfer/sec:      0.96MB</span><br></pre></td></tr></table></figure><p>可以看出 flask 在单个请求的耗时上明显胜于 aiohttp，但是标准差巨大，在压力场景下最大耗时长达 1.67s，甚至出现了 8 个超时的连接，而 aiohttp 的请求耗时比较稳定；最重要的区别在于，aiohttp 每秒完成了多达 6150.18 个请求，是 flask 的近 3 倍！flask 中 1% 超过 20.89ms 的请求严重影响了整体的性能。</p><h3 id="点击计数">点击计数</h3><p>通过上面的 Hello, world 程序我们可以发现，使用 aiohttp 可以显著提升 Web 程序的性能。当然 Web 程序并不止于此，它还需要数据库、缓存、消息队列等等组件协同工作。asyncio 的周边虽然在迅速发展，不过仍不完善。好消息是 RabbitMQ 的 Python 驱动在下一个版本也加入了 asyncio 支持，基本组件大部分都支持了 asyncio。在这一节，我们增加 redis 支持，制作一个简单的点击计数器。</p><h4 id="准备工作-1">准备工作</h4><p>在本节，我们需要安装 redis，并启动它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br><span class="line">brew services start redis</span><br></pre></td></tr></table></figure><p>准备好支持 asyncio 的 redis 驱动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install aioredis</span><br></pre></td></tr></table></figure><h4 id="定义-app">定义 App</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> aiohttp <span class="keyword">import</span> web</span><br><span class="line"></span><br><span class="line">app = web.Application()</span><br></pre></td></tr></table></figure><h4 id="初始化-redis">初始化 redis</h4><p>在 aiohttp 中使用 redis 需要在应用启动前初始化连接池，并在应用退出后关闭连接池：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> aioredis</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">setup_redis</span><span class="params">(app)</span>:</span></span><br><span class="line">    redis_url = <span class="string">"redis://@localhost/0"</span></span><br><span class="line">    app[<span class="string">"redis"</span>] = <span class="keyword">await</span> aioredis.create_redis_pool(redis_url)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    app[<span class="string">"redis"</span>].close()</span><br><span class="line">    <span class="keyword">await</span> app[<span class="string">"redis"</span>].wait_closed()</span><br></pre></td></tr></table></figure><p>并将初始化函数注册到 app 的清理上下文：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.cleanup_ctx.append(setup_redis)</span><br></pre></td></tr></table></figure><h4 id="编写路由">编写路由</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">routes = web.RouteTableDef()</span><br><span class="line"></span><br><span class="line"><span class="meta">@routes.get("/hit")</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(request)</span>:</span></span><br><span class="line">    redis = request.app[<span class="string">"redis"</span>]</span><br><span class="line">    <span class="keyword">return</span> web.json_response(&#123;<span class="string">"hit"</span>: <span class="keyword">await</span> redis.incr(<span class="string">"hit"</span>)&#125;)</span><br><span class="line"></span><br><span class="line">app.add_routes(routes)</span><br></pre></td></tr></table></figure><p>这样，一个点击计数器就完成了。我们试着请求一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> http localhost:5000/hit</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Length: 10</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Date: Sat, 09 Jun 2018 08:37:33 GMT</span><br><span class="line">Server: Python/3.6 aiohttp/3.3.1</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    "hit": 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后每次请求 hit 的值都会 +1。</p><h4 id="对比-1">对比</h4><p>同样，我也编写了一个 flask 版本的点击计数器，在这里只展示一下对比结果：</p><p>aiohttp 版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Running 10s test @ http://localhost:5000/hit</span><br><span class="line">  8 threads and 200 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency    35.83ms    7.18ms  90.80ms   70.37%</span><br><span class="line">    Req/Sec   699.60     86.70     0.92k    68.62%</span><br><span class="line">  Latency Distribution</span><br><span class="line">     50%   35.01ms</span><br><span class="line">     75%   40.39ms</span><br><span class="line">     90%   44.61ms</span><br><span class="line">     99%   58.03ms</span><br><span class="line">  55816 requests in 10.04s, 9.10MB read</span><br><span class="line">Requests/sec:   5559.97</span><br><span class="line">Transfer/sec:      0.91MB</span><br></pre></td></tr></table></figure><p>flask 版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Running 10s test @ http://localhost:5000/hit</span><br><span class="line">  8 threads and 200 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line">    Latency   123.99ms  171.06ms   1.89s    95.32%</span><br><span class="line">    Req/Sec   262.03    163.41   670.00     69.57%</span><br><span class="line">  Latency Distribution</span><br><span class="line">     50%  106.59ms</span><br><span class="line">     75%  156.67ms</span><br><span class="line">     90%  179.60ms</span><br><span class="line">     99%    1.05s</span><br><span class="line">  20484 requests in 10.07s, 3.33MB read</span><br><span class="line">  Socket errors: connect 0, read 19, write 0, timeout 0</span><br><span class="line">Requests/sec:   2033.33</span><br><span class="line">Transfer/sec:    338.51KB</span><br></pre></td></tr></table></figure><p>可以看出增加了 redis 的内存 io 操作后 aiohttp 的领先优势巨大，而 Web 应用大多是重 io 的，可以预见到 asyncio 在未来会占据更重要的地位。</p><h2 id="结语">结语</h2><p>写完这篇，这个系列的文章就到此为止了。整体上 asyncio 仍在继续发展，有越来越多的基础组件已经有了可用的 asyncio 版本，一些大厂已经有转向 asyncio 的趋势了。asyncio 是未来，是一定要了解的~</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;书接上文。&lt;/p&gt;
&lt;h2 id=&quot;使用-aiohttp-作为-web-服务器&quot;&gt;使用 aiohttp 作为 Web 服务器&lt;/h2&gt;
&lt;p&gt;上篇文章中提到，aiohttp 不仅仅是一个 http 客户端，同时也是一个 Web 服务器。在这一节，我们使用
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Redisson 的介绍与使用</title>
    <link href="http://weafteam.github.io/posts/eae731fe/"/>
    <id>http://weafteam.github.io/posts/eae731fe/</id>
    <published>2018-06-04T18:04:44.000Z</published>
    <updated>2018-08-08T11:54:45.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一简介">一、简介</h1><p><img src="https://camo.githubusercontent.com/5664d7af9b355209fac47098d3b51f64c4e265c7/68747470733a2f2f7265646973736f6e2e6f72672f6c6f676f2e706e67" alt="Redisson-1"> Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务。其中包括(BitSet, Set, Multimap, SortedSet, Map, List, Queue, BlockingQueue, Deque, BlockingDeque, Semaphore, Lock, AtomicLong, CountDownLatch, Publish / Subscribe, Bloom filter, Remote service, Spring cache, Executor service, Live Object service, Scheduler service) Redisson提供了使用Redis的最简单和最便捷的方法。Redisson的宗旨是促进使用者对Redis的关注分离（Separation of Concern），从而让使用者能够将精力更集中地放在处理业务逻辑上。</p><h1 id="二分布式锁">二、分布式锁</h1><p>今天也只是就Redisson分布式锁这一部分进行讲解。 在很多时候，一个服务器已经不满足我们对服务性能的要求了，所以我们引进和很多相关的技术，引入了分布式服务的方式，但是这样既带来了方便，其实也带来了问题，多台服务器一起运行相同的代码，一旦两台服务运行了相同的代码，那就要保证服务“<strong>幂等性</strong>”的设计。而且要考虑服务并发带来的可能性问题。</p><p>那么我们现在引入分布式锁的概念，顾名思义，就是使用锁，将我们要紧行操作的对象或者数据加锁。操作后释放锁。使得此时操作这个对象的服务器只有一个（或者说只能对当前对象进行当前拿到锁的操作，拿不到锁的都不允许操作）。这样保证数据的每次操作前后都不会有问题。当然同一个服务器也只能对当前对象进行一个操作。</p><p>其实为了保证这一点，其实还有很多锁，相信大家也知道，乐观锁，悲观锁、表锁、行锁等。</p><h1 id="三具体配置">三、具体配置</h1><p>此文是以SpringBoot为基础来实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.redisson.Redisson;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.redisson.config.Config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ：yaxuSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 11:30 2018/6/30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> by:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissionServiceConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String redisHost;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String redisPort;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String redisPassword;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.database&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer redisDatabase;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"redisson"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redissionConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        config.useSingleServer().setAddress(redisHost + <span class="string">":"</span> + redisPort).setPassword(redisPassword)</span><br><span class="line">            .setDatabase(redisDatabase);</span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四实现与应用">四、实现与应用</h1><p>实现部分 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> xxx.ExceptionCodeEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RLock;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ：yaxuSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 11:30 2018/6/30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> by:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"redissonLockService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedissonLockServiceImpl</span> <span class="keyword">implements</span> <span class="title">LockService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"redisson"</span>)</span><br><span class="line">    <span class="keyword">private</span> RedissonClient redisson;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tryLock(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String key, <span class="keyword">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tryLock(key, timeout, LockService.DEFAULT_EXPIRE_TIME, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String key, <span class="keyword">long</span> waitTime, <span class="keyword">long</span> leaseTime, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RLock lock = redisson.getLock(key);</span><br><span class="line">            <span class="keyword">boolean</span> res = lock.tryLock(waitTime, leaseTime, unit);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            RedissonLockServiceImpl.log.error(<span class="string">"获取redisson锁异常, key is &#123;&#125;, timeout is &#123;&#125;,leaseTime is &#123;&#125;, unit is &#123;&#125;."</span>, key,</span><br><span class="line">                    waitTime, leaseTime, unit, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockException(ExceptionCodeEnum.CACHE_EXCEPTION_LOCK_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        RLock lock = redisson.getLock(key);</span><br><span class="line">        lock.lock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unLock</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RLock lock = redisson.getLock(key);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            RedissonLockServiceImpl.log.error(<span class="string">"redisson解锁失败,key=&#123;&#125;"</span>, key, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>应用 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String lockKey = <span class="string">"xxxx"</span>;</span><br><span class="line">   <span class="keyword">if</span>(!lockService.tryLock(lockKey))&#123;</span><br><span class="line">       log.warn(<span class="string">"current request can't not be locked!"</span>);</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> LockException(code,msg);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">lockService.unLock(lockKey);</span><br></pre></td></tr></table></figure></p><h1 id="五相关问题">五、相关问题</h1><p>大家都知道，如果负责储存这个分布式锁的Redis节点宕机以后，而且这个锁正好处于锁住的状态时，这个锁会出现锁死的状态。为了避免这种情况的发生，Redisson内部提供了一个监控锁的看门狗，它的作用是在Redisson实例被关闭前，不断的延长锁的有效期。默认情况下，看门狗的检查锁的超时时间是30秒钟，也可以通过修改Config.lockWatchdogTimeout来另行指定。</p><p>参考文章 ：<a href="https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95" target="_blank" rel="noopener">https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95</a></p>]]></content>
    
    <summary type="html">
    
      Redisson 的介绍与使用
    
    </summary>
    
      <category term="JAVA" scheme="http://weafteam.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://weafteam.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow实现Siamese Network</title>
    <link href="http://weafteam.github.io/posts/45d29694/"/>
    <id>http://weafteam.github.io/posts/45d29694/</id>
    <published>2018-05-29T03:27:34.000Z</published>
    <updated>2018-09-02T23:53:09.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tensorflow-实现siamese-network">TensorFlow 实现Siamese Network</h1><ol type="1"><li>这次我们来实现一个基于lenet的Siamese Network，大家如果想了解Siamese Network，给大家推荐Andrew NG的课<a href="https://www.coursera.org/learn/convolutional-neural-networks/lecture/bjhmj/siamese-network" target="_blank" rel="noopener">deeplearning.ai</a>作为了解</li><li>接下来我们直接上code：大家也可以直接移步到我的github 仓库里面找代码<a href="https://github.com/Milittle/MLModel/tree/master/siamease_network" target="_blank" rel="noopener">代码</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">代码目录组织结构：</span><br><span class="line">siamese_network</span><br><span class="line">__init__.py</span><br><span class="line">mnist：</span><br><span class="line">__init__.py</span><br><span class="line">train.py</span><br><span class="line">lenet.py</span><br><span class="line">util.py</span><br><span class="line">DataShuffler.py</span><br></pre></td></tr></table></figure><p>train.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2018/5/25 22:16</span></span><br><span class="line"><span class="comment"># @Author  : milittle</span></span><br><span class="line"><span class="comment"># @Site    : www.weaf.top</span></span><br><span class="line"><span class="comment"># @File    : train.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line"><span class="keyword">from</span> siamese_network.mnist <span class="keyword">import</span> util <span class="comment"># 这是外部依赖文件</span></span><br><span class="line"><span class="keyword">from</span> siamese_network.mnist.DataShuffler <span class="keyword">import</span> * <span class="comment">#这是打乱数据文件</span></span><br><span class="line"><span class="keyword">from</span> siamese_network.mnist.lenet <span class="keyword">import</span> Lenet <span class="comment"># 主网络结构</span></span><br><span class="line"></span><br><span class="line">SEED = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_euclidean_distance</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Computes the euclidean distance between two tensorflow variables</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'euclidean_distance'</span>) <span class="keyword">as</span> scope:</span><br><span class="line">        <span class="comment">#d = tf.square(tf.sub(x, y))</span></span><br><span class="line">        <span class="comment">#d = tf.sqrt(tf.reduce_sum(d)) # What about the axis ???</span></span><br><span class="line">        d = tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(x, y)), <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_contrastive_loss</span><span class="params">(left_feature, right_feature, label, margin, is_target_set_train=True)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Compute the contrastive loss as in</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    http://yann.lecun.com/exdb/publis/pdf/hadsell-chopra-lecun-06.pdf</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    L = 0.5 * (Y) * D^2 + 0.5 * (1-Y) * &#123;max(0, margin - D)&#125;^2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    OR MAYBE THAT</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    L = 0.5 * (1-Y) * D^2 + 0.5 * (Y) * &#123;max(0, margin - D)&#125;^2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    **Parameters**</span></span><br><span class="line"><span class="string">     left_feature: First element of the pair</span></span><br><span class="line"><span class="string">     right_feature: Second element of the pair</span></span><br><span class="line"><span class="string">     label: Label of the pair (0 or 1)</span></span><br><span class="line"><span class="string">     margin: Contrastive margin</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    **Returns**</span></span><br><span class="line"><span class="string">     Return the loss operation</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">"contrastive_loss"</span>):</span><br><span class="line">        label = tf.to_float(label)</span><br><span class="line">        one = tf.constant(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">        d = compute_euclidean_distance(left_feature, right_feature)</span><br><span class="line"></span><br><span class="line">        d_sqrt = tf.sqrt(d)</span><br><span class="line"></span><br><span class="line">        loss = label * tf.square(tf.maximum(<span class="number">0.</span>, margin - d_sqrt)) + (<span class="number">1</span> - label) * d</span><br><span class="line"></span><br><span class="line">        loss = <span class="number">0.5</span> * tf.reduce_mean(loss)</span><br><span class="line">        <span class="comment"># #first_part = tf.mul(one - label, tf.square(d))  # (Y-1)*(d^2)</span></span><br><span class="line">        <span class="comment"># #first_part = tf.mul(label, tf.square(d))  # (Y-1)*(d^2)</span></span><br><span class="line">        <span class="comment"># between_class = tf.exp(tf.multiply(one-label, tf.square(d)))  # (1-Y)*(d^2)</span></span><br><span class="line">        <span class="comment"># max_part = tf.square(tf.maximum(margin-d, 0))</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># within_class = tf.multiply(label, max_part)  # (Y) * max((margin - d)^2, 0)</span></span><br><span class="line">        <span class="comment"># #second_part = tf.mul(one-label, max_part)  # (Y) * max((margin - d)^2, 0)</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># loss = 0.5 * tf.reduce_mean(within_class + between_class)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># return loss, tf.reduce_mean(within_class), tf.reduce_mean(between_class)</span></span><br><span class="line">        <span class="keyword">return</span> loss</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_contrastive_loss_andre</span><span class="params">(left_feature, right_feature, label, margin, is_target_set_train=True)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Compute the contrastive loss as in</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    https://gitlab.idiap.ch/biometric/xfacereclib.cnn/blob/master/xfacereclib/cnn/scripts/experiment.py#L156</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    With Y = [-1 +1] --&gt; [POSITIVE_PAIR NEGATIVE_PAIR]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    L = log( m + exp( Y * d^2)) / N</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    **Parameters**</span></span><br><span class="line"><span class="string">     left_feature: First element of the pair</span></span><br><span class="line"><span class="string">     right_feature: Second element of the pair</span></span><br><span class="line"><span class="string">     label: Label of the pair (0 or 1)</span></span><br><span class="line"><span class="string">     margin: Contrastive margin</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    **Returns**</span></span><br><span class="line"><span class="string">     Return the loss operation</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">"contrastive_loss_andre"</span>):</span><br><span class="line">        label = tf.to_float(label)</span><br><span class="line">        d = compute_euclidean_distance(left_feature, right_feature)</span><br><span class="line"></span><br><span class="line">        loss = tf.log(tf.exp(tf.multiply(label, d)))</span><br><span class="line">        loss = tf.reduce_mean(loss)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Within class part</span></span><br><span class="line">        genuine_factor = tf.multiply(label<span class="number">-1</span>, <span class="number">0.5</span>)</span><br><span class="line">        within_class = tf.reduce_mean(tf.log(tf.exp(tf.multiply(genuine_factor, d))))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Between class part</span></span><br><span class="line">        impostor_factor = tf.multiply(label + <span class="number">1</span>, <span class="number">0.5</span>)</span><br><span class="line">        between_class = tf.reduce_mean(tf.log(tf.exp(tf.multiply(impostor_factor, d))))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># first_part = tf.mul(one - label, tf.square(d))  # (Y-1)*(d^2)</span></span><br><span class="line">        <span class="keyword">return</span> loss, between_class, within_class</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    BATCH_SIZE = <span class="number">128</span></span><br><span class="line">    BATCH_SIZE_TEST = <span class="number">128</span></span><br><span class="line">    <span class="comment">#BATCH_SIZE_TEST = 300</span></span><br><span class="line">    ITERATIONS = <span class="number">10000</span></span><br><span class="line">    VALIDATION_TEST = <span class="number">100</span></span><br><span class="line">    perc_train = <span class="number">0.9</span></span><br><span class="line">    CONTRASTIVE_MARGIN = <span class="number">1</span></span><br><span class="line">    USE_GPU = <span class="keyword">True</span></span><br><span class="line">    ANDRE_LOSS = <span class="keyword">False</span></span><br><span class="line">    LOG_NAME = <span class="string">'logs'</span></span><br><span class="line"></span><br><span class="line">    train_data, train_labels, test_data, test_labels = util.load_mnist()</span><br><span class="line"></span><br><span class="line">    data = np.concatenate((train_data, test_data), axis=<span class="number">0</span>)</span><br><span class="line">    label = np.concatenate((train_labels, test_labels), axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    data_shuffler = DataShuffler(train_data, train_labels, scale=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Creating the variables</span></span><br><span class="line">    lenet_architecture = Lenet(seed=SEED, use_gpu=USE_GPU)</span><br><span class="line">    <span class="comment"># Siamese place holders - Training</span></span><br><span class="line">    train_left_data = tf.placeholder(tf.float32, shape=(BATCH_SIZE*<span class="number">2</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>), name=<span class="string">"left"</span>)</span><br><span class="line">    train_right_data = tf.placeholder(tf.float32, shape=(BATCH_SIZE*<span class="number">2</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>), name=<span class="string">"right"</span>)</span><br><span class="line">    labels_data = tf.placeholder(tf.int32, shape=BATCH_SIZE*<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># Creating the graphs for training</span></span><br><span class="line">    lenet_train_left = lenet_architecture.create_lenet(train_left_data)</span><br><span class="line">    lenet_train_right = lenet_architecture.create_lenet(train_right_data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Siamese place holders - Validation</span></span><br><span class="line">    validation_data = tf.placeholder(tf.float32, shape=(data_shuffler.validation_data.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>), name=<span class="string">"validation"</span>)</span><br><span class="line">    labels_data_validation = tf.placeholder(tf.int32, shape=BATCH_SIZE_TEST)</span><br><span class="line">    <span class="comment"># Creating the graphs for validation</span></span><br><span class="line">    lenet_validation = lenet_architecture.create_lenet(validation_data, train=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ANDRE_LOSS:</span><br><span class="line">        loss, between_class, within_class = compute_contrastive_loss_andre(lenet_train_left, lenet_train_right, labels_data, CONTRASTIVE_MARGIN)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># Regular contrastive loss</span></span><br><span class="line">        loss = compute_contrastive_loss(lenet_train_left, lenet_train_right, labels_data, CONTRASTIVE_MARGIN)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    distances = compute_euclidean_distance(lenet_train_left, lenet_train_right)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#regularizer = (tf.nn.l2_loss(lenet_architecture.W_fc1) + tf.nn.l2_loss(lenet_architecture.b_fc1) +</span></span><br><span class="line">    <span class="comment">#                tf.nn.l2_loss(lenet_architecture.W_fc2) + tf.nn.l2_loss(lenet_architecture.b_fc2))</span></span><br><span class="line">    <span class="comment">#loss += 5e-4 * regularizer</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Defining training parameters</span></span><br><span class="line">    batch = tf.Variable(<span class="number">0</span>)</span><br><span class="line">    learning_rate = tf.train.exponential_decay(</span><br><span class="line">        <span class="number">0.01</span>, <span class="comment"># Learning rate</span></span><br><span class="line">        batch * BATCH_SIZE,</span><br><span class="line">        data_shuffler.train_data.shape[<span class="number">0</span>],</span><br><span class="line">        <span class="number">0.95</span> <span class="comment"># Decay step</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">#optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=batch)</span></span><br><span class="line">    optimizer = tf.train.AdamOptimizer(<span class="number">0.01</span>, name=<span class="string">'Adam'</span>).minimize(loss, global_step=batch)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pp = PdfPages("groups.pdf")</span></span><br><span class="line">    <span class="comment"># Training</span></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> session:</span><br><span class="line"></span><br><span class="line">        <span class="comment">#Trying to write things on tensor board</span></span><br><span class="line">        train_writer = tf.summary.FileWriter(LOG_NAME + <span class="string">'/train'</span>,</span><br><span class="line">                                              session.graph)</span><br><span class="line"></span><br><span class="line">        test_writer = tf.summary.FileWriter(LOG_NAME + <span class="string">'/test'</span>,</span><br><span class="line">                                              session.graph)</span><br><span class="line"></span><br><span class="line">        tf.summary.scalar(<span class="string">'loss'</span>, loss)</span><br><span class="line">        <span class="comment"># tf.summary.scalar('between_class', between_class)</span></span><br><span class="line">        <span class="comment"># tf.summary.scalar('within_class', within_class)</span></span><br><span class="line">        tf.summary.scalar(<span class="string">'lr'</span>, learning_rate)</span><br><span class="line">        merged = tf.summary.merge_all()</span><br><span class="line"></span><br><span class="line">        init = tf.global_variables_initializer()</span><br><span class="line">        session.run(init)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> step <span class="keyword">in</span> range(ITERATIONS+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">            batch_left, batch_right, labels = data_shuffler.get_pair(BATCH_SIZE, zero_one_labels=<span class="keyword">not</span> ANDRE_LOSS)</span><br><span class="line"></span><br><span class="line">            feed_dict = &#123;train_left_data: batch_left,</span><br><span class="line">                         train_right_data: batch_right,</span><br><span class="line">                         labels_data: labels&#125;</span><br><span class="line"></span><br><span class="line">            _, l, lr, summary = session.run([optimizer, loss, learning_rate, merged], feed_dict=feed_dict)</span><br><span class="line">            train_writer.add_summary(summary, step)</span><br><span class="line"></span><br><span class="line">            print(<span class="string">"Step &#123;0&#125;. Loss Validation = &#123;1&#125;"</span>.</span><br><span class="line">                  format(step, l))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> step % VALIDATION_TEST == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Siamese validation</span></span><br><span class="line">                batch_left, batch_right, labels = data_shuffler.get_pair(n_pair=BATCH_SIZE_TEST,</span><br><span class="line">                                                                         is_target_set_train=<span class="keyword">False</span>,</span><br><span class="line">                                                                         zero_one_labels=<span class="keyword">not</span> ANDRE_LOSS)</span><br><span class="line">                feed_dict = &#123;train_left_data: batch_left,</span><br><span class="line">                             train_right_data: batch_right,</span><br><span class="line">                             labels_data: labels&#125;</span><br><span class="line"></span><br><span class="line">                d, lv, summary = session.run([distances, loss, merged], feed_dict=feed_dict)</span><br><span class="line">                test_writer.add_summary(summary, step)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">###################################</span></span><br><span class="line">                <span class="comment"># Siamese as a feature extractor</span></span><br><span class="line">                <span class="comment">###################################</span></span><br><span class="line">                batch_train_data, batch_train_labels = data_shuffler.get_batch(</span><br><span class="line">                    data_shuffler.validation_data.shape[<span class="number">0</span>],</span><br><span class="line">                    train_dataset=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">                features_train = session.run(lenet_validation,</span><br><span class="line">                                             feed_dict=&#123;validation_data: batch_train_data[:]&#125;)</span><br><span class="line"></span><br><span class="line">                batch_validation_data, batch_validation_labels = data_shuffler.get_batch(</span><br><span class="line">                    data_shuffler.validation_data.shape[<span class="number">0</span>],</span><br><span class="line">                    train_dataset=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">                features_validation = session.run(lenet_validation,</span><br><span class="line">                                                  feed_dict=&#123;validation_data: batch_validation_data[:]&#125;)</span><br><span class="line"></span><br><span class="line">                acc = util.compute_accuracy(features_train, batch_train_labels, features_validation, batch_validation_labels, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">                print(<span class="string">"Step &#123;0&#125;. Loss Validation = &#123;1&#125;, acc = &#123;2&#125;"</span>.</span><br><span class="line">                      format(step, lv, acc))</span><br><span class="line"></span><br><span class="line">                <span class="comment"># fig = util.plot_embedding_lda(features_validation, batch_validation_labels)</span></span><br><span class="line">                <span class="comment"># pp.savefig(fig)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">#if ANDRE_LOSS:</span></span><br><span class="line">                <span class="comment">#    positive_scores = d[numpy.where(labels == -1)[0]].astype("float")</span></span><br><span class="line">                <span class="comment">#    negative_scores = d[numpy.where(labels == 1)[0]].astype("float")</span></span><br><span class="line">                <span class="comment">#else:</span></span><br><span class="line">                <span class="comment">#    positive_scores = d[numpy.where(labels == 1)[0]].astype("float")</span></span><br><span class="line">                <span class="comment">#    negative_scores = d[numpy.where(labels == 0)[0]].astype("float")</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">#threshold = bob.measure.eer_threshold(negative_scores, positive_scores)</span></span><br><span class="line">                <span class="comment">#far, frr = bob.measure.farfrr(negative_scores, positive_scores, threshold)</span></span><br><span class="line">                <span class="comment">#eer = ((far + frr) / 2.) * 100.</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">"End !!"</span>)</span><br><span class="line">        train_writer.close()</span><br><span class="line">        test_writer.close()</span><br><span class="line">        <span class="comment"># pp.close()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>lenet.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># vim: set fileencoding=utf-8 :</span></span><br><span class="line"><span class="comment"># @author: Tiago de Freitas Pereira &lt;tiago.pereira@idiap.ch&gt;</span></span><br><span class="line"><span class="comment"># @date: Wed 11 May 2016 09:39:36 CEST </span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Class that creates the lenet architecture</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> siameasenetwork.mnist.util <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lenet</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,</span></span></span><br><span class="line"><span class="function"><span class="params">                 conv1_kernel_size=<span class="number">5</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 conv1_output=<span class="number">16</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">                 conv2_kernel_size=<span class="number">5</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 conv2_output=<span class="number">32</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">                 fc1_output=<span class="number">400</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 n_classes=<span class="number">10</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">                 seed=<span class="number">10</span>, use_gpu = False)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Create all the necessary variables for this CNN</span></span><br><span class="line"><span class="string">        **Parameters**</span></span><br><span class="line"><span class="string">            conv1_kernel_size=5,</span></span><br><span class="line"><span class="string">            conv1_output=32,</span></span><br><span class="line"><span class="string">            conv2_kernel_size=5,</span></span><br><span class="line"><span class="string">            conv2_output=64,</span></span><br><span class="line"><span class="string">            fc1_output=400,</span></span><br><span class="line"><span class="string">            n_classes=10</span></span><br><span class="line"><span class="string">            seed = 10</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># First convolutional</span></span><br><span class="line">        self.W_conv1 = create_weight_variables([conv1_kernel_size, conv1_kernel_size, <span class="number">1</span>, conv1_output], seed=seed, name=<span class="string">"W_conv1"</span>, use_gpu=use_gpu)</span><br><span class="line">        self.b_conv1 = create_bias_variables([conv1_output], name=<span class="string">"bias_conv1"</span>, use_gpu=use_gpu)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Second convolutional</span></span><br><span class="line">        self.W_conv2 = create_weight_variables([conv2_kernel_size, conv2_kernel_size, conv1_output, conv2_output], seed=seed, name=<span class="string">"W_conv2"</span>, use_gpu=use_gpu)</span><br><span class="line">        self.b_conv2 = create_bias_variables([conv2_output], name=<span class="string">"bias_conv2"</span>, use_gpu=use_gpu)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># First fc</span></span><br><span class="line">        self.W_fc1 = create_weight_variables([(<span class="number">28</span> // <span class="number">4</span>) * (<span class="number">28</span> // <span class="number">4</span>) * conv2_output, fc1_output], seed=seed, name=<span class="string">"W_fc1"</span>, use_gpu=use_gpu)</span><br><span class="line">        self.b_fc1 = create_bias_variables([fc1_output], name=<span class="string">"bias_fc1"</span>, use_gpu=use_gpu)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Second FC fc</span></span><br><span class="line">        self.W_fc2 = create_weight_variables([fc1_output, n_classes], seed=seed, name=<span class="string">"W_fc2"</span>, use_gpu=use_gpu)</span><br><span class="line">        self.b_fc2 = create_bias_variables([n_classes], name=<span class="string">"bias_fc2"</span>, use_gpu=use_gpu)</span><br><span class="line"></span><br><span class="line">        self.seed = seed</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_lenet</span><span class="params">(self, data, train=True)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Create the Lenet Architecture</span></span><br><span class="line"><span class="string">        **Parameters**</span></span><br><span class="line"><span class="string">          data: Input data</span></span><br><span class="line"><span class="string">          train:</span></span><br><span class="line"><span class="string">        **Returns</span></span><br><span class="line"><span class="string">          features_back: Features for backpropagation</span></span><br><span class="line"><span class="string">          features_val: Features for validation</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Creating the architecture</span></span><br><span class="line">        <span class="comment"># First convolutional</span></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'conv_1'</span>) <span class="keyword">as</span> scope:</span><br><span class="line">            conv1 = create_conv2d(data, self.W_conv1)</span><br><span class="line">        <span class="comment"># relu1 = create_relu(conv1, self.b_conv1)</span></span><br><span class="line">        <span class="comment"># relu1 = create_sigmoid(conv1, self.b_conv1)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'tanh_1'</span>) <span class="keyword">as</span> scope:</span><br><span class="line">            tanh_1 = create_tanh(conv1, self.b_conv1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Pooling</span></span><br><span class="line">        <span class="comment"># pool1 = create_max_pool(relu1)</span></span><br><span class="line">        <span class="comment"># pool1 = create_max_pool(relu1)</span></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'pool_1'</span>) <span class="keyword">as</span> scope:</span><br><span class="line">            pool1 = create_max_pool(tanh_1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Second convolutional</span></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'conv_2'</span>) <span class="keyword">as</span> scope:</span><br><span class="line">            conv2 = create_conv2d(pool1, self.W_conv2)</span><br><span class="line">        <span class="comment"># relu2 = create_relu(conv2, self.b_conv2)</span></span><br><span class="line">        <span class="comment"># relu2 = create_sigmoid(conv2, self.b_conv2)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'tanh_2'</span>) <span class="keyword">as</span> scope:</span><br><span class="line">            <span class="comment"># pool2 = create_max_pool(relu2)</span></span><br><span class="line">            <span class="comment">#tanh_2 = create_relu(conv2, self.b_conv2)</span></span><br><span class="line">            <span class="comment"># pool2 = create_max_pool(conv2)</span></span><br><span class="line">            tanh_2 = create_tanh(conv2, self.b_conv2)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Pooling</span></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'pool_2'</span>) <span class="keyword">as</span> scope:</span><br><span class="line">            pool2 = create_max_pool(tanh_2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#if train:</span></span><br><span class="line">            <span class="comment">#pool2 = tf.nn.dropout(pool2, 0.5, seed=self.seed)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Reshaping all the convolved images to 2D to feed the FC layers</span></span><br><span class="line">        <span class="comment"># FC1</span></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'fc_1'</span>) <span class="keyword">as</span> scope:</span><br><span class="line">            pool_shape = pool2.get_shape().as_list()</span><br><span class="line">            reshape = tf.reshape(pool2, [pool_shape[<span class="number">0</span>], pool_shape[<span class="number">1</span>] * pool_shape[<span class="number">2</span>] * pool_shape[<span class="number">3</span>]])</span><br><span class="line">            <span class="comment">#fc1 = tf.nn.relu(tf.matmul(reshape, self.W_fc1) + self.b_fc1)</span></span><br><span class="line">            fc1 = tf.nn.tanh(tf.matmul(reshape, self.W_fc1) + self.b_fc1)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#if train:</span></span><br><span class="line">            <span class="comment">#fc1 = tf.nn.dropout(fc1, 0.5, seed=self.seed)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># FC2</span></span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'fc_2'</span>) <span class="keyword">as</span> scope:</span><br><span class="line">            fc2 = tf.matmul(fc1, self.W_fc2) + self.b_fc2</span><br><span class="line">            <span class="comment">#fc2 = tf.nn.softmax(tf.matmul(fc1, self.W_fc2) + self.b_fc2)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> fc2</span><br></pre></td></tr></table></figure><p>util.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># vim: set fileencoding=utf-8 :</span></span><br><span class="line"><span class="comment"># @author: Tiago de Freitas Pereira &lt;tiago.pereira@idiap.ch&gt;</span></span><br><span class="line"><span class="comment"># @date: Wed 11 May 2016 09:39:36 CEST </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">numpy.random.seed(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_weight_variables</span><span class="params">(shape, seed, name, use_gpu=False)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Create gaussian random neurons with mean 0 and std 0.1</span></span><br><span class="line"><span class="string">    **Paramters**</span></span><br><span class="line"><span class="string">      shape: Shape of the layer</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#import ipdb; ipdb.set_trace()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(shape) == <span class="number">4</span>:</span><br><span class="line">        in_out = shape[<span class="number">0</span>] * shape[<span class="number">1</span>] * shape[<span class="number">2</span>] + shape[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        in_out = shape[<span class="number">0</span>] + shape[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> math</span><br><span class="line">    stddev = math.sqrt(<span class="number">3.0</span> / in_out) <span class="comment"># XAVIER INITIALIZER (GAUSSIAN)</span></span><br><span class="line"></span><br><span class="line">    initializer = tf.truncated_normal(shape, stddev=stddev, seed=seed)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> use_gpu:</span><br><span class="line">        <span class="keyword">with</span> tf.device(<span class="string">"/gpu"</span>):</span><br><span class="line">            <span class="keyword">return</span> tf.get_variable(name, initializer=initializer, dtype=tf.float32)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> tf.device(<span class="string">"/cpu"</span>):</span><br><span class="line">            <span class="keyword">return</span> tf.get_variable(name, initializer=initializer, dtype=tf.float32)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_bias_variables</span><span class="params">(shape, name, use_gpu=False)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Create the bias term</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    initializer = tf.constant(<span class="number">0.1</span>, shape=shape)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> use_gpu:</span><br><span class="line">        <span class="keyword">with</span> tf.device(<span class="string">"/gpu"</span>):</span><br><span class="line">            <span class="keyword">return</span> tf.get_variable(name, initializer=initializer, dtype=tf.float32)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> tf.device(<span class="string">"/cpu"</span>):</span><br><span class="line">            <span class="keyword">return</span> tf.get_variable(name, initializer=initializer, dtype=tf.float32)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_conv2d</span><span class="params">(x, W)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Create a convolutional kernel with 1 pixel of stride</span></span><br><span class="line"><span class="string">    **Parameters**</span></span><br><span class="line"><span class="string">        x: input layer</span></span><br><span class="line"><span class="string">        W: Neurons</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.conv2d(x, W, strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_max_pool</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Create max pooling using a patch of 2x2</span></span><br><span class="line"><span class="string">    **Parameters**</span></span><br><span class="line"><span class="string">        x: input layer</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> tf.nn.max_pool(x, ksize=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">'SAME'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tanh</span><span class="params">(x, bias)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Create the Tanh activations</span></span><br><span class="line"><span class="string">    **Parameters**</span></span><br><span class="line"><span class="string">        x: input layer</span></span><br><span class="line"><span class="string">        bias: bias term</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tf.nn.tanh(tf.nn.bias_add(x, bias))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_relu</span><span class="params">(x, bias)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Create the ReLU activations</span></span><br><span class="line"><span class="string">    **Parameters**</span></span><br><span class="line"><span class="string">        x: input layer</span></span><br><span class="line"><span class="string">        bias: bias term</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tf.nn.relu(tf.nn.bias_add(x, bias))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_sigmoid</span><span class="params">(x, bias)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Create the Sigmoid activations</span></span><br><span class="line"><span class="string">    **Parameters**</span></span><br><span class="line"><span class="string">        x: input layer</span></span><br><span class="line"><span class="string">        bias: bias term</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tf.nn.sigmoid(tf.nn.bias_add(x, bias))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scale_mean_norm</span><span class="params">(data, scale=<span class="number">0.00390625</span>)</span>:</span></span><br><span class="line">    mean = numpy.mean(data)</span><br><span class="line">    data = (data - mean) * scale</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_softmax</span><span class="params">(data, labels, session, network, data_node)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Evaluate the network assuming that the output layer is a softmax</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    predictions = numpy.argmax(session.run(</span><br><span class="line">        network,</span><br><span class="line">        feed_dict=&#123;data_node: data[:]&#125;), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">100.</span> * numpy.sum(predictions == labels) / predictions.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_mnist</span><span class="params">()</span>:</span></span><br><span class="line">    mnist_data = input_data.read_data_sets(<span class="string">"MNIST_data/"</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line">    train_data = mnist_data.train.images</span><br><span class="line">    test_data = mnist_data.test.images</span><br><span class="line">    train_labels = mnist_data.train.labels</span><br><span class="line">    test_labels = mnist_data.test.labels</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> train_data, train_labels, test_data, test_labels</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_embedding_pca</span><span class="params">(features, labels)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Trains a PCA using bob, reducing the features to dimension 2 and plot it the possible clusters</span></span><br><span class="line"><span class="string">    :param features:</span></span><br><span class="line"><span class="string">    :param labels:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> bob.learn.linear</span><br><span class="line">    <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mpl</span><br><span class="line"></span><br><span class="line">    colors = [<span class="string">'#FF0000'</span>, <span class="string">'#FFFF00'</span>, <span class="string">'#FF00FF'</span>, <span class="string">'#00FFFF'</span>, <span class="string">'#000000'</span>,</span><br><span class="line">             <span class="string">'#AA0000'</span>, <span class="string">'#AAAA00'</span>, <span class="string">'#AA00AA'</span>, <span class="string">'#00AAAA'</span>, <span class="string">'#330000'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Training PCA</span></span><br><span class="line">    trainer = bob.learn.linear.PCATrainer()</span><br><span class="line">    machine, lamb = trainer.train(features.astype(<span class="string">"float64"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Getting the first two most relevant features</span></span><br><span class="line">    projected_features = machine(features.astype(<span class="string">"float64"</span>))[:, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plotting the classes</span></span><br><span class="line">    n_classes = max(labels)+<span class="number">1</span></span><br><span class="line">    fig = mpl.figure()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_classes):</span><br><span class="line">        indexes = numpy.where(labels == i)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        selected_features = projected_features[indexes,:]</span><br><span class="line">        mpl.scatter(selected_features[:, <span class="number">0</span>], selected_features[:, <span class="number">1</span>],</span><br><span class="line">                 marker=<span class="string">'.'</span>, c=colors[i], linewidths=<span class="number">0</span>, label=str(i))</span><br><span class="line">    mpl.legend()</span><br><span class="line">    <span class="keyword">return</span> fig</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_embedding_lda</span><span class="params">(features, labels)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Trains a LDA using bob, reducing the features to dimension 2 and plot it the possible clusters</span></span><br><span class="line"><span class="string">    :param features:</span></span><br><span class="line"><span class="string">    :param labels:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> bob.learn.linear</span><br><span class="line">    <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> mpl</span><br><span class="line"></span><br><span class="line">    colors = [<span class="string">'#FF0000'</span>, <span class="string">'#FFFF00'</span>, <span class="string">'#FF00FF'</span>, <span class="string">'#00FFFF'</span>, <span class="string">'#000000'</span>,</span><br><span class="line">             <span class="string">'#AA0000'</span>, <span class="string">'#AAAA00'</span>, <span class="string">'#AA00AA'</span>, <span class="string">'#00AAAA'</span>, <span class="string">'#330000'</span>]</span><br><span class="line">    n_classes = max(labels)+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Training PCA</span></span><br><span class="line">    trainer = bob.learn.linear.FisherLDATrainer(use_pinv=<span class="keyword">True</span>)</span><br><span class="line">    lda_features = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_classes):</span><br><span class="line">        indexes = numpy.where(labels == i)[<span class="number">0</span>]</span><br><span class="line">        lda_features.append(features[indexes, :].astype(<span class="string">"float64"</span>))</span><br><span class="line"></span><br><span class="line">    machine, lamb = trainer.train(lda_features)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#import ipdb; ipdb.set_trace();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Getting the first two most relevant features</span></span><br><span class="line">    projected_features = machine(features.astype(<span class="string">"float64"</span>))[:, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plotting the classes</span></span><br><span class="line">    fig = mpl.figure()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_classes):</span><br><span class="line">        indexes = numpy.where(labels == i)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        selected_features = projected_features[indexes,:]</span><br><span class="line">        mpl.scatter(selected_features[:, <span class="number">0</span>], selected_features[:, <span class="number">1</span>],</span><br><span class="line">                 marker=<span class="string">'.'</span>, c=colors[i], linewidths=<span class="number">0</span>, label=str(i))</span><br><span class="line">    mpl.legend()</span><br><span class="line">    <span class="keyword">return</span> fig</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_eer</span><span class="params">(data_train, labels_train, data_validation, labels_validation, n_classes)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> scipy.spatial.distance <span class="keyword">import</span> cosine</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Creating client models</span></span><br><span class="line">    models = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_classes):</span><br><span class="line">        labels_num = numpy.argmax(labels_train, axis=<span class="number">1</span>)</span><br><span class="line">        indexes = numpy.where(labels_num == i)</span><br><span class="line">        models.append(numpy.mean(data_train[indexes, :], axis=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Probing</span></span><br><span class="line">    positive_scores = numpy.zeros(shape=<span class="number">0</span>)</span><br><span class="line">    negative_scores = numpy.zeros(shape=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_classes):</span><br><span class="line">        <span class="comment"># Positive scoring</span></span><br><span class="line">        val_num = numpy.argmax(labels_validation)</span><br><span class="line">        indexes = numpy.where(val_num == i)</span><br><span class="line">        positive_data = data_validation[indexes, :]</span><br><span class="line">        p = [cosine(models[i], positive_data[j]) <span class="keyword">for</span> j <span class="keyword">in</span> range(positive_data.shape[<span class="number">0</span>])]</span><br><span class="line">        positive_scores = numpy.hstack((positive_scores, p))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># negative scoring</span></span><br><span class="line">        indexes = numpy.where(val_num != i)</span><br><span class="line">        negative_data = data_validation[indexes, :]</span><br><span class="line">        n = [cosine(models[i], negative_data[j]) <span class="keyword">for</span> j <span class="keyword">in</span> range(negative_data.shape[<span class="number">0</span>])]</span><br><span class="line">        negative_scores = numpy.hstack((negative_scores, n))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Computing performance based on EER</span></span><br><span class="line">    negative_scores = (<span class="number">-1</span>) * negative_scores</span><br><span class="line">    positive_scores = (<span class="number">-1</span>) * positive_scores</span><br><span class="line"></span><br><span class="line">    <span class="comment"># threshold = bob.measure.eer_threshold(negative_scores, positive_scores)</span></span><br><span class="line">    <span class="comment"># far, frr = bob.measure.farfrr(negative_scores, positive_scores, threshold)</span></span><br><span class="line">    <span class="comment"># eer = (far + frr) / 2.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> negative_scores, positive_scores</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_accuracy</span><span class="params">(data_train, labels_train, data_validation, labels_validation, n_classes)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> scipy.spatial.distance <span class="keyword">import</span> cosine</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Creating client models</span></span><br><span class="line">    models = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n_classes):</span><br><span class="line">        index = numpy.argmax(labels_train, axis=<span class="number">1</span>)</span><br><span class="line">        indexes = numpy.where(index == i)[<span class="number">0</span>]</span><br><span class="line">        data_t = [data_train[i] <span class="keyword">for</span> i <span class="keyword">in</span> indexes]</span><br><span class="line">        models.append(numpy.mean(data_t, axis=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Probing</span></span><br><span class="line">    tp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(data_validation.shape[<span class="number">0</span>]):</span><br><span class="line"></span><br><span class="line">        d = data_validation[i,:]</span><br><span class="line">        l = labels_validation[i]</span><br><span class="line"></span><br><span class="line">        scores = [cosine(m, d) <span class="keyword">for</span> m <span class="keyword">in</span> models]</span><br><span class="line">        predict = numpy.argmin(scores)</span><br><span class="line"></span><br><span class="line">        ll = numpy.argmax(l, axis=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> predict == ll:</span><br><span class="line">            tp += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (float(tp) / data_validation.shape[<span class="number">0</span>]) * <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_acc</span><span class="params">(data_val, labels_val)</span>:</span></span><br><span class="line">    tp = <span class="number">0</span></span><br><span class="line">    data_size = data_val.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(data_size):</span><br><span class="line">        index = numpy.argmax(data_val[i])</span><br><span class="line">        <span class="keyword">if</span> index == numpy.argmax(labels_val[i]):</span><br><span class="line">            tp += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (float(tp) / data_size)</span><br></pre></td></tr></table></figure><p>DataShuffler.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># vim: set fileencoding=utf-8 :</span></span><br><span class="line"><span class="comment"># @author: Tiago de Freitas Pereira &lt;tiago.pereira@idiap.ch&gt;</span></span><br><span class="line"><span class="comment"># @date: Wed 11 May 2016 09:39:36 CEST </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scale_mean_norm</span><span class="params">(data, scale=<span class="number">0.00390625</span>)</span>:</span></span><br><span class="line">    mean = numpy.mean(data)</span><br><span class="line">    data = (data - mean) * scale</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data, mean</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Data</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataShuffler</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, labels, perc_train=<span class="number">0.9</span>, scale=True)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">         Some base functions for neural networks</span></span><br><span class="line"><span class="string">         **Parameters**</span></span><br><span class="line"><span class="string">           data:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        scale_value = <span class="number">0.00390625</span></span><br><span class="line"></span><br><span class="line">        total_samples = data.shape[<span class="number">0</span>] <span class="comment">#总共的样本数量</span></span><br><span class="line"></span><br><span class="line">        indexes = numpy.array(range(total_samples))</span><br><span class="line">        numpy.random.shuffle(indexes)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Spliting train and validation</span></span><br><span class="line">        train_samples = int(round(total_samples * perc_train)) <span class="comment">#训练样本数目</span></span><br><span class="line">        validation_samples = total_samples - train_samples <span class="comment">#验证集样本数目</span></span><br><span class="line">        data = numpy.reshape(data, (data.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)) <span class="comment">#所有输入样本</span></span><br><span class="line"></span><br><span class="line">        self.train_data = data[indexes[<span class="number">0</span>:train_samples], :, :, :] <span class="comment"># 训练样本</span></span><br><span class="line">        self.train_labels = labels[indexes[<span class="number">0</span>:train_samples]] <span class="comment"># 训练labels</span></span><br><span class="line"></span><br><span class="line">        self.validation_data = data[indexes[train_samples:train_samples + validation_samples], :, :, :]</span><br><span class="line">        self.validation_labels = labels[indexes[train_samples:train_samples + validation_samples]]</span><br><span class="line">        self.total_labels = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> scale:</span><br><span class="line">            <span class="comment"># data = scale_minmax_norm(data,lower_bound = -1, upper_bound = 1)</span></span><br><span class="line">            self.train_data, self.mean = scale_mean_norm(self.train_data)</span><br><span class="line">            self.validation_data = (self.validation_data - self.mean) * scale_value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_batch</span><span class="params">(self, n_samples, train_dataset=True)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> train_dataset:</span><br><span class="line">            data = self.train_data</span><br><span class="line">            label = self.train_labels</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data = self.validation_data</span><br><span class="line">            label = self.validation_labels</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Shuffling samples</span></span><br><span class="line">        indexes = numpy.array(range(data.shape[<span class="number">0</span>]))</span><br><span class="line">        numpy.random.shuffle(indexes)</span><br><span class="line"></span><br><span class="line">        selected_data = data[indexes[<span class="number">0</span>:n_samples], :, :, :]</span><br><span class="line">        selected_labels = label[indexes[<span class="number">0</span>:n_samples]]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> selected_data.astype(<span class="string">"float32"</span>), selected_labels</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_pair</span><span class="params">(self, n_pair=<span class="number">1</span>, is_target_set_train=True, zero_one_labels=True)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Get a random pair of samples</span></span><br><span class="line"><span class="string">        **Parameters**</span></span><br><span class="line"><span class="string">            is_target_set_train: Defining the target set to get the batch</span></span><br><span class="line"><span class="string">        **Return**</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_genuine_or_not</span><span class="params">(input_data, input_labels, genuine=True)</span>:</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> genuine:</span><br><span class="line">                <span class="comment"># <span class="doctag">TODO:</span> THIS KEY SELECTION NEEDS TO BE MORE EFFICIENT</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># Getting a client</span></span><br><span class="line">                index = numpy.random.randint(self.total_labels)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Getting the indexes of the data from a particular client</span></span><br><span class="line">                arg_max = numpy.argmax(input_labels, axis=<span class="number">1</span>)</span><br><span class="line">                indexes = numpy.where(arg_max == index)[<span class="number">0</span>]</span><br><span class="line">                numpy.random.shuffle(indexes)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Picking a pair</span></span><br><span class="line">                data = input_data[indexes[<span class="number">0</span>], :, :, :]</span><br><span class="line">                data_p = input_data[indexes[<span class="number">1</span>], :, :, :]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># Picking a pair from different clients</span></span><br><span class="line">                index = numpy.random.choice(self.total_labels, <span class="number">2</span>, replace=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Getting the indexes of the two clients</span></span><br><span class="line">                arg_max = numpy.argmax(input_labels, axis=<span class="number">1</span>)</span><br><span class="line">                indexes = numpy.where(arg_max == index[<span class="number">0</span>])[<span class="number">0</span>]</span><br><span class="line">                indexes_p = numpy.where(arg_max == index[<span class="number">1</span>])[<span class="number">0</span>]</span><br><span class="line">                numpy.random.shuffle(indexes)</span><br><span class="line">                numpy.random.shuffle(indexes_p)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Picking a pair</span></span><br><span class="line">                data = input_data[indexes[<span class="number">0</span>], :, :, :]</span><br><span class="line">                data_p = input_data[indexes_p[<span class="number">0</span>], :, :, :]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> data, data_p</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> is_target_set_train:</span><br><span class="line">            target_data = self.train_data</span><br><span class="line">            target_labels = self.train_labels</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            target_data = self.validation_data</span><br><span class="line">            target_labels = self.validation_labels</span><br><span class="line"></span><br><span class="line">        total_data = n_pair * <span class="number">2</span></span><br><span class="line">        c = target_data.shape[<span class="number">3</span>]</span><br><span class="line">        w = target_data.shape[<span class="number">1</span>]</span><br><span class="line">        h = target_data.shape[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        data = numpy.zeros(shape=(total_data, w, h, c), dtype=<span class="string">'float32'</span>)</span><br><span class="line">        data_p = numpy.zeros(shape=(total_data, w, h, c), dtype=<span class="string">'float32'</span>)</span><br><span class="line">        labels_siamese = numpy.zeros(shape=total_data, dtype=<span class="string">'float32'</span>)</span><br><span class="line"></span><br><span class="line">        genuine = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(total_data):</span><br><span class="line">            data[i, :, :, :], data_p[i, :, :, :] = get_genuine_or_not(target_data, target_labels, genuine=genuine)</span><br><span class="line">            <span class="keyword">if</span> zero_one_labels:</span><br><span class="line">                labels_siamese[i] = <span class="keyword">not</span> genuine</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                labels_siamese[i] = <span class="number">-1</span> <span class="keyword">if</span> genuine <span class="keyword">else</span> +<span class="number">1</span></span><br><span class="line">            genuine = <span class="keyword">not</span> genuine</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data, data_p, labels_siamese</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_triplet</span><span class="params">(self, n_labels, n_triplets=<span class="number">1</span>, is_target_set_train=True)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Get a triplet</span></span><br><span class="line"><span class="string">        **Parameters**</span></span><br><span class="line"><span class="string">            is_target_set_train: Defining the target set to get the batch</span></span><br><span class="line"><span class="string">        **Return**</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_one_triplet</span><span class="params">(input_data, input_labels)</span>:</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Getting a pair of clients</span></span><br><span class="line">            index = numpy.random.choice(n_labels, <span class="number">2</span>, replace=<span class="keyword">False</span>)</span><br><span class="line">            label_positive = index[<span class="number">0</span>]</span><br><span class="line">            label_negative = index[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Getting the indexes of the data from a particular client</span></span><br><span class="line">            indexes = numpy.where(input_labels == index[<span class="number">0</span>])[<span class="number">0</span>]</span><br><span class="line">            numpy.random.shuffle(indexes)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Picking a positive pair</span></span><br><span class="line">            data_anchor = input_data[indexes[<span class="number">0</span>], :, :, :]</span><br><span class="line">            data_positive = input_data[indexes[<span class="number">1</span>], :, :, :]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Picking a negative sample</span></span><br><span class="line">            indexes = numpy.where(input_labels == index[<span class="number">1</span>])[<span class="number">0</span>]</span><br><span class="line">            numpy.random.shuffle(indexes)</span><br><span class="line">            data_negative = input_data[indexes[<span class="number">0</span>], :, :, :]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> data_anchor, data_positive, data_negative, label_positive, label_positive, label_negative</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> is_target_set_train:</span><br><span class="line">            target_data = self.train_data</span><br><span class="line">            target_labels = self.train_labels</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            target_data = self.validation_data</span><br><span class="line">            target_labels = self.validation_labels</span><br><span class="line"></span><br><span class="line">        c = target_data.shape[<span class="number">3</span>]</span><br><span class="line">        w = target_data.shape[<span class="number">1</span>]</span><br><span class="line">        h = target_data.shape[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        data_a = numpy.zeros(shape=(n_triplets, w, h, c), dtype=<span class="string">'float32'</span>)</span><br><span class="line">        data_p = numpy.zeros(shape=(n_triplets, w, h, c), dtype=<span class="string">'float32'</span>)</span><br><span class="line">        data_n = numpy.zeros(shape=(n_triplets, w, h, c), dtype=<span class="string">'float32'</span>)</span><br><span class="line">        labels_a = numpy.zeros(shape=n_triplets, dtype=<span class="string">'float32'</span>)</span><br><span class="line">        labels_p = numpy.zeros(shape=n_triplets, dtype=<span class="string">'float32'</span>)</span><br><span class="line">        labels_n = numpy.zeros(shape=n_triplets, dtype=<span class="string">'float32'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n_triplets):</span><br><span class="line">            data_a[i, :, :, :], data_p[i, :, :, :], data_n[i, :, :, :], \</span><br><span class="line">            labels_a[i], labels_p[i], labels_n[i] = \</span><br><span class="line">                get_one_triplet(target_data, target_labels)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data_a, data_p, data_n, labels_a, labels_p, labels_n</span><br></pre></td></tr></table></figure><p>email: air@weaf.top</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;tensorflow-实现siamese-network&quot;&gt;TensorFlow 实现Siamese Network&lt;/h1&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;这次我们来实现一个基于lenet的Siamese Network，大家如果想了解Siamese
        
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/categories/TensorFlow/"/>
    
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>asyncio 不完全指北（六）</title>
    <link href="http://weafteam.github.io/posts/74232ae7/"/>
    <id>http://weafteam.github.io/posts/74232ae7/</id>
    <published>2018-05-27T10:39:08.000Z</published>
    <updated>2018-08-07T08:56:41.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>前五篇文章介绍了 <code>asyncio</code> 的 API，从这篇开始，就要讲一些 Real World（并不）的东西了。</p><h2 id="使用-aiohttp-作为-http-客户端">使用 aiohttp 作为 HTTP 客户端</h2><p><a href="https://docs.aiohttp.org/en/stable/index.html" target="_blank" rel="noopener">aiohttp</a> 是一个基于 <code>asyncio</code> 的异步 HTTP 客户端和服务器库，也是 <code>asyncio</code> 生态中发展最迅速的第三方库之一。在这一节，我们使用 aiohttp 作为 HTTP 客户端来比较一下同步、基于线程的异步和基于 <code>asyncio</code> 的异步的差别。</p><h3 id="准备工作">准备工作</h3><p>首先我们安装好所需的第三方库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br><span class="line">pip install aiohttp</span><br></pre></td></tr></table></figure><p>准备一些用于并发请求的 url，共 45 个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># url.py</span></span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">'http://caipiao.hao123.com/'</span>, <span class="string">'http://game.hao123.com/'</span>,</span><br><span class="line">    <span class="string">'http://mail.10086.cn/'</span>, <span class="string">'http://mail.126.com/'</span>, <span class="string">'http://mail.163.com/'</span>,</span><br><span class="line">    <span class="string">'http://mail.aliyun.com/'</span>, <span class="string">'http://mail.qq.com/'</span>,</span><br><span class="line">    <span class="string">'http://mail.sina.com.cn/'</span>, <span class="string">'http://music.163.com/'</span>,</span><br><span class="line">    <span class="string">'http://tuijian.hao123.com/'</span>, <span class="string">'http://www.12306.cn/'</span>, <span class="string">'http://www.163.com/'</span>,</span><br><span class="line">    <span class="string">'http://www.37.com/'</span>, <span class="string">'http://www.4399.com/'</span>, <span class="string">'http://www.abchina.com/'</span>,</span><br><span class="line">    <span class="string">'http://www.baidu.com/'</span>, <span class="string">'http://www.bankcomm.com/'</span>, <span class="string">'http://www.boc.cn/'</span>,</span><br><span class="line">    <span class="string">'http://www.ccb.com/'</span>, <span class="string">'http://www.chsi.com.cn/'</span>,</span><br><span class="line">    <span class="string">'http://www.cmbchina.com/'</span>, <span class="string">'http://www.cnki.net/'</span>,</span><br><span class="line">    <span class="string">'http://www.eastmoney.com/'</span>, <span class="string">'http://www.fang.com/'</span>,</span><br><span class="line">    <span class="string">'http://www.icbc.com.cn/icbc/'</span>, <span class="string">'http://www.ifeng.com'</span>,</span><br><span class="line">    <span class="string">'http://www.iqiyi.com/'</span>, <span class="string">'http://www.psbc.com/'</span>, <span class="string">'http://www.qq.com/'</span>,</span><br><span class="line">    <span class="string">'http://www.sina.com.cn/'</span>, <span class="string">'http://www.sohu.com/'</span>, <span class="string">'http://www.tianya.cn/'</span>,</span><br><span class="line">    <span class="string">'http://www.zhihu.com/'</span>, <span class="string">'http://wyyx.hao123.com/'</span>, <span class="string">'https://mail.qq.com/'</span>,</span><br><span class="line">    <span class="string">'https://mail.sohu.com/'</span>, <span class="string">'https://tieba.baidu.com/'</span>, <span class="string">'https://weibo.com/'</span>,</span><br><span class="line">    <span class="string">'https://www.autohome.com.cn/'</span>, <span class="string">'https://www.bilibili.com/'</span>,</span><br><span class="line">    <span class="string">'https://www.booking.com/'</span>, <span class="string">'https://www.douyu.com/'</span>,</span><br><span class="line">    <span class="string">'https://www.qunar.com/'</span>, <span class="string">'https://www.suning.com/'</span>,</span><br><span class="line">    <span class="string">'https://www.taobao.com/'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="同步的请求">同步的请求</h3><p>首先导入所需的库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> url <span class="keyword">import</span> urls</span><br></pre></td></tr></table></figure><p>完成请求单个 url 的函数，这个函数会以 <code>bytes</code> 形式返回网站内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch</span><span class="params">(session, url)</span>:</span></span><br><span class="line">    resp = session.get(url)</span><br><span class="line">    <span class="keyword">return</span> resp.content</span><br></pre></td></tr></table></figure><p>同步请求所有的 url，打印出字节的长度：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    session = requests.Session()</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        data = fetch(session, url)</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;url&#125;</span>: <span class="subst">&#123;len(data)&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>记录完成请求所需的时间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    main()</span><br><span class="line">    print(time.time() - start)</span><br></pre></td></tr></table></figure><p>上述代码的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">http://caipiao.hao123.com/: 109299</span><br><span class="line">http://game.hao123.com/: 179707</span><br><span class="line">http://mail.10086.cn/: 52500</span><br><span class="line">http://mail.126.com/: 13063</span><br><span class="line">http://mail.163.com/: 137118</span><br><span class="line">http://mail.aliyun.com/: 725</span><br><span class="line">http://mail.qq.com/: 8206</span><br><span class="line">http://mail.sina.com.cn/: 2837</span><br><span class="line">http://music.163.com/: 92606</span><br><span class="line">...</span><br><span class="line">https://www.autohome.com.cn/: 656200</span><br><span class="line">https://www.bilibili.com/: 26642</span><br><span class="line">https://www.booking.com/: 457842</span><br><span class="line">https://www.douyu.com/: 75286</span><br><span class="line">https://www.qunar.com/: 140898</span><br><span class="line">https://www.suning.com/: 188523</span><br><span class="line">https://www.taobao.com/: 126283</span><br><span class="line">24.28531312942505</span><br></pre></td></tr></table></figure><p>可以看出打印的顺序是和 url 列表的顺序完全一致的，同步的代码耗时约 24s。</p><h3 id="基于线程的请求">基于线程的请求</h3><p>首先导入所需的库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, as_completed</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> url <span class="keyword">import</span> urls</span><br></pre></td></tr></table></figure><p>完成单个请求的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch</span><span class="params">(session, url)</span>:</span></span><br><span class="line">    resp = session.get(url)</span><br><span class="line">    <span class="keyword">return</span> resp.content</span><br></pre></td></tr></table></figure><p>使用线程池请求所有的 url：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    session = requests.Session()</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor() <span class="keyword">as</span> executor:</span><br><span class="line">        tasks = &#123;executor.submit(fetch, session, url): url <span class="keyword">for</span> url <span class="keyword">in</span> urls&#125;</span><br><span class="line">        <span class="keyword">for</span> task <span class="keyword">in</span> as_completed(tasks.keys()):</span><br><span class="line">            data = task.result()</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;tasks[task]&#125;</span>: <span class="subst">&#123;len(data)&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>记录完成所需的时间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    main()</span><br><span class="line">    print(time.time() - start)</span><br></pre></td></tr></table></figure><p>上述代码的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">http://www.ccb.com/: 276</span><br><span class="line">http://www.12306.cn/: 1480</span><br><span class="line">http://www.cnki.net/: 59235</span><br><span class="line">http://mail.aliyun.com/: 725</span><br><span class="line">http://www.tianya.cn/: 7867</span><br><span class="line">http://www.icbc.com.cn/icbc/: 157227</span><br><span class="line">http://www.bankcomm.com/: 3473</span><br><span class="line">http://www.chsi.com.cn/: 34188</span><br><span class="line">http://mail.sina.com.cn/: 2837</span><br><span class="line">...</span><br><span class="line">http://www.sina.com.cn/: 584540</span><br><span class="line">https://tieba.baidu.com/: 137714</span><br><span class="line">https://www.autohome.com.cn/: 656154</span><br><span class="line">https://www.taobao.com/: 126283</span><br><span class="line">https://www.booking.com/: 457849</span><br><span class="line">http://www.iqiyi.com/: 599940</span><br><span class="line">http://tuijian.hao123.com/: 511465</span><br><span class="line">9.722297191619873</span><br></pre></td></tr></table></figure><p>可以看到返回结果的顺序并不和 url 列表一致，准确的说，是按照请求完成的顺序排列的。同时，请求所需的时间大幅缩短，降到了约 9s。</p><h3 id="基于-asyncio-的请求">基于 <code>asyncio</code> 的请求</h3><p>首先导入所需的库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">from</span> url <span class="keyword">import</span> urls</span><br></pre></td></tr></table></figure><p>完成单个请求的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">fetch</span><span class="params">(session, url)</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> resp:</span><br><span class="line">        <span class="keyword">return</span> url, <span class="keyword">await</span> resp.read()</span><br></pre></td></tr></table></figure><p>这里同时返回了请求的 url 和网站内容，是因为后面的代码不容易在请求完成后获得请求的 url。</p><p>使用 <code>aiohttp</code> 请求所有的 url：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        tasks = [fetch(session, url) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line">        <span class="keyword">for</span> task <span class="keyword">in</span> asyncio.as_completed(tasks):</span><br><span class="line">            url, data = <span class="keyword">await</span> task</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;url&#125;</span>: <span class="subst">&#123;len(data)&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>开启事件循环，并记录所需的时间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(main())</span><br><span class="line">    print(time.time() - start)</span><br></pre></td></tr></table></figure><p>上述代码的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http://www.psbc.com/: 404</span><br><span class="line">http://www.eastmoney.com/: 392883</span><br><span class="line">http://www.icbc.com.cn/icbc/: 157227</span><br><span class="line">http://www.ifeng.com: 438464</span><br><span class="line">http://mail.aliyun.com/: 725</span><br><span class="line">http://www.tianya.cn/: 7867</span><br><span class="line">...</span><br><span class="line">http://tuijian.hao123.com/: 510052</span><br><span class="line">http://mail.qq.com/: 8023</span><br><span class="line">http://game.hao123.com/: 179707</span><br><span class="line">https://tieba.baidu.com/: 137723</span><br><span class="line">http://www.iqiyi.com/: 599830</span><br><span class="line">https://www.taobao.com/: 126283</span><br><span class="line">https://weibo.com/: 6117</span><br><span class="line">http://www.zhihu.com/: 22696</span><br><span class="line">https://www.booking.com/: 457851</span><br><span class="line">2.0516560077667236</span><br></pre></td></tr></table></figure><p>和使用线程一样，返回结果是按照请求完成顺序排列的。请求的时间比线程更短，只用了约 2s 就完成了所有的请求。和使用线程的方式相比，<code>asyncio</code> 避免了创建线程的开销。</p><h4 id="保存请求的结果">保存请求的结果</h4><p>需要注意的是，上述请求只是简单的获取了内容，这些 bytes 只在内存中存在。一旦我们需要把结果保存到磁盘，就会有另一个会导致异步代码退化到同步的地方：磁盘 I / O。</p><p>现在我们增加一个保存请求内容到磁盘的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote_plus</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_file</span><span class="params">(filename, data)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">f'async_data/<span class="subst">&#123;quote_plus(filename)&#125;</span>.html'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(data)</span><br></pre></td></tr></table></figure><p>同时增加一个函数，用来同时发起请求并把结果保存到文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">fetch_and_save</span><span class="params">(session, url)</span>:</span></span><br><span class="line">    url, data = <span class="keyword">await</span> fetch(session, url)</span><br><span class="line">    save_to_file(url, data * <span class="number">500</span>)  <span class="comment"># 把文件大小扩大 500 倍，使结果更明显</span></span><br><span class="line">    <span class="keyword">return</span> url</span><br></pre></td></tr></table></figure><p>同时更新一下 <code>main()</code> 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        tasks = [fetch_and_save(session, url) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line">        <span class="keyword">for</span> task <span class="keyword">in</span> asyncio.as_completed(tasks):</span><br><span class="line">            url = <span class="keyword">await</span> task</span><br><span class="line">            print(<span class="string">f'save: <span class="subst">&#123;url&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>上述代码的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">save: http://www.psbc.com/</span><br><span class="line">save: http://www.cnki.net/</span><br><span class="line">save: http://www.eastmoney.com/</span><br><span class="line">save: http://tuijian.hao123.com/</span><br><span class="line">save: http://caipiao.hao123.com/</span><br><span class="line">save: http://www.ifeng.com</span><br><span class="line">save: http://www.fang.com/</span><br><span class="line">save: http://www.qq.com/</span><br><span class="line">...</span><br><span class="line">save: https://www.bilibili.com/</span><br><span class="line">save: https://www.autohome.com.cn/</span><br><span class="line">save: https://www.booking.com/</span><br><span class="line">save: https://mail.sohu.com/</span><br><span class="line">save: https://weibo.com/</span><br><span class="line">save: http://mail.qq.com/</span><br><span class="line">save: http://mail.10086.cn/</span><br><span class="line">save: http://www.zhihu.com/</span><br><span class="line">10.63579511642456</span><br></pre></td></tr></table></figure><p>可以看到消耗的时间增加到了约 10s。</p><p>有没有什么方法可以将同步的文件系统操作变为异步的呢？答案就是结合使用线程和 <code>asyncio</code>。修改一下 <code>fetch_and_save()</code> 函数，使其在其他线程中执行保存操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">fetch_and_save</span><span class="params">(session, url)</span>:</span></span><br><span class="line">    url, data = <span class="keyword">await</span> fetch(session, url)</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_in_executor(<span class="keyword">None</span>, save_to_file, url, data * <span class="number">500</span>)  <span class="comment"># 默认使用 ThreadPoolExecutor</span></span><br><span class="line">    <span class="keyword">return</span> url</span><br></pre></td></tr></table></figure><p>修改后的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">save: http://www.psbc.com/</span><br><span class="line">save: http://www.12306.cn/</span><br><span class="line">save: http://www.ccb.com/</span><br><span class="line">save: http://www.cnki.net/</span><br><span class="line">save: http://www.sohu.com/</span><br><span class="line">save: http://www.37.com/</span><br><span class="line">save: http://www.icbc.com.cn/icbc/</span><br><span class="line">save: http://mail.sina.com.cn/</span><br><span class="line">save: http://www.ifeng.com</span><br><span class="line">...</span><br><span class="line">save: https://mail.qq.com/</span><br><span class="line">save: http://mail.163.com/</span><br><span class="line">save: https://mail.sohu.com/</span><br><span class="line">save: https://weibo.com/</span><br><span class="line">save: http://mail.qq.com/</span><br><span class="line">save: http://mail.10086.cn/</span><br><span class="line">save: http://www.zhihu.com/</span><br><span class="line">save: https://www.booking.com/</span><br><span class="line">4.817075967788696</span><br></pre></td></tr></table></figure><p>效果很明显，所需的时间缩短到了约 5s。</p><p><strong>NOTE：</strong>需要注意的是，大多数操作系统上并未提供文件系统的异步 I / O 操作（Linux kernel 提供了文件系统异步 I / O，不过它需要一个额外的库 <a href="http://lse.sourceforge.net/io/aio.html" target="_blank" rel="noopener">aio</a>），大部分的异步框架都是使用线程处理文件系统 I / O 的。如果需要统一的 API，可以选择 <a href="https://github.com/Tinche/aiofiles/" target="_blank" rel="noopener">aiofiles</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;前五篇文章介绍了 &lt;code&gt;asyncio&lt;/code&gt; 的 API，从这篇开始，就要讲一些 Real World（并不）的东西了。&lt;/p&gt;
&lt;h2 id=&quot;使用-aiohttp-作为-http-客户端&quot;&gt;使用 aiohttp
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Lombok的使用</title>
    <link href="http://weafteam.github.io/posts/3859dc89/"/>
    <id>http://weafteam.github.io/posts/3859dc89/</id>
    <published>2018-05-26T18:04:44.000Z</published>
    <updated>2018-08-08T11:54:45.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一简介">一、简介</h1><p>使用lombok减少代码冗余（Reducing Boilerplate Code with Project Lombok）。“Boilerplate”是用来描述许多部分重复的代码的术语。这也是Java语言最常提出批评之一,是大多数项目中都存在此类代码而且数量很多。这个问题经常是各种库中设计决策的结果，但是由于语言本身的限制而导致的。Lombok 旨在通过一组简单的注释取代这些问题。 虽然注释用于指示用法，实现绑定甚至生成框架使用的代码并不罕见，但它们通常不用于生成应用程序直接使用的代码。 部分原因是这样做需要在开发时急切地处理注释。 Lombok正是这样做的。 通过集成到IDE中，Project Lombok能够注入开发人员可立即使用的代码。 例如，简单地将@Data注释添加到数据类（如下所示）会在IDE中生成许多新方法：</p><p><img src="https://weaf.oss-cn-beijing.aliyuncs.com/lombok-1.png" alt="lombok-1"> 二、安装 ======= 1.eclipse可以使用以下方法安装 ————– ### 1) 下载lombok.jar包https://projectlombok.org/download.html</p><h3 id="运行lombok.jar-java--jar-d.jar-d.jar这是windows下lombok.jar所在的位置">2) 运行Lombok.jar: Java -jar D:.jar D:.jar这是windows下lombok.jar所在的位置</h3><pre><code>数秒后将弹出一框，以确认eclipse的安装路径</code></pre><h3 id="确认完eclipse的安装路径后点击installupdate按钮即可安装完成">3) 确认完eclipse的安装路径后，点击install/update按钮，即可安装完成</h3><h3 id="安装完成之后请确认eclipse安装路径下是否多了一个lombok.jar包并且其">4) 安装完成之后，请确认eclipse安装路径下是否多了一个lombok.jar包，并且其</h3><pre><code>配置文件eclipse.ini中是否 添加了如下内容:    -javaagent:lombok.jar    -Xbootclasspath/a:lombok.jar如果上面的答案均为true，那么恭喜你已经安装成功，否则将缺少的部分添加到相应的位置即可</code></pre><h3 id="重启eclipse或myeclipse">5) 重启eclipse或myeclipse</h3><p><img src="https://weaf.oss-cn-beijing.aliyuncs.com/lombok-2.png" alt="lombok-2"> 2.IntelliJ IDEA安装 ——— ### 1）按照以下步骤打开设置Settings安装 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/lombok-3.png" alt="lombok-3"> ### 2）安装后重启</p><h2 id="最后需要在项目中引入jar包或者使用maven配置好坐标">3.最后需要在项目中引入jar包或者，使用maven配置好坐标。</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.9.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;repositories&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">        &lt;id&gt;projectlombok.org&lt;/id&gt;</span><br><span class="line">        &lt;url&gt;http://projectlombok.org/mavenrepo&lt;/url&gt;</span><br><span class="line">    &lt;/repository&gt;</span><br><span class="line">&lt;/repositories&gt;</span><br></pre></td></tr></table></figure><h1 id="三lombok的注解有哪些">三、Lombok的注解有哪些</h1><ol type="1"><li><span class="citation" data-cites="Getter">@Getter</span></li><li><span class="citation" data-cites="Setter">@Setter</span></li><li><span class="citation" data-cites="Data">@Data</span></li><li><span class="citation" data-cites="NonNull">@NonNull</span></li><li><span class="citation" data-cites="ToString">@ToString</span></li><li><span class="citation" data-cites="EqualsAndHashCode">@EqualsAndHashCode</span></li><li><span class="citation" data-cites="Cleanup">@Cleanup</span></li><li><span class="citation" data-cites="Synchronized">@Synchronized</span></li><li><span class="citation" data-cites="SneakyThrows">@SneakyThrows</span></li><li><span class="citation" data-cites="AllArgsConstructor">@AllArgsConstructor</span></li><li><span class="citation" data-cites="Builder">@Builder</span></li><li><span class="citation" data-cites="Generated">@Generated</span></li><li><span class="citation" data-cites="NoArgsConstructor">@NoArgsConstructor</span></li><li><span class="citation" data-cites="RequiredArgsConstructor">@RequiredArgsConstructor</span></li><li><span class="citation" data-cites="Singular">@Singular</span></li><li><span class="citation" data-cites="val">@val</span></li><li><span class="citation" data-cites="var">@var</span></li><li><span class="citation" data-cites="Value">@Value</span></li><li><span class="citation" data-cites="FieldNameConstants">@FieldNameConstants</span></li><li><span class="citation" data-cites="Log">@Log</span>, <span class="citation" data-cites="Log4j">@Log4j</span>, <span class="citation" data-cites="Log4j2">@Log4j2</span>, <span class="citation" data-cites="Slf4j">@Slf4j</span>, <span class="citation" data-cites="XSlf4j">@XSlf4j</span>, <span class="citation" data-cites="CommonsLog">@CommonsLog</span>, <span class="citation" data-cites="JBossLog">@JBossLog</span>, <span class="citation" data-cites="Flogger">@Flogger</span></li><li><span class="citation" data-cites="Delegate">@Delegate</span></li><li><span class="citation" data-cites="Wither">@Wither</span></li></ol><h1 id="四lombok注解的使用">四、Lombok注解的使用</h1><h2 id="getter">1 <span class="citation" data-cites="Getter">@Getter</span></h2><p>生成相应的get方法,其中boolean类型会生成 isFoo(); 并且可以配合AccessLevel使用</p><h2 id="setter">2 <span class="citation" data-cites="Setter">@Setter</span></h2><p>生成相应的set方法,其中boolean类型会生产 setFoo();</p><h2 id="data">3 <span class="citation" data-cites="Data">@Data</span></h2><p>生成get、set、toString、equals、hashCode等方法。</p><h2 id="nonnull">4 <span class="citation" data-cites="NonNull">@NonNull</span></h2><p>可以再方法引用、和传参时如果值为null,抛出空指针异常。</p><h2 id="tostring">5 <span class="citation" data-cites="ToString">@ToString</span></h2><p>生成toString方法</p><h2 id="equalsandhashcode">6 <span class="citation" data-cites="EqualsAndHashCode">@EqualsAndHashCode</span></h2><p>生成equals和hashCode方法</p><h2 id="cleanup">7 <span class="citation" data-cites="Cleanup">@Cleanup</span></h2><p><img src="https://weaf.oss-cn-beijing.aliyuncs.com/lombok-4.png" alt="lombok-4"></p><p>参考地址：<a href="http://jnb.ociweb.com/jnb/jnbJan2010.html" class="uri" target="_blank" rel="noopener">http://jnb.ociweb.com/jnb/jnbJan2010.html</a></p>]]></content>
    
    <summary type="html">
    
      Lombok的使用
    
    </summary>
    
      <category term="JAVA" scheme="http://weafteam.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://weafteam.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Spring中@transactional的使用</title>
    <link href="http://weafteam.github.io/posts/435ecce8/"/>
    <id>http://weafteam.github.io/posts/435ecce8/</id>
    <published>2018-05-20T18:04:44.000Z</published>
    <updated>2018-08-07T08:56:41.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一简介">一、简介</h1><p>我们在工作中多多少少会使用到和事务相关的，但是程序运行总不会一定不出现任何异常。一旦整个流程中出现一个异常，也许我们就需要整个操作不继续进行下去，并且需要之前做过的操作都不起作用。那么我们就需要使用事务来控制。</p><p>在Spring中，我们通过@transactional来启用事务。</p><h1 id="二transactional详解">二、<span class="citation" data-cites="transactional详解">@transactional详解</span></h1><h3 id="transactional注解中常用参数说明"><span class="citation" data-cites="Transactional注解中常用参数说明">@Transactional注解中常用参数说明</span></h3><table><colgroup><col style="width: 50%"><col style="width: 50%"></colgroup><thead><tr class="header"><th>参数名称</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>rollbackFor</td><td>该属性用于设置需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则进行事务回滚。例如：指定单一异常类：<span class="citation" data-cites="Transactional">@Transactional</span>(rollbackFor=RuntimeException.class)指定多个异常类：<span class="citation" data-cites="Transactional">@Transactional</span>(rollbackFor={RuntimeException.class, Exception.class})</td></tr><tr class="even"><td>rollbackForClassName</td><td>该属性用于设置需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，则进行事务回滚。例如：指定单一异常类名称：<span class="citation" data-cites="Transactional">@Transactional</span>(rollbackForClassName=“RuntimeException”)指定多个异常类名称：<span class="citation" data-cites="Transactional">@Transactional</span>(rollbackForClassName={“RuntimeException”,“Exception”})</td></tr><tr class="odd"><td>noRollbackFor</td><td>该属性用于设置不需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，不进行事务回滚。例如：指定单一异常类：<span class="citation" data-cites="Transactional">@Transactional</span>(noRollbackFor=RuntimeException.class)指定多个异常类：<span class="citation" data-cites="Transactional">@Transactional</span>(noRollbackFor={RuntimeException.class, Exception.class})</td></tr><tr class="even"><td>noRollbackForClassName</td><td>该属性用于设置不需要进行回滚的异常类名称数组，当方法中抛出指定异常名称数组中的异常时，不进行事务回滚。例如：指定单一异常类名称：<span class="citation" data-cites="Transactional">@Transactional</span>(noRollbackForClassName=“RuntimeException”)指定多个异常类名称：<span class="citation" data-cites="Transactional">@Transactional</span>(noRollbackForClassName={“RuntimeException”,“Exception”})</td></tr><tr class="odd"><td>propagation</td><td>该属性用于设置事务的传播行为，具体取值可参考表6-7。例如：<span class="citation" data-cites="Transactional">@Transactional</span>(propagation=Propagation.NOT_SUPPORTED,readOnly=true)</td></tr><tr class="even"><td>isolation</td><td>该属性用于设置底层数据库的事务隔离级别，事务隔离级别用于处理多事务并发的情况，通常使用数据库的默认隔离级别即可，基本不需要进行设置</td></tr><tr class="odd"><td>timeout</td><td>该属性用于设置事务的超时秒数，默认值为-1表示永不超时</td></tr><tr class="even"><td>readOnly</td><td>该属性用于设置当前事务是否为只读事务，设置为true表示只读，false则表示可读写，默认值为false。例如：<span class="citation" data-cites="Transactional">@Transactional</span>(readOnly=true)</td></tr></tbody></table><h3 id="事物传播行为介绍">事物传播行为介绍:</h3><ul><li><strong><span class="citation" data-cites="Transactional">@Transactional</span>(propagation=Propagation.REQUIRED)</strong> ：如果有事务, 那么加入事务, 没有的话新建一个(默认情况下)</li><li><strong><span class="citation" data-cites="Transactional">@Transactional</span>(propagation=Propagation.NOT_SUPPORTED)</strong> ：容器不为这个方法开启事务</li><li><strong><span class="citation" data-cites="Transactional">@Transactional</span>(propagation=Propagation.REQUIRES_NEW)</strong> ：不管是否存在事务,都创建一个新的事务,原来的挂起,新的执行完毕,继续执行老的事务</li><li><strong><span class="citation" data-cites="Transactional">@Transactional</span>(propagation=Propagation.MANDATORY)</strong> ：必须在一个已有的事务中执行,否则抛出异常</li><li><strong><span class="citation" data-cites="Transactional">@Transactional</span>(propagation=Propagation.NEVER)</strong> ：必须在一个没有的事务中执行,否则抛出异常(与Propagation.MANDATORY相反)</li><li><strong><span class="citation" data-cites="Transactional">@Transactional</span>(propagation=Propagation.SUPPORTS)</strong> ：如果其他bean调用这个方法,在其他bean中声明事务,那就用事务.如果其他bean没有声明事务,那就不用事务.</li></ul><h3 id="事物超时设置">事物超时设置:</h3><ul><li><strong><span class="citation" data-cites="Transactional">@Transactional</span>(timeout=30)</strong> //默认是30秒</li></ul><h3 id="事务隔离级别">事务隔离级别:</h3><ul><li><strong><span class="citation" data-cites="Transactional">@Transactional</span>(isolation = Isolation.READ_UNCOMMITTED)</strong>：读取未提交数据(会出现脏读, 不可重复读) 基本不使用</li><li><strong><span class="citation" data-cites="Transactional">@Transactional</span>(isolation = Isolation.READ_COMMITTED)</strong>：读取已提交数据(会出现不可重复读和幻读)</li><li><strong><span class="citation" data-cites="Transactional">@Transactional</span>(isolation = Isolation.REPEATABLE_READ)</strong>：可重复读(会出现幻读)</li><li><p><strong><span class="citation" data-cites="Transactional">@Transactional</span>(isolation = Isolation.SERIALIZABLE)</strong>：串行化</p></li><li>MYSQL: 默认为REPEATABLE_READ级别</li><li><p>SQLSERVER: 默认为READ_COMMITTED</p></li><li><strong>脏读</strong> : 一个事务读取到另一事务未提交的更新数据</li><li><strong>不可重复读</strong> : 在同一事务中, 多次读取同一数据返回的结果有所不同, 换句话说, 后续读取可以读到另一事务已提交的更新数据. 相反, “可重复读”在同一事务中多次 读取数据时, 能够保证所读数据一样, 也就是后续读取不能读到另一事务已提交的更新数据</li><li><p><strong>幻读</strong> : 一个事务读到另一个事务已提交的insert数据</p></li></ul><h1 id="三特别需要注意的几点">三、特别需要注意的几点</h1><ol type="1"><li>spring 事务管理器,由spring来负责数据库的打开,提交,回滚.默认遇到运行期例外(throw new RuntimeException(“注释”);)会回滚，即遇到不受检查（unchecked）的例外时回滚；而遇到需要捕获的例外(throw new Exception(“注释”);)不会回滚,即遇到受检查的例外（就是非运行时抛出的异常，编译器会检查到的异常叫受检查例外或说受检查异常）时，需我们指定方式来让事务回滚要想所有异常都回滚,要加上 <span class="citation" data-cites="Transactional">@Transactional</span>( rollbackFor={Exception.class,其它异常}) .如果让unchecked例外不回滚</li><li><span class="citation" data-cites="Transactional">@Transactional</span> 注解应该只被应用到 public 可见度的方法上。 如果你在 protected、private 或者 package-visible 的方法上使用 <span class="citation" data-cites="Transactional">@Transactional</span> 注解，它也不会报错， 但是这个被注解的方法将不会展示已配置的事务设置。</li><li><span class="citation" data-cites="Transactional">@Transactional</span> 注解可以被应用于接口定义和接口方法、类定义和类的 public 方法上。然而，请注意仅仅 <span class="citation" data-cites="Transactional">@Transactional</span> 注解的出现不足于开启事务行为，它仅仅 是一种元数据，能够被可以识别 <span class="citation" data-cites="Transactional">@Transactional</span> 注解和上述的配置适当的具有事务行为的beans所使用。上面的例子中，其实正是 元素的出现 开启 了事务行为。</li><li>Spring团队的建议是你在具体的类（或类的方法）上使用 <span class="citation" data-cites="Transactional">@Transactional</span> 注解，而不要使用在类所要实现的任何接口上。你当然可以在接口上使用 <span class="citation" data-cites="Transactional">@Transactional</span> 注解，但是这将只能当你设置了基于接口的代理时它才生效。因为注解是不能继承的，这就意味着如果你正在使用基于类的代理时，那么事务的设置将不能被基于类的代理所识别，而且对象也将不会被事务代理所包装（将被确认为严重的）。因此，请接受Spring团队的建议并且在具体的类上使用 <span class="citation" data-cites="Transactional">@Transactional</span> 注解。</li><li>如果异常被try｛｝catch｛｝了，事务就不回滚了，如果想让事务回滚必须再往外抛try｛｝catch｛throw Exception｝。</li><li>使用了@Transactional的方法，对同一个类里面的方法调用， <span class="citation" data-cites="Transactional无效">@Transactional无效</span>。比如有一个类Test，它的一个方法A，A再调用Test本类的方法B（不管B是否public还是private），但A没有声明注解事务，而B有。则外部调用A之后，B的事务是不会起作用的。（经常在这里出错）</li><li>放在方法上的注解会覆盖类上边的注解的参数属性。</li></ol>]]></content>
    
    <summary type="html">
    
      Spring中@transactional的使用
    
    </summary>
    
      <category term="JAVA" scheme="http://weafteam.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://weafteam.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow SVM详解</title>
    <link href="http://weafteam.github.io/posts/78b2bf24/"/>
    <id>http://weafteam.github.io/posts/78b2bf24/</id>
    <published>2018-05-20T11:52:00.000Z</published>
    <updated>2018-08-28T03:34:40.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tensorflow-svm">TensorFlow SVM</h1><ol type="1"><li>简单的介绍一下Support Vector Machine，SVM是一个二分类机器学习算法，目的就是为了让两类之间的margin更大，SVM还可以实现多分类任务，那么需要扩展非线性kernels进去，接下来逐渐介绍SVM</li><li>和线性回归一起工作的SVM,使用得数据是IRIS数据集，取两个特征维度。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">importimport  matplotlib.pyplotmatplot  <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line">ops.reset_default_graph()</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">x_vals = np.array([[x[<span class="number">0</span>], x[<span class="number">3</span>]] <span class="keyword">for</span> x <span class="keyword">in</span> iris.data])</span><br><span class="line">y_vals = np.array([<span class="number">1</span> <span class="keyword">if</span> y == <span class="number">0</span> <span class="keyword">else</span> <span class="number">-1</span> <span class="keyword">for</span> y <span class="keyword">in</span> iris.target])</span><br><span class="line"></span><br><span class="line">train_indices = np.random.choice(len(x_vals),</span><br><span class="line">                                 round(len(x_vals)*<span class="number">0.8</span>),</span><br><span class="line">                                 replace=<span class="keyword">False</span>)</span><br><span class="line">test_indices = np.array(list(set(range(len(x_vals))) - set(train_indices)))</span><br><span class="line">x_vals_train = x_vals[train_indices]</span><br><span class="line">x_vals_test = x_vals[test_indices]</span><br><span class="line">y_vals_train = y_vals[train_indices]</span><br><span class="line">y_vals_test = y_vals[test_indices]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x_data = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">2</span>], dtype=tf.float32)</span><br><span class="line">y_target = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A = tf.Variable(tf.random_normal(shape=[<span class="number">2</span>, <span class="number">1</span>]))</span><br><span class="line">b = tf.Variable(tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model_output = tf.subtract(tf.matmul(x_data, A), b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l2_norm = tf.reduce_sum(tf.square(A))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">prediction = tf.sign(model_output)</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(tf.equal(prediction, y_target), tf.float32))</span><br><span class="line"></span><br><span class="line">my_opt = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>)</span><br><span class="line">train_step = my_opt.minimize(loss)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line">loss_vec = []</span><br><span class="line">train_accuracy = []</span><br><span class="line">test_accuracy = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">500</span>):</span><br><span class="line">    rand_index = np.random.choice(len(x_vals_train), size=batch_size)</span><br><span class="line">    rand_x = x_vals_train[rand_index]</span><br><span class="line">    rand_y = np.transpose([y_vals_train[rand_index]])</span><br><span class="line">    sess.run(train_step, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line"></span><br><span class="line">    temp_loss = sess.run(loss, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">    loss_vec.append(temp_loss)</span><br><span class="line"></span><br><span class="line">    train_acc_temp = sess.run(accuracy, feed_dict=&#123;</span><br><span class="line">        x_data: x_vals_train,</span><br><span class="line">        y_target: np.transpose([y_vals_train])&#125;)</span><br><span class="line">    train_accuracy.append(train_acc_temp)</span><br><span class="line"></span><br><span class="line">    test_acc_temp = sess.run(accuracy, feed_dict=&#123;</span><br><span class="line">        x_data: x_vals_test,</span><br><span class="line">        y_target: np.transpose([y_vals_test])&#125;)</span><br><span class="line">    test_accuracy.append(test_acc_temp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'Step #&#123;&#125; A = &#123;&#125;, b = &#123;&#125;'</span>.format(</span><br><span class="line">            str(i+<span class="number">1</span>),</span><br><span class="line">            str(sess.run(A)),</span><br><span class="line">            str(sess.run(b))</span><br><span class="line">        ))</span><br><span class="line">        print(<span class="string">'Loss = '</span> + str(temp_loss))</span><br><span class="line">        </span><br><span class="line">[[a1], [a2]] = sess.run(A)</span><br><span class="line">[[b]] = sess.run(b)</span><br><span class="line">slope = -a2/a1</span><br><span class="line">y_intercept = b/a1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x1_vals = [d[<span class="number">1</span>] <span class="keyword">for</span> d <span class="keyword">in</span> x_vals]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">best_fit = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x1_vals:</span><br><span class="line">    best_fit.append(slope*i+y_intercept)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setosa_x = [d[<span class="number">1</span>] <span class="keyword">for</span> i, d <span class="keyword">in</span> enumerate(x_vals) <span class="keyword">if</span> y_vals[i] == <span class="number">1</span>]</span><br><span class="line">setosa_y = [d[<span class="number">0</span>] <span class="keyword">for</span> i, d <span class="keyword">in</span> enumerate(x_vals) <span class="keyword">if</span> y_vals[i] == <span class="number">1</span>]</span><br><span class="line">not_setosa_x = [d[<span class="number">1</span>] <span class="keyword">for</span> i, d <span class="keyword">in</span> enumerate(x_vals) <span class="keyword">if</span> y_vals[i] == <span class="number">-1</span>]</span><br><span class="line">not_setosa_y = [d[<span class="number">0</span>] <span class="keyword">for</span> i, d <span class="keyword">in</span> enumerate(x_vals) <span class="keyword">if</span> y_vals[i] == <span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.plot(setosa_x, setosa_y, <span class="string">'o'</span>, label=<span class="string">'I. setosa'</span>)</span><br><span class="line">plt.plot(not_setosa_x, not_setosa_y, <span class="string">'x'</span>, label=<span class="string">'Non-setosa'</span>)</span><br><span class="line">plt.plot(x1_vals, best_fit, <span class="string">'r-'</span>, label=<span class="string">'Linear Separator'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">plt.ylim([<span class="number">0</span>, <span class="number">10</span>])</span><br><span class="line">plt.legend(loc=<span class="string">'lower right'</span>)</span><br><span class="line">plt.title(<span class="string">'Sepal Length vs Pedal Width'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Pedal Width'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Sepal Length'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">plt.plot(train_accuracy, <span class="string">'k-'</span>, label=<span class="string">'Training Accuracy'</span>)</span><br><span class="line">plt.plot(test_accuracy, <span class="string">'r--'</span>, label=<span class="string">'Test Accuracy'</span>)</span><br><span class="line">plt.title(<span class="string">'Train and Test Set Accuracies'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Generation'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Accuracy'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'lower right'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">plt.plot(loss_vec, <span class="string">'k-'</span>)</span><br><span class="line">plt.title(<span class="string">'Loss per Generation'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Generation'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Loss'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>初探SVM 大家一定有很多问题，我之前也说过，我只介绍在tensorflow下面的一些实现，不叫原理，原理大家可以在网上找一些资料了解。邮箱air@weaf.top。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;tensorflow-svm&quot;&gt;TensorFlow SVM&lt;/h1&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;简单的介绍一下Support Vector
        
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/categories/TensorFlow/"/>
    
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow逻辑回归详解</title>
    <link href="http://weafteam.github.io/posts/befe0ef0/"/>
    <id>http://weafteam.github.io/posts/befe0ef0/</id>
    <published>2018-05-20T11:31:09.000Z</published>
    <updated>2018-08-28T03:34:20.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tensorflow-logistic-regression">TensorFlow Logistic Regression</h1><p>还是得先和大家开个头，我最近有点忙，所以有时候需要抽开时间补上拉下的博客，这是我2018年5月20号补5月七号那个月的博客，先来介绍一下逻辑回归的概念，也就是相对于线性回归，其实逻辑回归就是一个分类问题，大家可以这么理解，也就是最后将值得分布确定在几类当中，就像我们最开始在博客一开始学习得fashion mnist一样，只不过，我们这节课来一个，简单得二分类问题。也就是： <span class="math display">\[y=sigmoid(A*x+b)\]</span> 最后我们得到得y的预测值都会是0，或者是1，我们使用的数据是github的一个数据：</p><ol type="1"><li>正式开始代码的编写，其实很简单。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面一如既往的模块导入</span></span><br><span class="line">ops.reset_default_graph()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建我们的会话</span></span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据的文件名</span></span><br><span class="line">birth_weight_file = <span class="string">'birth_weight.csv'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载数据</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(birth_weight_file):</span><br><span class="line">    </span><br><span class="line">    birthdata_url = <span class="string">'https://github.com/nfmcclure/tensorflow_cookbook/'</span> + \</span><br><span class="line">    <span class="string">'raw/master/01_Introduction/07_Working_with_Data_Sources/birthweight_data/birthweight.dat'</span></span><br><span class="line">    birth_file = requests.get(birthdata_url)</span><br><span class="line">    birth_data = birth_file.text.split(<span class="string">'\r\n'</span>)</span><br><span class="line">    birth_header = birth_data[<span class="number">0</span>].split(<span class="string">'\t'</span>)</span><br><span class="line">    birth_data = [[float(x) <span class="keyword">for</span> x <span class="keyword">in</span> y.split(<span class="string">'\t'</span>) <span class="keyword">if</span> len(x)&gt;=<span class="number">1</span>] <span class="keyword">for</span> y <span class="keyword">in</span> birth_data[<span class="number">1</span>:] <span class="keyword">if</span> len(y)&gt;=<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">with</span> open(birth_weight_file, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        writer = csv.writer(f)</span><br><span class="line">        writer.writerow(birth_header)</span><br><span class="line">        writer.writerows(birth_data)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数据，就像我们之前说的，要放在placeholder得数据是要加载在数组里面得</span></span><br><span class="line">birth_data = []</span><br><span class="line"><span class="keyword">with</span> open(birth_weight_file, newline=<span class="string">''</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">     csv_reader = csv.reader(csvfile)</span><br><span class="line">     birth_header = next(csv_reader)</span><br><span class="line">     <span class="keyword">for</span> row <span class="keyword">in</span> csv_reader:</span><br><span class="line">         birth_data.append(row)</span><br><span class="line"></span><br><span class="line">birth_data = [[float(x) <span class="keyword">for</span> x <span class="keyword">in</span> row] <span class="keyword">for</span> row <span class="keyword">in</span> birth_data]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分数据</span></span><br><span class="line">y_vals = np.array([x[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> birth_data])</span><br><span class="line">x_vals = np.array([x[<span class="number">1</span>:<span class="number">8</span>] <span class="keyword">for</span> x <span class="keyword">in</span> birth_data])</span><br><span class="line"></span><br><span class="line">seed = <span class="number">99</span></span><br><span class="line">np.random.seed(seed)</span><br><span class="line">tf.set_random_seed(seed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分离训练集和测试集</span></span><br><span class="line">train_indices = np.random.choice(len(x_vals), round(len(x_vals)*<span class="number">0.8</span>), replace=<span class="keyword">False</span>)</span><br><span class="line">test_indices = np.array(list(set(range(len(x_vals))) - set(train_indices)))</span><br><span class="line">x_vals_train = x_vals[train_indices]</span><br><span class="line">x_vals_test = x_vals[test_indices]</span><br><span class="line">y_vals_train = y_vals[train_indices]</span><br><span class="line">y_vals_test = y_vals[test_indices]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化数据函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize_cols</span><span class="params">(m)</span>:</span></span><br><span class="line">    col_max = m.max(axis=<span class="number">0</span>)</span><br><span class="line">    col_min = m.min(axis=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> (m-col_min) / (col_max - col_min)</span><br><span class="line">    </span><br><span class="line">x_vals_train = np.nan_to_num(normalize_cols(x_vals_train))</span><br><span class="line">x_vals_test = np.nan_to_num(normalize_cols(x_vals_test))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义批处理大小</span></span><br><span class="line">batch_size = <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 placeholders</span></span><br><span class="line">x_data = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">7</span>], dtype=tf.float32)</span><br><span class="line">y_target = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建回归变量</span></span><br><span class="line">A = tf.Variable(tf.random_normal(shape=[<span class="number">7</span>,<span class="number">1</span>]))</span><br><span class="line">b = tf.Variable(tf.random_normal(shape=[<span class="number">1</span>,<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型图的操作</span></span><br><span class="line">model_output = tf.add(tf.matmul(x_data, A), b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义交叉熵损失函数</span></span><br><span class="line">loss = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=model_output, labels=y_target))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义优化器</span></span><br><span class="line">my_opt = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>)</span><br><span class="line">train_step = my_opt.minimize(loss)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化全局变量</span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测值</span></span><br><span class="line">prediction = tf.round(tf.sigmoid(model_output))</span><br><span class="line">predictions_correct = tf.cast(tf.equal(prediction, y_target), tf.float32)</span><br><span class="line">accuracy = tf.reduce_mean(predictions_correct)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练</span></span><br><span class="line">loss_vec = []</span><br><span class="line">train_acc = []</span><br><span class="line">test_acc = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1500</span>):</span><br><span class="line">    rand_index = np.random.choice(len(x_vals_train), size=batch_size)</span><br><span class="line">    rand_x = x_vals_train[rand_index]</span><br><span class="line">    rand_y = np.transpose([y_vals_train[rand_index]])</span><br><span class="line">    sess.run(train_step, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line"></span><br><span class="line">    temp_loss = sess.run(loss, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">    loss_vec.append(temp_loss)</span><br><span class="line">    temp_acc_train = sess.run(accuracy, feed_dict=&#123;x_data: x_vals_train, y_target: np.transpose([y_vals_train])&#125;)</span><br><span class="line">    train_acc.append(temp_acc_train)</span><br><span class="line">    temp_acc_test = sess.run(accuracy, feed_dict=&#123;x_data: x_vals_test, y_target: np.transpose([y_vals_test])&#125;)</span><br><span class="line">    test_acc.append(temp_acc_test)</span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">300</span>==<span class="number">0</span>: <span class="comment"># 每三百次打一次损失函数</span></span><br><span class="line">        print(<span class="string">'Loss = '</span> + str(temp_loss))</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 画出loss的值</span></span><br><span class="line">plt.plot(loss_vec, <span class="string">'k-'</span>)</span><br><span class="line">plt.title(<span class="string">'Cross Entropy Loss per Generation'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Generation'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Cross Entropy Loss'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出训练和测试的准确率</span></span><br><span class="line">plt.plot(train_acc, <span class="string">'k-'</span>, label=<span class="string">'Train Set Accuracy'</span>)</span><br><span class="line">plt.plot(test_acc, <span class="string">'r--'</span>, label=<span class="string">'Test Set Accuracy'</span>)</span><br><span class="line">plt.title(<span class="string">'Train and Test Accuracy'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Generation'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Accuracy'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'lower right'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>这是补上周的博客，让大家认识一下逻辑回归模型的基本建立。有什么疑问，发邮件air@weaf.top。期待你哦！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;tensorflow-logistic-regression&quot;&gt;TensorFlow Logistic
        
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/categories/TensorFlow/"/>
    
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>Pillow的简单使用</title>
    <link href="http://weafteam.github.io/posts/33d9791f/"/>
    <id>http://weafteam.github.io/posts/33d9791f/</id>
    <published>2018-05-17T02:03:18.000Z</published>
    <updated>2018-05-29T01:27:49.882Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近导师让我根据已有的笔画位置信息，生成相对应的图像信息，其中用到的就是Pillow库，所以接下来就按照这个任务要求，对Pillow这个库进行使用讲解。</p></blockquote><h1 id="数据">数据</h1><p>先介绍下数据吧，当时导师给了我一份600M的JSON文件，看到之后我的内心毫无波澜，甚至还想来一份黄焖鸡米饭。虽然数据量很大，但是每条数据是很规范的，例如这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;_id&quot;:&#123;&quot;$oid&quot;:&quot;58cbeb882398b78ed0c8165b&quot;&#125;,&quot;word&quot;:&quot;640,83;640,83;642,93;645,102;650,112;653,121;654,128;656,136;654,143;649,152;641,164;630,178;616,193;599,208;583,224;571,234;564,241;558,246;557,250;556,254;562,257;567,260;573,263;575,264;578,270;576,278;572,289;566,303;557,320;549,332;542,342;539,348;537,352;538,353;539,354;541,354;543,355;544,356;544,358;544,363;543,372;541,384;538,396;536,405;536,411;536,415;537,417;542,418;546,420;551,420;554,421;555,422;555,427;552,437;546,455;533,479;514,511;493,548;473,580;460,604;452,622;448,632;448,638;451,639;464,637;484,621;504,600;518,581;527,566;530,558;531,552;529,548;526,545;525,542;523,539;526,534;533,526;546,519;555,514;565,514;569,515;570,522;567,537;560,557;551,577;544,592;540,600;540,604;540,605;541,606;544,607;548,609;550,610;552,613;552,618;552,627;551,637;549,647;548,653;547,658;547,661;549,664;550,665;553,668;554,672;556,676;556,686;555,697;553,708;550,717;549,722;549,725;551,728;553,730;557,733;560,736;563,743;565,754;561,777;552,804;540,833;524,862;508,884;496,899;490,906;485,908;484,903;484,890;494,863;506,842;522,829;543,821;568,835;589,855;608,886;622,923;629,946;633,966;633,977;633,979#577,414;577,414;593,416;614,420;648,423;666,423;689,418;704,414;724,404;742,390;755,381&quot;,&quot;wordIndex&quot;:8826,&quot;str&quot;:&quot;ᠠᠯᠳᠠᠬᠤ&quot;,&quot;createAtDate&quot;:&#123;&quot;$date&quot;:&quot;2017-03-17T13:58:32.767Z&quot;&#125;,&quot;updateAtDate&quot;:&#123;&quot;$date&quot;:&quot;2017-03-17T13:58:32.767Z&quot;&#125;,&quot;phoneId&quot;:&quot;9e29fc4021b45fbe&quot;,&quot;userId&quot;:&quot;0161132290&quot;,&quot;paid&quot;:false,&quot;__v&quot;:0&#125;</span><br></pre></td></tr></table></figure><p>word字段就是笔画的信息，所以现在找个画笔跟着这个笔画画就行了。</p><h1 id="思路">思路</h1><p>因为这些笔画的位置和大小并不是特别规范的（因为收集这些手写体的时候，就是利用手机的手写输入收集的，所以不是很规范），所以首先生成一个3000*3000的灰度图（底是白色），然后用一个很粗的画笔（当时用来一个width = 18的画笔）将上述的笔画画出来，在这之前我们可以先找出笔画的横向最大最小值和纵向的最大最小值，然后根据这四个值，在画布上裁剪出一个矩形框，最后我们可以将裁剪出的矩形区域resize，按照要求是生成宽度为32，高度等比例缩放的图像，当然这个时候我们可以加一个参数，叫做抗锯齿，稍后我会讲到。</p><p>因为传统的PIL库不支持Python3，所以使用从PIL派生出来的Pillow库。</p><h1 id="image和imagedraw类">Image和ImageDraw类</h1><p>Pillow中最重要的就是Image类，该类存在于同名的模块中。我们本次用到的实例化方式是直接创建一个图片。</p><p><strong>生成画布</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image = Image.new(<span class="string">"L"</span>,(<span class="number">3000</span>,<span class="number">3000</span>),<span class="string">"white"</span>)</span><br></pre></td></tr></table></figure><p>ImageDraw类，从名字中不难看出他的作用，那么接下来就开始画图吧。</p><p>顺便说一下，word字段里面，<span class="math inline">\(;\)</span>分割的是点，<span class="math inline">\(,\)</span>分割的是x和y，<span class="math inline">\(#\)</span>分割的是笔画，所以根据这个层级关系，三层嵌套的方式就可以将这些笔画刻画出来。</p><p><strong>生成画笔</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">draw = ImageDraw.Draw(image)</span><br></pre></td></tr></table></figure><p><strong>画图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lines = [[[int(x) <span class="keyword">for</span> x <span class="keyword">in</span> point.split(<span class="string">','</span>)] <span class="keyword">for</span> point <span class="keyword">in</span> line.split(<span class="string">';'</span>)] <span class="keyword">for</span> line <span class="keyword">in</span> fileJson[<span class="string">'word'</span>].split(<span class="string">'#'</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">            <span class="keyword">if</span>(len(line)&gt;<span class="number">1</span>):</span><br><span class="line">                draw.line((line[<span class="number">0</span>][<span class="number">0</span>], -line[<span class="number">0</span>][<span class="number">1</span>], line[<span class="number">1</span>][<span class="number">0</span>], -line[<span class="number">1</span>][<span class="number">1</span>]),fill=<span class="string">'black'</span>,width=<span class="number">18</span>)</span><br><span class="line">                temp = [line[<span class="number">1</span>][<span class="number">0</span>],line[<span class="number">1</span>][<span class="number">1</span>]]</span><br><span class="line">                <span class="keyword">for</span> point <span class="keyword">in</span> line:</span><br><span class="line">                    draw.line((temp[<span class="number">0</span>],temp[<span class="number">1</span>],point[<span class="number">0</span>],point[<span class="number">1</span>]),fill=<span class="string">'black'</span>,width=<span class="number">18</span>)</span><br><span class="line">                    temp=[point[<span class="number">0</span>],point[<span class="number">1</span>]]</span><br></pre></td></tr></table></figure><p><strong>裁剪</strong></p><p>计算出横向纵向上的最大最小值，进行裁剪。（之所以加30，是因为有白边的情况下看着比较舒服，但是min的值并没有加，原因是容易产生黑杠）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">box = (hor_min  , ver_min , hor_max + <span class="number">30</span> , ver_max + <span class="number">30</span>)</span><br><span class="line">b = image.crop(box)</span><br></pre></td></tr></table></figure><p><strong>resize并保存</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = b.resize((<span class="number">32</span>,length),Image.ANTIALIAS)</span><br><span class="line">a.save(path)</span><br></pre></td></tr></table></figure><p>本次实验很简单，用到了Pillow中不多的函数，其实Pillow中还有很多有趣的操作，请大家自行研究它的中文文档。</p><p><strong>效果</strong></p><p>最后给大家看下效果：</p><p><img src="https://i.loli.net/2018/05/17/5afd163532d24.bmp" alt="593d584661d6b6417c2b19d6.bmp"></p><p><img src="https://i.loli.net/2018/05/17/5afd1695ae569.bmp" alt="58dba09d2398b78ed0c9a7ac.bmp"></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;最近导师让我根据已有的笔画位置信息，生成相对应的图像信息，其中用到的就是Pillow库，所以接下来就按照这个任务要求，对Pillow这个库进行使用讲解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1
        
      
    
    </summary>
    
    
      <category term="Pillow Python OCR" scheme="http://weafteam.github.io/tags/Pillow-Python-OCR/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 关乎java程序员</title>
    <link href="http://weafteam.github.io/posts/1cf77d1e/"/>
    <id>http://weafteam.github.io/posts/1cf77d1e/</id>
    <published>2018-05-16T18:04:44.000Z</published>
    <updated>2018-08-07T08:56:41.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一简介">一、简介</h1><p>Spring Boot2.0一推出就激起了一阵学习Spring Boot的热浪，就百度和搜索引擎的数据报告显示Spring Boot相关搜索指数急剧增加。</p><p>那么Spring Boot到底是什么？（想必大家都有了一些了解） 那么为什么会有这么多人去学习他呢？（值得思考的问题）</p><h3 id="spring-boot的诞生">Spring Boot的诞生</h3><p>随着使用Spring的人越来越多，Spring就开始从一个简单、单一的小框架变成一个大而全的开源软件，都后来，几乎用整个Spring就可以支撑起企业中所有的服务了。但是随之也使得带来一些问题。</p><p>之前的Spring 有着各种各样的配置文件。导致我们在使用的时候不得不配置很多东西。</p><p>后来Spring慢慢的发现了这个问题。为了解决这一问题，开始了Spring Boot项目的研发。</p><h3 id="spring-boot是什么">Spring Boot是什么？</h3><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。</p><h5 id="特点">特点</h5><ol type="1"><li>创建独立的Spring应用程序</li><li>嵌入的Tomcat，无需部署WAR文件</li><li>简化Maven配置</li><li>自动配置Spring</li><li>提供生产就绪型功能，如指标，健康检查和外部配置</li><li>绝对没有代码生成和对XML没有要求配置</li></ol><h1 id="二springboot关乎java程序员">二、SpringBoot关乎Java程序员</h1><p>首先我们要知道，现在企业中很多都是用Spring开源框架，并且现在Spring Boot2.0作为Spring的优秀产物，已经吸引了很多技术和企业去使用它。 这使得我们Java程序员不得不去学习他的一个原因。 其次，Spring Boot 还具有一下特点：</p><ol type="1"><li>Spring Boot 让开发变得更简单<ol type="1"><li>登录网址 http://start.spring.io/ 选择对应的组件直接下载</li><li>导入项目，直接开发</li></ol></li><li>Spring Boot 使测试变得更简单<ol type="1"><li>引入spring-boot-start-test依赖包</li><li>对数据库、Mock、 Web 等各种情况进行测试。</li></ol></li><li>Spring Boot 让配置变得更简单</li><li>Spring Boot 让部署变得更简单</li><li>Spring Boot 让监控变得更简单</li></ol><h1 id="三项目生产">三、项目生产</h1><p>Spring Boot项目搭建非常简单</p><p>我们可以使用spring提供的网站直接生产自己想要的项目</p><p><a href="https://start.spring.io/" class="uri" target="_blank" rel="noopener">https://start.spring.io/</a></p><p><img src="https://weaf.oss-cn-beijing.aliyuncs.com/springboot-1.png" alt="springboot-1"></p><p>这里生产的demo可以将你所需的所有东西都集成进去。</p><p>我们可以通过点击 <strong>Switch to the full version</strong> 来查看所有支持的列表</p><p>四、目录解析</p><p><img src="https://weaf.oss-cn-beijing.aliyuncs.com/springboot-2.png" alt="springboot-2"></p><p>我们可以看出默认给出的demo的项目目录很简单。</p><p>都是我们通常使用的三个目录</p><ol type="1"><li>src/main/java/</li><li>src/main/resources/</li><li>src/test/java/</li></ol><p>这里resources 我使用的是yaml文件。而且SpringBoot对它的支持也是非常好的。 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/springboot-3.png" alt="springboot-3">。</p><p>参考文档：</p><ol type="1"><li><a href="https://spring.io/projects/spring-boot" class="uri" target="_blank" rel="noopener">https://spring.io/projects/spring-boot</a></li><li><a href="http://blog.51cto.com/ityouknow/2128700" class="uri" target="_blank" rel="noopener">http://blog.51cto.com/ityouknow/2128700</a></li></ol>]]></content>
    
    <summary type="html">
    
      Spring Boot 关乎java程序员
    
    </summary>
    
      <category term="JAVA" scheme="http://weafteam.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://weafteam.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>asyncio 不完全指北（五）</title>
    <link href="http://weafteam.github.io/posts/112d613e/"/>
    <id>http://weafteam.github.io/posts/112d613e/</id>
    <published>2018-05-13T15:09:56.000Z</published>
    <updated>2018-08-07T08:56:41.649Z</updated>
    
    <content type="html"><![CDATA[<p>书接上文。</p><h2 id="用协程和流实现异步-i-o">用协程和流实现异步 I / O</h2><p>本节将重新实现 echo 服务器和客户端的两个示例程序，只不过会使用协程和 <code>asyncio</code> 流 API 而不是 <code>Protocol</code> 和 <code>Transport</code> 类抽象。这些示例在比前面讨论的<code>Protocol</code> API 更低的抽象级别上操作，但是处理的事件是相似的。</p><h3 id="echo-服务器">Echo 服务器</h3><p>服务器程序首先导入所需的 <code>asyncio</code> 和 <code>logging</code> 模块，然后创建事件循环对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">SERVER_ADDRESS = (<span class="string">'localhost'</span>, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">    format=<span class="string">'%(name)s: %(message)s'</span>,</span><br><span class="line">    stream=sys.stderr,</span><br><span class="line">)</span><br><span class="line">log = logging.getLogger(<span class="string">'main'</span>)</span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br></pre></td></tr></table></figure><p>然后定义一个协程来处理通信。每次客户端连接时，都会调用协程的新实例，从而在该函数中的代码一次只能与一个客户端通信。Python 的语言运行时管理每个协程实例的状态，因此应用程序代码不需要管理任何额外的数据结构来跟踪单独的客户端。</p><p>协程接受的参数是与新连接关联的 <code>StreamReader</code> 和 <code>StreamWriter</code> 实例。与 <code>Transport</code> 一样，可以通过 <code>writer</code> 的 <code>get_extra_info()</code> 方法访问客户端地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(reader, writer)</span>:</span></span><br><span class="line">    address = writer.get_extra_info(<span class="string">'peername'</span>)</span><br><span class="line">    log = logging.getLogger(<span class="string">'echo_&#123;&#125;_&#123;&#125;'</span>.format(*address))</span><br><span class="line">    log.debug(<span class="string">'connection accepted'</span>)</span><br></pre></td></tr></table></figure><p>虽然在建立连接时调用协程，但可能还没有任何要读取的数据。为了避免在读取时阻塞，协程使用 <code>await read()</code> 来允许事件循环继续处理其他任务，直到有数据要读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    data = <span class="keyword">await</span> reader.read(<span class="number">128</span>)</span><br></pre></td></tr></table></figure><p>如果客户端发送了数据，则从 <code>await</code> 返回数据，并可通过将其传递给 <code>writer</code> 发送回客户端。对 <code>write()</code> 的多个调用可用于缓冲传出的数据，然后使用 <code>drain()</code> 刷新结果。由于刷新网络 I / O 可能会阻塞，因此再次使用 <code>await</code> 来恢复对事件循环的控制，事件循环监视写入 socket，并在可能发送更多数据时调用 <code>writer</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> data:</span><br><span class="line">    log.debug(<span class="string">f'received <span class="subst">&#123;data&#125;</span>'</span>)</span><br><span class="line">    writer.write(data)</span><br><span class="line">    <span class="keyword">await</span> writer.drain()</span><br><span class="line">    log.debug(<span class="string">f'sent <span class="subst">&#123;data&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>如果客户端未发送任何数据，<code>read()</code> 将返回一个空字节串，以指示连接已关闭。服务器需要关闭 socket 以写入客户端，然后 协程可以返回以指示它已完成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    log.debug(<span class="string">'closing'</span>)</span><br><span class="line">    writer.close()</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>启动服务器有两个步骤。首先，应用程序告诉事件循环要监听的主机名和 socket，使用协程创建新的服务器对象。 <code>start_server()</code>  方法本身就是一个协程，因此必须由事件循环处理结果才能实际启动服务器。完成协程产生了绑定到事件循环的 <code>asyncio.Server</code> 实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">factory = asyncio.start_server(echo, *SERVER_ADDRESS)</span><br><span class="line">server = event_loop.run_until_complete(factory)</span><br><span class="line">log.debug(<span class="string">'starting up on &#123;&#125; port &#123;&#125;'</span>.format(*SERVER_ADDRESS))</span><br></pre></td></tr></table></figure><p>需要运行事件循环以处理事件和客户端请求。对于长期运行的服务，<code>run_forever()</code> 方法是最简单的方法。当事件循环停止时，无论是通过应用程序代码还是通过发信号通知进程，服务器都可以关闭以正确清理 socket，然后可以关闭事件循环以在程序退出之前完成对任何其他事务的处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    event_loop.run_forever()</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    log.debug(<span class="string">'closing server'</span>)</span><br><span class="line">    server.close()</span><br><span class="line">    event_loop.run_until_complete(server.wait_closed())</span><br><span class="line">    log.debug(<span class="string">'closing event loop'</span>)</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><h3 id="echo-客户端">Echo 客户端</h3><p>使用协程构建客户端非常类似于构建服务器。代码再次开始于导入 <code>asyncio</code> 和 <code>logging</code> 模块，然后创建事件循环对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">MESSAGES = [</span><br><span class="line">    <span class="string">b'This is the message. '</span>,</span><br><span class="line">    <span class="string">b'It will be sent '</span>,</span><br><span class="line">    <span class="string">b'in parts.'</span>,</span><br><span class="line">]</span><br><span class="line">SERVER_ADDRESS = (<span class="string">'localhost'</span>, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">    format=<span class="string">'%(name)s: %(message)s'</span>,</span><br><span class="line">    stream=sys.stderr,</span><br><span class="line">)</span><br><span class="line">log = logging.getLogger(<span class="string">'main'</span>)</span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br></pre></td></tr></table></figure><p><code>echo_client</code> 协程接受两个参数，告诉它服务器在哪里以及要发送什么消息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">echo_client</span><span class="params">(address, messages)</span>:</span></span><br></pre></td></tr></table></figure><p>当任务启动时调用协程，但它没有可用的活动连接。因此，第一步是让客户端建立自己的连接。它使用 <code>await</code> 来避免在 <code>open_connection()</code> 协程运行时阻塞其他活动：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log = logging.getLogger(<span class="string">'echo_client'</span>)</span><br><span class="line"></span><br><span class="line">log.debug(<span class="string">'connecting to &#123;&#125; port &#123;&#125;'</span>.format(*address))</span><br><span class="line">reader, writer = <span class="keyword">await</span> asyncio.open_connection(*address)</span><br></pre></td></tr></table></figure><p><code>open_connection()</code> 协程返回与新 socket 关联的 <code>StreamReader</code> 和 <code>StreamWriter</code> 实例。下一步是使用 <code>writer</code> 向服务器发送数据。与服务器一样，<code>writer</code> 将缓冲传出的数据，直到 socket 就绪或使用 <code>drain()</code> 刷新结果。由于刷新网络 I / O 可能会阻塞，因此再次使用 <code>await</code> 来恢复对事件循环的控制，事件循环监视写入 socket，并在可能发送更多数据时调用 <code>writer</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> msg <span class="keyword">in</span> messages:</span><br><span class="line">    writer.write(msg)</span><br><span class="line">    log.debug(<span class="string">f'sending <span class="subst">&#123;msg&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">if</span> writer.can_write_eof():</span><br><span class="line">    writer.write_eof()</span><br><span class="line"><span class="keyword">await</span> writer.drain()</span><br></pre></td></tr></table></figure><p>接下来，客户端通过尝试读取数据直到没有要读取的内容来获取来自服务器的响应。为了避免阻塞单个 <code>read()</code> 调用，<code>await</code> 将控制权交还给事件循环。如果服务器已发送数据，则会记录数据。如果服务器未发送任何数据，<code>read()</code> 将返回一个空字节串，指示连接已关闭。客户端需要关闭 socket 以发送到服务器，然后返回以指示已完成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">log.debug(<span class="string">'waiting for response'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    data = <span class="keyword">await</span> reader.read(<span class="number">128</span>)</span><br><span class="line">    <span class="keyword">if</span> data:</span><br><span class="line">        log.debug(<span class="string">f'received <span class="subst">&#123;data&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log.debug(<span class="string">'closing'</span>)</span><br><span class="line">        writer.close()</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>要启动客户端，使用协程调用事件循环以创建客户端。使用 <code>run_until_complete()</code>  可避免客户端程序中出现无限循环。与<code>Protocol</code> 示例不同，协程完成时不需要单独的 <code>future</code> 发出信号，因为 <code>echo_client()</code> 包含所有客户端逻辑本身，并且在收到响应并关闭服务器连接之前不会返回：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    event_loop.run_until_complete(echo_client(SERVER_ADDRESS, MESSAGES))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    log.debug(<span class="string">'closing event loop'</span>)</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><h3 id="输出">输出</h3><p>在一个窗口中运行服务器而在另一个窗口中运行客户端。</p><p>客户端将产生以下输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">asyncio: Using selector: SelectSelector</span><br><span class="line">echo_client: connecting to localhost port 10000</span><br><span class="line">echo_client: sending b'This is the message. '</span><br><span class="line">echo_client: sending b'It will be sent '</span><br><span class="line">echo_client: sending b'in parts.'</span><br><span class="line">echo_client: waiting for response</span><br><span class="line">echo_client: received b'This is the message. It will be sent in parts.'</span><br><span class="line">echo_client: closing</span><br><span class="line">main: closing event loop</span><br></pre></td></tr></table></figure><p>虽然客户端总是单独发送消息，但客户端第一次运行时，服务器会收到一条大消息，并将该消息返回给客户端。根据网络的繁忙程度以及是否在准备所有数据之前刷新网络缓冲区，这些结果在后续运行中会有所不同：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">asyncio: Using selector: SelectSelector</span><br><span class="line">main: starting up on localhost port 10000</span><br><span class="line">echo_::1_11075: connection accepted</span><br><span class="line">echo_::1_11075: received b'This is the message. It will be sent in parts.'</span><br><span class="line">echo_::1_11075: sent b'This is the message. It will be sent in parts.'</span><br><span class="line">echo_::1_11075: closing</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo_::1_11200: connection accepted</span><br><span class="line">echo_::1_11200: received b'This is the message. It will be sent '</span><br><span class="line">echo_::1_11200: sent b'This is the message. It will be sent '</span><br><span class="line">echo_::1_11200: received b'in parts.'</span><br><span class="line">echo_::1_11200: sent b'in parts.'</span><br><span class="line">echo_::1_11200: closing</span><br></pre></td></tr></table></figure><h2 id="与子进程协作">与子进程协作</h2><p>为了利用现有代码而不重写，或者访问 Python 中不可用的库或功能，我们经常需要使用其他程序或进程。与网络 I / O 一样，<code>asyncio</code> 包括两个抽象，用于启动另一个程序，然后与它交互。</p><h3 id="使用子进程的-protocol-抽象">使用子进程的 Protocol 抽象</h3><p>这个例子使用协程启动一个进程来运行 Unix 命令 <code>df</code>，以便查看在本地磁盘上的可用空间。它使用 <code>subprocess_exec()</code> 启动进程，并将其绑定到知道如何读取 <code>df</code> 命令输出并对其进行分析的 <code>Protocol</code> 类。<code>Protocol</code> 类的方法是根据子进程的 I / O 事件自动调用的。因为 <code>stdin</code> 和 <code>stderr</code> 参数都设置为 <code>None</code>，所以这些通信通道不会连接到新进程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run_df</span><span class="params">(loop)</span>:</span></span><br><span class="line">    print(<span class="string">'in run_df'</span>)</span><br><span class="line"></span><br><span class="line">    cmd_done = asyncio.Future(loop=loop)</span><br><span class="line">    factory = functools.partial(DFProtocol, cmd_done)</span><br><span class="line">    proc = loop.subprocess_exec(</span><br><span class="line">        factory,</span><br><span class="line">        <span class="string">'df'</span>,</span><br><span class="line">        <span class="string">'-hl'</span>,</span><br><span class="line">        stdin=<span class="keyword">None</span>,</span><br><span class="line">        stderr=<span class="keyword">None</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">'launching process'</span>)</span><br><span class="line">        transport, protocol = <span class="keyword">await</span> proc</span><br><span class="line">        print(<span class="string">'waiting for process to complete'</span>)</span><br><span class="line">        <span class="keyword">await</span> cmd_done</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        transport.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cmd_done.result()</span><br></pre></td></tr></table></figure><p>类 <code>DFProtocol</code> 继承自 <code>SubprocessProtocol</code>，该 <code>Protocol</code> 定义了类通过管道与另一进程通信的 API。<code>done</code> 参数是调用者用来监视进程是否完成的 <code>future</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DFProtocol</span><span class="params">(asyncio.SubprocessProtocol)</span>:</span></span><br><span class="line"></span><br><span class="line">    FD_NAMES = [<span class="string">'stdin'</span>, <span class="string">'stdout'</span>, <span class="string">'stderr'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, done_future)</span>:</span></span><br><span class="line">        self.done = done_future</span><br><span class="line">        self.buffer = bytearray()</span><br><span class="line">        super().__init__()</span><br></pre></td></tr></table></figure><p>与 socket 通信一样，在设置新进程的输入通道时调用 <code>connection_made()</code>。<code>transport</code> 参数是 <code>BaseSubprocessTransport</code> 子类的一个实例。如果进程被配置为接收输入，则它可以读取进程输出的数据并将数据写入进程的输入流：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connection_made</span><span class="params">(self, transport)</span>:</span></span><br><span class="line">    print(<span class="string">f'process started <span class="subst">&#123;transport.get_pid()&#125;</span>'</span>)</span><br><span class="line">    self.transport = transport</span><br></pre></td></tr></table></figure><p>当进程生成输出时，<code>pipe_data_received()</code> 将使用发送数据的文件描述符和从管道读取的实际数据作为参数调用。<code>Protocol</code>类将进程的标准输出通道的输出保存在缓冲区中，以供以后处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pipe_data_received</span><span class="params">(self, fd, data)</span>:</span></span><br><span class="line">    print(<span class="string">f'read <span class="subst">&#123;len(data)&#125;</span> bytes from <span class="subst">&#123;self.FD_NAMES[fd]&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">if</span> fd == <span class="number">1</span>:</span><br><span class="line">        self.buffer.extend(data)</span><br></pre></td></tr></table></figure><p>当进程终止时，<code>process_exited()</code> 将被调用。通过调用 <code>get_returncode()</code> 可以从 <code>transport</code> 对象获得进程的退出代码。在这种情况下，如果没有报告错误，则可以在通过 <code>future</code> 实例返回可用输出之前对其进行解码和分析。如果出现错误，则结果为空。设置 <code>future</code> 的结果会告诉 <code>run_df()</code> 进程已退出，因此它会清理并返回结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_exited</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'process exited'</span>)</span><br><span class="line">    return_code = self.transport.get_returncode()</span><br><span class="line">    print(<span class="string">f'return code <span class="subst">&#123;return_code&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> return_code:</span><br><span class="line">        cmd_output = bytes(self.buffer).decode()</span><br><span class="line">        results = self._parse_results(cmd_output)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        results = []</span><br><span class="line">    self.done.set_result((return_code, results))</span><br></pre></td></tr></table></figure><p>命令的输出被解析成一系列字典，将每行输出的标题名称映射到值，并返回结果列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_parse_results</span><span class="params">(self, output)</span>:</span></span><br><span class="line">    print(<span class="string">'parsing results'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> output:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    lines = output.splitlines()</span><br><span class="line">    headers = lines[<span class="number">0</span>].split()</span><br><span class="line">    devices = lines[<span class="number">1</span>:]</span><br><span class="line">    results = [dict(zip(headers, line.split())) <span class="keyword">for</span> line <span class="keyword">in</span> devices]</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure><p><code>run_df()</code> 协程使用 <code>run_until_complete()</code> 运行，然后检查结果并打印每个设备上的可用空间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    return_code, results = event_loop.run_until_complete(run_df(event_loop))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> return_code:</span><br><span class="line">    print(<span class="string">f'error exit <span class="subst">&#123;return_code&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'\nFree space:'</span>)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> results:</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;r[<span class="string">"Mounted"</span>]:<span class="number">25</span>&#125;</span>: <span class="subst">&#123;r[<span class="string">"Avail"</span>]&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>下面的输出显示了执行步骤的顺序，以及系统中驱动器的可用空间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">in run_df</span><br><span class="line">launching process</span><br><span class="line">process started 6170</span><br><span class="line">waiting for process to complete</span><br><span class="line">read 375 bytes from stdout</span><br><span class="line">process exited</span><br><span class="line">return code 0</span><br><span class="line">parsing results</span><br><span class="line"></span><br><span class="line">Free space:</span><br><span class="line">/                        : 41G</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="用协程和流调用子进程">用协程和流调用子进程</h3><p>若要使用协程直接运行进程，而不是通过 <code>Protocol</code> 子类访问进程，请调用 <code>create_subprocess_exec()</code>，并指定一个连接到管道的标准输出、标准错误和标准输入。产生子进程的协程的结果是一个 <code>Process</code> 实例，可用于操作子进程或与其通信：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> asyncio.subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run_df</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in run_df'</span>)</span><br><span class="line"></span><br><span class="line">    buffer = bytearray()</span><br><span class="line"></span><br><span class="line">    create = asyncio.create_subprocess_exec(</span><br><span class="line">        <span class="string">'df'</span>,</span><br><span class="line">        <span class="string">'-hl'</span>,</span><br><span class="line">        stdout=asyncio.subprocess.PIPE,</span><br><span class="line">    )</span><br><span class="line">    print(<span class="string">'launching process'</span>)</span><br><span class="line">    proc = <span class="keyword">await</span> create</span><br><span class="line">    print(<span class="string">f'process started <span class="subst">&#123;proc.pid&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>df</code> 除了命令行参数之外不需要任何输入，因此下一步是读取所有输出。对于 <code>Protocol</code>，无法控制一次读取多少数据。这个例子中使用了 <code>readline()</code>，但也可以直接调用 <code>read()</code> 读取不是按行组织的数据。命令的输出被缓冲，就像 <code>Protocol</code> 示例一样，因此稍后可以对其进行分析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    line = <span class="keyword">await</span> proc.stdout.readline()</span><br><span class="line">    print(<span class="string">f'read <span class="subst">&#123;line!r&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">        print(<span class="string">'no more output from command'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    buffer.extend(line)</span><br></pre></td></tr></table></figure><p><code>readline()</code> 方法在程序已完成不再有输出时返回空字节串。为确保正确清除进程，下一步是等待进程完全退出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'waiting for process to complete'</span>)</span><br><span class="line"><span class="keyword">await</span> proc.wait()</span><br></pre></td></tr></table></figure><p>此时可以检查退出状态，以确定是解析输出还是将错误视为未生成输出。解析逻辑与前面的示例相同，但处于独立函数中，因为没有可以包装它的 <code>Protocol</code> 类。解析数据后，结果和退出代码将返回给调用方：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">return_code = proc.returncode</span><br><span class="line">print(<span class="string">f'return code <span class="subst">&#123;return_code&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> return_code:</span><br><span class="line">    cmd_output = bytes(buffer).decode()</span><br><span class="line">    results = _parse_results(cmd_output)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    results = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (return_code, results)</span><br></pre></td></tr></table></figure><p>主程序看起来类似于基于 <code>Protocol</code> 的示例，因为实现的改变被隔离在 <code>run_df()</code> 中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    return_code, results = event_loop.run_until_complete(run_df())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> return_code:</span><br><span class="line">    print(<span class="string">f'error exit <span class="subst">&#123;return_code&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'\nFree space:'</span>)</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> results:</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;r[<span class="string">"Mounted"</span>]:<span class="number">25</span>&#125;</span>: <span class="subst">&#123;r[<span class="string">"Avail"</span>]&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>由于 <code>df</code> 的输出可以一次读取一行，因此它将显示程序的进度。否则，输出看起来与前面的示例类似：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">in run_df</span><br><span class="line">launching process</span><br><span class="line">process started 7354</span><br><span class="line">read b'Filesystem      Size  Used Avail Use% Mounted on\n'</span><br><span class="line">read b'/dev/vda1        50G  6.0G   41G  13% /\n'</span><br><span class="line">...</span><br><span class="line">read b''</span><br><span class="line">no more output from command</span><br><span class="line">waiting for process to complete</span><br><span class="line">return code 0</span><br><span class="line">parsing results</span><br><span class="line"></span><br><span class="line">Free space:</span><br><span class="line">/                        : 41G</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="向子进程发送数据">向子进程发送数据</h3><p>前面的两个示例都仅使用单个通信信道来从子进程读取数据。通常需要将数据发送到命令中进行处理。下面将定义一个协程，用于执行 Unix 命令 <code>tr</code> 以转换其输入流中的字符。这个例子中<code>tr</code> 用于将小写字母转换为大写字母。</p><p><code>to_upper()</code> 协程将输入字符串作为参数。它产生运行 <code>tr [:lower:] [:upper:]</code> 的子进程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> asyncio.subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">to_upper</span><span class="params">(input)</span>:</span></span><br><span class="line">    print(<span class="string">'in to_upper'</span>)</span><br><span class="line"></span><br><span class="line">    create = asyncio.create_subprocess_exec(</span><br><span class="line">        <span class="string">'tr'</span>,</span><br><span class="line">        <span class="string">'[:lower:]'</span>,</span><br><span class="line">        <span class="string">'[:upper:]'</span>,</span><br><span class="line">        stdout=asyncio.subprocess.PIPE,</span><br><span class="line">        stdin=asyncio.subprocess.PIPE,</span><br><span class="line">    )</span><br><span class="line">    print(<span class="string">'launching process'</span>)</span><br><span class="line">    proc = <span class="keyword">await</span> create</span><br><span class="line">    print(<span class="string">f'pid <span class="subst">&#123;proc.pid&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>接下来 <code>to_upper()</code> 使用 <code>Process</code> 的 <code>communicate()</code> 方法将输入字符串发送到命令，并异步读取所有生成的输出。与 <code>subprocess.Popen</code> 版本的方法相同，<code>communicate()</code>  返回完整的输出字节串。如果一个命令可能产生的数据超出了可以充裕的放入内存的范围，或者无法一次产生输入，或者必须增量处理输出，则可以直接使用进程的 <code>stdin</code>、<code>stdout</code> 和 <code>stderr</code> 句柄，而不是调用 <code>communicate()</code> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'communicating with process'</span>)</span><br><span class="line">stdout, stderr = <span class="keyword">await</span> proc.communicate(input.encode())</span><br></pre></td></tr></table></figure><p>I / O 完成后，等待进程完全退出可确保进程得到正确清理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'waiting for process to complete'</span>)</span><br><span class="line"><span class="keyword">await</span> proc.wait()</span><br></pre></td></tr></table></figure><p>然后可以检查返回代码，并对输出字节串进行解码，以准备协程的返回值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">return_code = proc.returncode</span><br><span class="line">print(<span class="string">f'return code <span class="subst">&#123;return_code&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> return_code:</span><br><span class="line">    results = bytes(stdout).decode()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    results = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (return_code, results)</span><br></pre></td></tr></table></figure><p>程序的主要部分构建要转换的消息字符串，然后设置事件循环以运行 <code>to_upper()</code> 并打印结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">MESSAGE = <span class="string">"""</span></span><br><span class="line"><span class="string">This message will be converted</span></span><br><span class="line"><span class="string">to all caps.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    return_code, results = event_loop.run_until_complete(to_upper(MESSAGE))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> return_code:</span><br><span class="line">    print(<span class="string">f'error exit <span class="subst">&#123;return_code&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">f'Original: <span class="subst">&#123;MESSAGE!r&#125;</span>'</span>.format(MESSAGE))</span><br><span class="line">    print(<span class="string">f'Changed : <span class="subst">&#123;results!r&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>输出显示操作序列，然后显示如何转换简单文本消息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">in to_upper</span><br><span class="line">launching process</span><br><span class="line">pid 12428</span><br><span class="line">communicating with process</span><br><span class="line">waiting for process to complete</span><br><span class="line">return code 0</span><br><span class="line">Original: '\nThis message will be converted\nto all caps.\n'</span><br><span class="line">Changed : '\nTHIS MESSAGE WILL BE CONVERTED\nTO ALL CAPS.\n'</span><br></pre></td></tr></table></figure><h2 id="接收-unix-信号">接收 Unix 信号</h2><p>UNIX 系统事件通知通常会中断应用程序，从而触发其处理程序。当与 <code>asyncio</code> 一起使用时，信号处理程序回调与事件循环管理的其他协程和回调交错执行。这导致中断函数较少，因此需要提供安全防护来清理不完整的操作。</p><p>信号处理程序必须是常规的可调用程序，而不是协程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signal_handler</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">f'signal_handler(<span class="subst">&#123;name!r&#125;</span>)'</span>)</span><br></pre></td></tr></table></figure><p>信号处理程序是使用 <code>add_signal_handler()</code> 注册的。第一个参数是信号，第二个参数是回调。回调不传递参数，因此如果需要参数，可以使用 <code>functools.partical()</code> 包装函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line">event_loop.add_signal_handler(</span><br><span class="line">    signal.SIGHUP,</span><br><span class="line">    functools.partial(signal_handler, name=<span class="string">'SIGHUP'</span>),</span><br><span class="line">)</span><br><span class="line">event_loop.add_signal_handler(</span><br><span class="line">    signal.SIGUSR1,</span><br><span class="line">    functools.partial(signal_handler, name=<span class="string">'SIGUSR1'</span>),</span><br><span class="line">)</span><br><span class="line">event_loop.add_signal_handler(</span><br><span class="line">    signal.SIGINT,</span><br><span class="line">    functools.partial(signal_handler, name=<span class="string">'SIGINT'</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>本示例程序使用协程通过 <code>os.kill()</code> 向自身发送信号。在发送每个信号之后，协程将让出控制权以允许处理程序执行。在一个正常的应用程序中，会有很多应用程序代码让步给事件循环的地方，而不需要这样的人工让步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">send_signals</span><span class="params">()</span>:</span></span><br><span class="line">    pid = os.getpid()</span><br><span class="line">    print(<span class="string">f'starting send_signals for <span class="subst">&#123;pid&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> [<span class="string">'SIGHUP'</span>, <span class="string">'SIGHUP'</span>, <span class="string">'SIGUSR1'</span>, <span class="string">'SIGINT'</span>]:</span><br><span class="line">        print(<span class="string">f'sending <span class="subst">&#123;name&#125;</span>'</span>)</span><br><span class="line">        os.kill(pid, getattr(signal, name))</span><br><span class="line">        print(<span class="string">'yielding control'</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0.01</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p>主程序运行 <code>send_signals()</code>，直到它发送完所有信号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    event_loop.run_until_complete(send_signals())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><p>输出显示当 <code>send_signals()</code> 在发送信号后让出控制时如何调用处理程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">starting send_signals for 23185</span><br><span class="line">sending SIGHUP</span><br><span class="line">yielding control</span><br><span class="line">signal_handler('SIGHUP')</span><br><span class="line">sending SIGHUP</span><br><span class="line">yielding control</span><br><span class="line">signal_handler('SIGHUP')</span><br><span class="line">sending SIGUSR1</span><br><span class="line">yielding control</span><br><span class="line">signal_handler('SIGUSR1')</span><br><span class="line">sending SIGINT</span><br><span class="line">yielding control</span><br><span class="line">signal_handler('SIGINT')</span><br></pre></td></tr></table></figure><h2 id="将协程与线程和进程相结合">将协程与线程和进程相结合</h2><p>许多现有库尚未准备好与 <code>asyncio</code> 配合使用。它们可能会阻塞或依赖模块中不可用的并发功能。通过使用来自 <code>concurrent.futures</code> 的 <code>executor</code> 在单独的线程或单独的进程中运行代码，仍然可以在基于 <code>asyncio</code> 的应用程序中使用这些库。</p><h3 id="线程">线程</h3><p>事件循环的 <code>run_in_executor()</code> 方法接受的参数为 <code>executor</code> 实例，要调用的常规可调用对象以及要传递给可调用对象的任何参数。它返回一个可用于等待函数完成其工作并返回某些内容的 <code>future</code>。如果没有传入 <code>executor</code>，则会创建 <code>ThreadPoolExecutor</code>。此示例显式创建一个 <code>executor</code>，以限制可用的工作线程数。</p><p><code>ThreadPoolExecutor</code>启动其工作线程，然后在线程中调用每个提供的函数一次。此示例说明如何将 <code>run_in_executor()</code> 和 <code>wait()</code> 组合起来，以便在阻塞单独线程中运行的函数的同时，对事件循环具有协程让步控制，然后在这些函数完成时将其唤醒：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blocks</span><span class="params">(n)</span>:</span></span><br><span class="line">    log = logging.getLogger(<span class="string">f'blocks(<span class="subst">&#123;n&#125;</span>)'</span>)</span><br><span class="line">    log.info(<span class="string">'running'</span>)</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    log.info(<span class="string">'done'</span>)</span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run_blocking_tasks</span><span class="params">(executor)</span>:</span></span><br><span class="line">    log = logging.getLogger(<span class="string">'run_blocking_tasks'</span>)</span><br><span class="line">    log.info(<span class="string">'starting'</span>)</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">'creating executor tasks'</span>)</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    blocking_tasks = [loop.run_in_executor(executor, blocks, i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>)]</span><br><span class="line">    log.info(<span class="string">'waiting for executor tasks'</span>)</span><br><span class="line">    completed, pending = <span class="keyword">await</span> asyncio.wait(blocking_tasks)</span><br><span class="line">    results = [t.result() <span class="keyword">for</span> t <span class="keyword">in</span> completed]</span><br><span class="line">    log.info(<span class="string">f'results: <span class="subst">&#123;results!r&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">'exiting'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    logging.basicConfig(</span><br><span class="line">        level=logging.INFO,</span><br><span class="line">        format=<span class="string">'%(threadName)10s %(name)18s: %(message)s'</span>,</span><br><span class="line">        stream=sys.stderr,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    executor = concurrent.futures.ThreadPoolExecutor(max_workers=<span class="number">3</span>,)</span><br><span class="line"></span><br><span class="line">    event_loop = asyncio.get_event_loop()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        event_loop.run_until_complete(run_blocking_tasks(executor))</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        event_loop.close()</span><br></pre></td></tr></table></figure><p>这个程序使用 <code>logging</code> 来方便地指示哪些线程和函数正在生成的日志消息。因为每次调用 <code>blocks()</code> 时使用单独的 <code>Logger</code>，所以输出清楚地显示了相同的线程被重用，以调用具有不同参数的函数的多个副本：</p><p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">MainThread run_blocking_tasks: starting</span><br><span class="line">MainThread run_blocking_tasks: creating executor tasks</span><br><span class="line">ThreadPoolExecutor-0_0          blocks(0): running</span><br><span class="line">ThreadPoolExecutor-0_1          blocks(1): running</span><br><span class="line">ThreadPoolExecutor-0_2          blocks(2): running</span><br><span class="line">MainThread run_blocking_tasks: waiting for executor tasks</span><br><span class="line">ThreadPoolExecutor-0_0          blocks(0): done</span><br><span class="line">ThreadPoolExecutor-0_0          blocks(3): running</span><br><span class="line">ThreadPoolExecutor-0_1          blocks(1): done</span><br><span class="line">ThreadPoolExecutor-0_2          blocks(2): done</span><br><span class="line">ThreadPoolExecutor-0_1          blocks(4): running</span><br><span class="line">ThreadPoolExecutor-0_2          blocks(5): running</span><br><span class="line">ThreadPoolExecutor-0_0          blocks(3): done</span><br><span class="line">ThreadPoolExecutor-0_1          blocks(4): done</span><br><span class="line">ThreadPoolExecutor-0_2          blocks(5): done</span><br><span class="line">MainThread run_blocking_tasks: results: [16, 25, 1, 4, 0, 9]</span><br><span class="line">MainThread run_blocking_tasks: exiting</span><br></pre></td></tr></table></figure></p><h3 id="进程">进程</h3><p><code>ProcessPoolExecutor</code> 的工作方式大致相同，它创建一组工作进程而不是线程。使用单独的进程需要更多的系统资源，但是对于计算密集型操作，在每个 CPU 内核上运行单独的任务是有意义的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    logging.basicConfig(</span><br><span class="line">        level=logging.INFO,</span><br><span class="line">        format=<span class="string">'PID %(process)5s %(name)18s: %(message)s'</span>,</span><br><span class="line">        stream=sys.stderr,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    executor = concurrent.futures.ProcessPoolExecutor(max_workers=<span class="number">3</span>,)</span><br><span class="line"></span><br><span class="line">    event_loop = asyncio.get_event_loop()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        event_loop.run_until_complete(run_blocking_tasks(executor))</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        event_loop.close()</span><br></pre></td></tr></table></figure><p>从线程转移到进程所需的唯一更改是创建不同类型的 <code>executor</code>。本示例还将日志记录格式更改为包含进程 id 而不是线程名称，以证明任务实际上正在单独的进程中运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PID 24417 run_blocking_tasks: starting</span><br><span class="line">PID 24417 run_blocking_tasks: creating executor tasks</span><br><span class="line">PID 24417 run_blocking_tasks: waiting for executor tasks</span><br><span class="line">PID 24461          blocks(0): running</span><br><span class="line">PID 24460          blocks(1): running</span><br><span class="line">PID 24459          blocks(2): running</span><br><span class="line">PID 24460          blocks(1): done</span><br><span class="line">PID 24459          blocks(2): done</span><br><span class="line">PID 24460          blocks(3): running</span><br><span class="line">PID 24461          blocks(0): done</span><br><span class="line">PID 24459          blocks(4): running</span><br><span class="line">PID 24461          blocks(5): running</span><br><span class="line">PID 24460          blocks(3): done</span><br><span class="line">PID 24459          blocks(4): done</span><br><span class="line">PID 24461          blocks(5): done</span><br><span class="line">PID 24417 run_blocking_tasks: results: [16, 1, 25, 0, 4, 9]</span><br><span class="line">PID 24417 run_blocking_tasks: exiting</span><br></pre></td></tr></table></figure><h2 id="调试">调试</h2><p><code>asyncio</code> 内置了几个有用的调试功能。</p><p>首先，事件循环使用 <code>logging</code> 在运行时发出状态消息。如果在应用程序中启用了日志记录，则其中一些是可用的。其他的可以通过告诉循环发出更多调试消息来打开。调用 <code>set_debug()</code>，传递一个布尔值，指示是否应启用调试。</p><p>由于基于 <code>asyncio</code> 构建的应用程序对无法让出控制的“贪婪”协程非常敏感，因此支持检测事件循环中的缓慢回调。通过启用调试将其打开，并通过将循环的 <code>slow_callback_duration</code> 属性设置为应发出警告的秒数来定义 “缓慢”。</p><p>最后，如果使用 <code>asyncio</code> 的应用程序在不清理某些协程或其他资源的情况下退出，这可能意味着存在逻辑错误，无法运行某些应用程序代码。启用 <code>ResourceWarning</code> 警告会在程序退出时报告这些情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(<span class="string">'debugging asyncio'</span>)</span><br><span class="line">parser.add_argument(</span><br><span class="line">    <span class="string">'-v'</span>,</span><br><span class="line">    dest=<span class="string">'verbose'</span>,</span><br><span class="line">    default=<span class="keyword">False</span>,</span><br><span class="line">    action=<span class="string">'store_true'</span>,</span><br><span class="line">)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">    format=<span class="string">'%(levelname)7s: %(message)s'</span>,</span><br><span class="line">    stream=sys.stderr,</span><br><span class="line">)</span><br><span class="line">LOG = logging.getLogger(<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">    LOG.info(<span class="string">'inner starting'</span>)</span><br><span class="line">    <span class="comment"># 模拟缓慢的任务</span></span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    LOG.info(<span class="string">'inner completed'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(loop)</span>:</span></span><br><span class="line">    LOG.info(<span class="string">'outer starting'</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.ensure_future(loop.create_task(inner()))</span><br><span class="line">    LOG.info(<span class="string">'outer completed'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">if</span> args.verbose:</span><br><span class="line">    LOG.info(<span class="string">'enabling debugging'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启用调试</span></span><br><span class="line">    event_loop.set_debug(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义一个很小阈值表示“缓慢”</span></span><br><span class="line">    event_loop.slow_callback_duration = <span class="number">0.001</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 报告管理异步资源的所有错误</span></span><br><span class="line">    warnings.simplefilter(<span class="string">'always'</span>, ResourceWarning)</span><br><span class="line"></span><br><span class="line">LOG.info(<span class="string">'entering event loop'</span>)</span><br><span class="line">event_loop.run_until_complete(outer(event_loop))</span><br></pre></td></tr></table></figure><p>在未启用调试的情况下运行时，此应用程序的所有内容看起来都很好：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEBUG: Using selector: SelectSelector</span><br><span class="line"> INFO: entering event loop</span><br><span class="line"> INFO: outer starting</span><br><span class="line"> INFO: inner starting</span><br><span class="line"> INFO: inner completed</span><br><span class="line"> INFO: outer completed</span><br></pre></td></tr></table></figure><p>开启调试会暴露出一些问题，包括 <code>inner()</code> 完成所花的时间比设定的 <code>slow_callback_duration</code> 还要长，而且当程序结束时，事件循环并未正确关闭：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  DEBUG: Using selector: SelectSelector</span><br><span class="line">   INFO: enabling debugging</span><br><span class="line">   INFO: entering event loop</span><br><span class="line">   INFO: outer starting</span><br><span class="line">   INFO: inner starting</span><br><span class="line">   INFO: inner completed</span><br><span class="line">WARNING: Executing &lt;Task finished coro=&lt;inner() done, defined at *.py:25&gt; result=None created at *.py:33&gt; took 0.093 seconds</span><br><span class="line">   INFO: outer completed</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;书接上文。&lt;/p&gt;
&lt;h2 id=&quot;用协程和流实现异步-i-o&quot;&gt;用协程和流实现异步 I / O&lt;/h2&gt;
&lt;p&gt;本节将重新实现 echo 服务器和客户端的两个示例程序，只不过会使用协程和 &lt;code&gt;asyncio&lt;/code&gt; 流 API 而不是
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kafka在SpringBoot 2.0中的整合-1</title>
    <link href="http://weafteam.github.io/posts/6e26f2f1/"/>
    <id>http://weafteam.github.io/posts/6e26f2f1/</id>
    <published>2018-05-07T10:13:02.000Z</published>
    <updated>2018-08-12T09:51:01.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一简介">一、简介</h1><p>之前我讲过关于SpringBoot整合Kafka的demo,但是后来使用过程中，越来与发现这个已经不能适合我们现在使用的环境了。</p><p>之前是简单的发送消息而已，而现在我们需要的是一个高吞吐量的web中间件。</p><p>现在每秒大概能发送1000条左右的数据，但是接受这边并不能承受这么高的吞吐量，导致kafka消息堆积，消息堆积的越来越多。</p><p>恰巧我们的产品所需要的数据实时性非常高。所以这不得以我要改进我读的速度。</p><h1 id="二入门">二、入门</h1><p>简单介绍一点相关的概念</p><h3 id="消费消息基本流程">2.1 消费消息基本流程</h3><p>Kafka 订阅者在订阅消息时的基本流程是：</p><ol type="1"><li>Poll 数据</li><li>执行消费逻辑</li><li>再次 poll 数据</li></ol><h3 id="负载均衡">2.2 负载均衡</h3><p>每个 Consumer Group 可以包含多个消费实例，即可以启动多个 Kafka Consumer，并把参数 group.id 设置成相同的值。属于同一个 Consumer Group 的消费实例会负载消费订阅的 Topic。</p><p>举例：Consumer Group A 订阅了 Topic A，并开启三个消费实例 C1、C2、C3，则发送到 Topic A 的每条消息最终只会传给 C1、C2、C3 的某一个。Kafka 默认会均匀地把消息传给各个消息实例，以做到消费负载均衡。</p><p>Kafka 负载消费的内部原理是，把订阅的 Topic 的分区，平均分配给各个消费实例。因此，消费实例的个数不要大于分区的数量，否则会有实例分配不到任何分区而处于空跑状态。这个负载均衡发生的时间，除了第一次启动上线之外，后续消费实例发生重启、增加、减少等变更时，都会触发一次负载均衡。</p><p>消息队列 Kafka 的每个 Topic 的分区数量默认是 16 个，已经足够满足大部分场景的需求，且云上服务会根据容量调整分区数。</p><h3 id="多个订阅">2.3 多个订阅</h3><p>一个 Consumer Group 可以订阅多个 Topic。一个 Topic 也可以被多个 Consumer Group 订阅，且各个 Consumer Group 独立消费 Topic 下的所有消息。</p><p>举例：Consumer Group A 订阅了 Topic A，Consumer Group B 也订阅了 Topic A，则发送到 Topic A 的每条消息，不仅会传一份给 Consumer Group A 的消费实例，也会传一份给 Consumer Group B 的消费实例，且这两个过程相互独立，相互没有任何影响。 ### 2.4 消费位点 每个 Topic 会有多个分区，每个分区会统计当前消息的总条数，这个称为最大位点 MaxOffset。Kafka Consumer 会按顺序依次消费分区内的每条消息，记录已经消费了的消息条数，称为ConsumerOffset。</p><p>剩余的未消费的条数（也称为消息堆积量） = MaxOffset - ConsumerOffset</p><h3 id="消费位点提交">2.5 消费位点提交</h3><p>Kafka 消费者有两个相关参数：</p><ul><li>enable.auto.commit：默认值为 true。</li><li>auto.commit.interval.ms： 默认值为 1000，也即 1s。</li></ul><p>这两个参数组合的结果就是，每次 poll 数据前会先检查上次提交位点的时间，如果距离当前时间已经超过参数auto.commit.interval.ms规定的时长，则客户端会启动位点提交动作。</p><p>因此，如果将enable.auto.commit设置为 true，则需要在每次 poll 数据时，确保前一次 poll 出来的数据已经消费完毕，否则可能导致位点跳跃。</p><p>如果想自己控制位点提交，请把 enable.auto.commit 设为 false，并调用 commit(offsets)函数自行控制位点提交。</p><h3 id="消息重复和消费幂等">2.6 消息重复和消费幂等</h3><p>Kafka 消费的语义是 “at least once”， 也就是至少投递一次，保证消息不丢，但是不会保证消息不重复。在出现网络问题、客户端重启时均有可能出现少量重复消息，此时应用消费端如果对消息重复比较敏感（比如说订单交易类），则应该做到消息幂等。</p><p>以数据库类应用为例，常用做法是：</p><p>发送消息时，传入 key 作为唯一流水号ID； 消费消息时，判断 key 是否已经消费过，如果已经消费过了，则忽略，如果没消费过，则消费一次； 当然，如果应用本身对少量消息重复不敏感，则不需要做此类幂等检查。</p><h3 id="消费失败">2.7 消费失败</h3><p>Kafka 是按分区一条一条消息顺序向前推进消费的，如果消费端拿到某条消息后执行消费逻辑失败，比如应用服务器出现了脏数据，导致某条消息处理失败，等待人工干预，那么有以下两种处理方式：</p><p>失败后一直尝试再次执行消费逻辑。这种方式有可能造成消费线程阻塞在当前消息，无法向前推进，造成消息堆积； 由于 Kafka 自身没有处理失败消息的设计，实践中通常会打印失败的消息、或者存储到某个服务（比如创建一个 Topic 专门用来放失败的消息），然后定时 check 失败消息的情况，分析失败原因，根据情况处理。 ### 2.8 消费阻塞以及堆积 消费端最常见的问题就是消费堆积，最常造成堆积的原因是：</p><p>消费速度跟不上生产速度，此时应该提高消费速度，详见下一节《提高消费速度》； 消费端产生了阻塞。 消费端拿到消息后，执行消费逻辑，通常会执行一些远程调用，如果这个时候同步等待结果，则有可能造成一直等待，消费进程无法向前推进。</p><p>消费端应该竭力避免堵塞消费线程，如果存在等待调用结果的情况，建议设置等待的超时时间，超时后作消费失败处理。</p><h3 id="提高消费速度">2.9 提高消费速度</h3><p>提高消费速度有以下两个办法：</p><p>增加 Consumer 实例个数 增加消费线程 ##### 增加 Consumer 实例 可以在进程内直接增加（需要保证每个实例对应一个线程，否则没有太大意义），也可以部署多个消费实例进程；需要注意的是，实例个数超过分区数量后就不再能提高速度，将会有消费实例不工作。</p><h5 id="增加消费线程">增加消费线程</h5><p>增加 Consumer 实例本质上也是增加线程的方式来提升速度，因此更加重要的性能提升方式是增加消费线程，最基本的步骤如下：</p><ol type="1"><li>定义一个线程池；</li><li>Poll 数据；</li><li>把数据提交到线程池进行并发处理；</li><li>等并发结果返回成功后，再次 poll 数据执行。</li></ol><h3 id="消息过滤">2.10 消息过滤</h3><p>Kafka 自身没有消息过滤的语义。实践中可以采取以下两个办法：</p><p>如果过滤的种类不多，可以采取多个 Topic 的方式达到过滤的目的； 如果过滤的种类多，则最好在客户端业务层面自行过滤。 实践中请根据业务具体情况进行选择，也可以综合运用上面两种办法。</p><h3 id="消息广播">2.11 消息广播</h3><p>Kafka 自身没有消息广播的语义，可以通过创建不同的 Consumer Group 来模拟实现。</p><h3 id="订阅关系">2.12 订阅关系</h3><p>同一个 Consumer Group 内，各个消费实例订阅的 Topic 最好保持一致，避免给排查问题带来干扰。</p><h1 id="三开始抛代码">三、开始抛代码</h1><p>我们的问题是由于消费的速度不够引起的。根据2.9的办法。我提供了以下代码 消费者配置： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.xxxxxx.kafka;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.CommonClientConfigs;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.config.SaslConfigs;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.config.SslConfigs;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.annotation.EnableKafka;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.config.KafkaListenerContainerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.ConsumerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.DefaultKafkaConsumerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.listener.BatchLoggingErrorHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.listener.ConcurrentMessageListenerContainer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ：yaxuSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 18:15 2018/4/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> by:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableKafka</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiverConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.kafka.bootstrap-servers&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String bootstrapServers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;app.group.id&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String groupId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;kafka.client.truststore&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String kafkaClientTruststore;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;app.topic.test&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String topic;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">consumerConfigs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; props = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);</span><br><span class="line">        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);</span><br><span class="line">        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);</span><br><span class="line">        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);</span><br><span class="line">        props.put(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG,kafkaClientTruststore);</span><br><span class="line">        props.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG,<span class="string">"KafkaOnsClient"</span>);</span><br><span class="line">        props.put(CommonClientConfigs.SECURITY_PROTOCOL_CONFIG,<span class="string">"SASL_SSL"</span>);</span><br><span class="line">        props.put(SaslConfigs.SASL_MECHANISM,<span class="string">"ONS"</span>);</span><br><span class="line">        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,<span class="keyword">false</span>);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG,<span class="number">1000</span>);</span><br><span class="line">        props.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG,<span class="number">50</span>);</span><br><span class="line">        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,<span class="string">"latest"</span>);</span><br><span class="line">        <span class="keyword">return</span> props;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConsumerFactory&lt;String, String&gt; <span class="title">consumerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultKafkaConsumerFactory&lt;&gt;(consumerConfigs());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; <span class="title">kafkaListenerContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; factory = <span class="keyword">new</span> ConcurrentKafkaListenerContainerFactory&lt;&gt;();</span><br><span class="line">        factory.setConsumerFactory(consumerFactory());</span><br><span class="line">        factory.setBatchListener(<span class="keyword">true</span>);</span><br><span class="line">        factory.setAutoStartup(<span class="keyword">true</span>);</span><br><span class="line">        factory.setAckDiscarded(<span class="keyword">true</span>);</span><br><span class="line">        factory.setConcurrency(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下是消费代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.xxxxxx.kafka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.xxx.xxxxxx.common.Constants;</span><br><span class="line"><span class="keyword">import</span> com.xxx.xxxxxx.entry.vo.TrendInfoVO;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.listener.KafkaDataListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.listener.MessageListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.support.KafkaHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Header;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Payload;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Async;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableAsync;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ：yaxuSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 17:09 2018/4/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> by:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrendConsumer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Long timestart = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span>(<span class="string">"kafkaExecutor"</span>)</span><br><span class="line">    <span class="meta">@KafkaListener</span>(id = <span class="string">"list"</span>, topics = <span class="string">"$&#123;app.topic.test&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(@Payload List&lt;String&gt; messages,</span></span></span><br><span class="line"><span class="function"><span class="params">                        @Header(KafkaHeaders.RECEIVED_PARTITION_ID)</span> List&lt;Integer&gt; partitions,</span></span><br><span class="line"><span class="function">                        @<span class="title">Header</span><span class="params">(KafkaHeaders.OFFSET)</span> List&lt;Long&gt; offsets) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String str :messages)</span><br><span class="line">        &#123;</span><br><span class="line">            doRedisTask(str);</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (System.currentTimeMillis()-timestart&gt;=<span class="number">10000</span>) &#123;</span><br><span class="line">                log.info(<span class="string">"时间：&#123;&#125;kafka消费数量：&#123;&#125;"</span>, Calendar.getInstance().getTime(),count);</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">                timestart = System.currentTimeMillis();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span>(<span class="string">"redisExecutor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doRedisTask</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        JSONObject json = JSONObject.parseObject(message);</span><br><span class="line">        String exchange = json.getString(<span class="string">"exchange"</span>);</span><br><span class="line">        String symbol = json.getString(<span class="string">"symbol"</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(Constants.KAFKA_TRADE_PREFIX+exchange+symbol,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了异步线程去消费。提高消费的速度。</p><p>四、特别注意</p><p>注意以下几点配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,<span class="keyword">false</span>);</span><br><span class="line">props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG,<span class="number">1000</span>);</span><br><span class="line">props.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG,<span class="number">50</span>);</span><br><span class="line">props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,<span class="string">"latest"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">factory.setBatchListener(<span class="keyword">true</span>);</span><br><span class="line">actory.setConcurrency(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>五、参考地址</p><ol type="1"><li><a href="https://help.aliyun.com/document_detail/68166.html?spm=a2c4g.11186623.6.566.nnWMLo" target="_blank" rel="noopener">阿里云kafka订阅者最佳实践:https://help.aliyun.com/document_detail/68166.html?spm=a2c4g.11186623.6.566.nnWMLo</a></li><li><a href="https://docs.spring.io/spring-kafka/docs/2.1.5.RELEASE/reference/html/" target="_blank" rel="noopener">Spring KAFKA地址：https://docs.spring.io/spring-kafka/docs/2.1.5.RELEASE/reference/html/</a></li></ol>]]></content>
    
    <summary type="html">
    
      Kafka在SpringBoot 2.0中的整合-1
    
    </summary>
    
      <category term="JAVA" scheme="http://weafteam.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://weafteam.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow线性回归详解（2）</title>
    <link href="http://weafteam.github.io/posts/839e2740/"/>
    <id>http://weafteam.github.io/posts/839e2740/</id>
    <published>2018-05-06T03:30:48.000Z</published>
    <updated>2019-03-05T11:10:20.145Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tensorflow-linear-regression-2">TensorFlow Linear Regression 2</h1><ol type="1"><li>回顾一下线性回归的loss函数：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    ops.reset_default_graph()</span><br><span class="line">    sess = tf.Session()</span><br><span class="line">    batch_size = <span class="number">100</span></span><br><span class="line">    x_vals = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">    y_vals = x_vals + np.random.normal(<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    x_data = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32)</span><br><span class="line">    y_target = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create variables for linear regression</span></span><br><span class="line">    A = tf.Variable(tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line">    b = tf.Variable(tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Declare model operations</span></span><br><span class="line">    model_output = tf.add(tf.matmul(x_data, A), b)</span><br><span class="line"></span><br><span class="line">    loss_l1 = tf.reduce_mean(tf.abs(y_target - model_output))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Declare optimizers</span></span><br><span class="line">    my_opt_l1 = tf.train.GradientDescentOptimizer(<span class="number">0.0001</span>)</span><br><span class="line">    train_step_l1 = my_opt_l1.minimize(loss_l1)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Initialize variables</span></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">    sess.run(init)</span><br><span class="line"></span><br><span class="line">    loss_vec_l1 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">        rand_index = np.random.choice(len(x_vals), size=batch_size)</span><br><span class="line">        rand_x = np.transpose([x_vals[rand_index]])</span><br><span class="line">        rand_y = np.transpose([y_vals[rand_index]])</span><br><span class="line">        sess.run(train_step_l1, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">        temp_loss_l1 = sess.run(loss_l1, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">        loss_vec_l1.append(temp_loss_l1)</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">25</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'Step #'</span> + str(i + <span class="number">1</span>) + <span class="string">' A = '</span> + str(sess.run(A)) + <span class="string">' b = '</span> + str(sess.run(b)))</span><br><span class="line"></span><br><span class="line">    ops.reset_default_graph()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create graph</span></span><br><span class="line">    sess = tf.Session()</span><br><span class="line"></span><br><span class="line">    x_data = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32)</span><br><span class="line">    y_target = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create variables for linear regression</span></span><br><span class="line">    A = tf.Variable(tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line">    b = tf.Variable(tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Declare model operations</span></span><br><span class="line">    model_output = tf.add(tf.matmul(x_data, A), b)</span><br><span class="line"></span><br><span class="line">    loss_l2 = tf.reduce_mean(tf.square(y_target - model_output))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Declare optimizers</span></span><br><span class="line">    my_opt_l2 = tf.train.GradientDescentOptimizer(<span class="number">0.0001</span>)</span><br><span class="line">    train_step_l2 = my_opt_l2.minimize(loss_l2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Initialize variables</span></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">    sess.run(init)</span><br><span class="line"></span><br><span class="line">    loss_vec_l2 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">        rand_index = np.random.choice(len(x_vals), size=batch_size)</span><br><span class="line">        rand_x = np.transpose([x_vals[rand_index]])</span><br><span class="line">        rand_y = np.transpose([y_vals[rand_index]])</span><br><span class="line">        sess.run(train_step_l2, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">        temp_loss_l2 = sess.run(loss_l2, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">        loss_vec_l2.append(temp_loss_l2)</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">25</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'Step #'</span> + str(i + <span class="number">1</span>) + <span class="string">' A = '</span> + str(sess.run(A)) + <span class="string">' b = '</span> + str(sess.run(b)))</span><br><span class="line"></span><br><span class="line">    plt.plot(loss_vec_l1, <span class="string">'k-'</span>, label=<span class="string">'L1 Loss'</span>)</span><br><span class="line">    plt.plot(loss_vec_l2, <span class="string">'r--'</span>, label=<span class="string">'L2 Loss'</span>)</span><br><span class="line">    plt.title(<span class="string">'L1 and L2 Loss per Generation'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Generation'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'L1 Loss'</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(_)</span>:</span></span><br><span class="line">    run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tf.app.run()</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>戴明回归:</li></ol><p>看图：找不同：</p><p><img src="https://s1.ax1x.com/2018/05/06/CUmQtU.png"></p><p>loss函数是关键:下面是deming regression的loss函数 <span class="math display">\[\frac{\mid{A*x+b-y}\mid}{\sqrt{A^2 + 1}}\]</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : 2018/5/6 14:32</span><br><span class="line"># @Author  : milittle</span><br><span class="line"># @Site    : www.weaf.top</span><br><span class="line"># @File    : deming_lr.py</span><br><span class="line"># @Software: PyCharm</span><br><span class="line"></span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">import tensorflow as tf</span><br><span class="line">from tensorflow.python.framework import ops</span><br><span class="line"></span><br><span class="line">ops.reset_default_graph()</span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def run():</span><br><span class="line">    x_vals = np.linspace(0, 10, 100)</span><br><span class="line">    y_vals = x_vals + np.random.normal(0, 1, 100)</span><br><span class="line">    batch_size = 125</span><br><span class="line"></span><br><span class="line">    x_data = tf.placeholder(shape=[None, 1], dtype=tf.float32)</span><br><span class="line">    y_target = tf.placeholder(shape=[None, 1], dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">    A = tf.Variable(tf.random_normal(shape=[1, 1]))</span><br><span class="line">    b = tf.Variable(tf.random_normal(shape=[1, 1]))</span><br><span class="line"></span><br><span class="line">    model_output = tf.add(tf.matmul(x_data, A), b)</span><br><span class="line"></span><br><span class="line">    # 注意这里的loss函数的求解</span><br><span class="line">    demming_numerator = tf.abs(tf.subtract(tf.add(tf.matmul(x_data, A), b), y_target))</span><br><span class="line">    demming_denominator = tf.sqrt(tf.add(tf.square(A), 1))</span><br><span class="line">    loss = tf.reduce_mean(tf.truediv(demming_numerator, demming_denominator))</span><br><span class="line"></span><br><span class="line">    my_opt = tf.train.GradientDescentOptimizer(0.01)</span><br><span class="line">    train_step = my_opt.minimize(loss)</span><br><span class="line"></span><br><span class="line">    # Initialize variables</span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">    sess.run(init)</span><br><span class="line"></span><br><span class="line">    loss_vec = []</span><br><span class="line">    for i in range(1500):</span><br><span class="line">        rand_index = np.random.choice(len(x_vals), size=batch_size)</span><br><span class="line">        rand_x = np.transpose([x_vals[rand_index]])</span><br><span class="line">        rand_y = np.transpose([y_vals[rand_index]])</span><br><span class="line">        sess.run(train_step, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">        temp_loss = sess.run(loss, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">        loss_vec.append(temp_loss)</span><br><span class="line">        if (i + 1) % 100 == 0:</span><br><span class="line">            print(&apos;Step #&apos; + str(i + 1) + &apos; A = &apos; + str(sess.run(A)) + &apos; b = &apos; + str(sess.run(b)))</span><br><span class="line">            print(&apos;Loss = &apos; + str(temp_loss))</span><br><span class="line"></span><br><span class="line">    [W] = sess.run(A)</span><br><span class="line">    [bias] = sess.run(b)</span><br><span class="line"></span><br><span class="line">    # Get best fit line</span><br><span class="line">    best_fit = []</span><br><span class="line">    for i in x_vals:</span><br><span class="line">        best_fit.append(W * i + bias)</span><br><span class="line"></span><br><span class="line">    plt.plot(x_vals, y_vals, &apos;o&apos;, label=&apos;Data Points&apos;)</span><br><span class="line">    plt.plot(x_vals, best_fit, &apos;r-&apos;, label=&apos;Best fit line&apos;, linewidth=3)</span><br><span class="line">    plt.legend(loc=&apos;upper left&apos;)</span><br><span class="line">    plt.title(&apos;Sepal Length vs Pedal Width&apos;)</span><br><span class="line">    plt.xlabel(&apos;Pedal Width&apos;)</span><br><span class="line">    plt.ylabel(&apos;Sepal Length&apos;)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    # Plot loss over time</span><br><span class="line">    plt.plot(loss_vec, &apos;k-&apos;)</span><br><span class="line">    plt.title(&apos;Demming Loss per Generation&apos;)</span><br><span class="line">    plt.xlabel(&apos;Iteration&apos;)</span><br><span class="line">    plt.ylabel(&apos;Demming Loss&apos;)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">def main(_):</span><br><span class="line">    run()</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    tf.app.run()</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>LASSO and Ridge Regression(关键的地方还是loss函数的不同，其他步骤是一致的)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2018/5/6 14:46</span></span><br><span class="line"><span class="comment"># @Author  : milittle</span></span><br><span class="line"><span class="comment"># @Site    : www.weaf.top</span></span><br><span class="line"><span class="comment"># @File    : LASSO_Ridge_lr.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line"></span><br><span class="line">ops.reset_default_graph()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">regression_type = <span class="string">'LASSO'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    sess = tf.Session()</span><br><span class="line">    x_vals = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">    y_vals = x_vals + np.random.normal(<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">    batch_size = <span class="number">125</span></span><br><span class="line"></span><br><span class="line">    x_data = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32)</span><br><span class="line">    y_target = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">    seed = <span class="number">13</span></span><br><span class="line">    np.random.seed(seed)</span><br><span class="line">    tf.set_random_seed(seed)</span><br><span class="line"></span><br><span class="line">    A = tf.Variable(tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line">    b = tf.Variable(tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    model_output = tf.add(tf.matmul(x_data, A), b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> regression_type == <span class="string">'LASSO'</span>:</span><br><span class="line">        lasso_param = tf.constant(<span class="number">0.9</span>)</span><br><span class="line">        heavyside_step = tf.truediv(<span class="number">1.</span>, tf.add(<span class="number">1.</span>, tf.exp(tf.multiply(<span class="number">-50.</span>, tf.subtract(A, lasso_param)))))</span><br><span class="line">        regularization_param = tf.multiply(heavyside_step, <span class="number">99.</span>)</span><br><span class="line">        loss = tf.add(tf.reduce_mean(tf.square(y_target - model_output)), regularization_param)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> regression_type == <span class="string">'Ridge'</span>:</span><br><span class="line">        ridge_param = tf.constant(<span class="number">1.</span>)</span><br><span class="line">        ridge_loss = tf.reduce_mean(tf.square(A))</span><br><span class="line">        loss = tf.expand_dims(</span><br><span class="line">            tf.add(tf.reduce_mean(tf.square(y_target - model_output)), tf.multiply(ridge_param, ridge_loss)), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'Invalid regression_type parameter value'</span>, file=sys.stderr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    my_opt = tf.train.GradientDescentOptimizer(<span class="number">0.001</span>)</span><br><span class="line">    train_step = my_opt.minimize(loss)</span><br><span class="line"></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">    sess.run(init)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Training loop</span></span><br><span class="line">    loss_vec = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1500</span>):</span><br><span class="line">        rand_index = np.random.choice(len(x_vals), size=batch_size)</span><br><span class="line">        rand_x = np.transpose([x_vals[rand_index]])</span><br><span class="line">        rand_y = np.transpose([y_vals[rand_index]])</span><br><span class="line">        sess.run(train_step, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">        temp_loss = sess.run(loss, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">        loss_vec.append(temp_loss[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">300</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'Step #'</span> + str(i + <span class="number">1</span>) + <span class="string">' A = '</span> + str(sess.run(A)) + <span class="string">' b = '</span> + str(sess.run(b)))</span><br><span class="line">            print(<span class="string">'Loss = '</span> + str(temp_loss))</span><br><span class="line">            print(<span class="string">'\n'</span>)</span><br><span class="line">    [W] = sess.run(A)</span><br><span class="line">    [bias] = sess.run(b)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get best fit line</span></span><br><span class="line">    best_fit = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x_vals:</span><br><span class="line">        best_fit.append(W * i + bias)</span><br><span class="line">    <span class="comment"># Plot the result</span></span><br><span class="line">    plt.plot(x_vals, y_vals, <span class="string">'o'</span>, label=<span class="string">'Data Points'</span>)</span><br><span class="line">    plt.plot(x_vals, best_fit, <span class="string">'r-'</span>, label=<span class="string">'Best fit line'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">'upper left'</span>)</span><br><span class="line">    plt.title(<span class="string">'Sepal Length vs Pedal Width'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Pedal Width'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Sepal Length'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Plot loss over time</span></span><br><span class="line">    plt.plot(loss_vec, <span class="string">'k-'</span>)</span><br><span class="line">    plt.title(regression_type + <span class="string">' Loss per Generation'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Generation'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Loss'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(_)</span>:</span></span><br><span class="line">    run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tf.app.run()</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>Elastic Net Regression(利用多个loss函数的叠加进行训练)弹性的方式</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2018/5/6 14:57</span></span><br><span class="line"><span class="comment"># @Author  : milittle</span></span><br><span class="line"><span class="comment"># @Site    : www.weaf.top</span></span><br><span class="line"><span class="comment"># @File    : Elastic_Net_Regression.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line">x_vals = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">y_vals = x_vals + np.random.normal(<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">batch_size = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">seed = <span class="number">13</span></span><br><span class="line">np.random.seed(seed)</span><br><span class="line">tf.set_random_seed(seed)</span><br><span class="line"></span><br><span class="line">x_data = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32, name=<span class="string">'input'</span>)</span><br><span class="line">y_target = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32, name=<span class="string">'output'</span>)</span><br><span class="line"></span><br><span class="line">A = tf.Variable(tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line">b = tf.Variable(tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">model_output = tf.add(tf.matmul(x_data, A), b)</span><br><span class="line"></span><br><span class="line">elastic_param1 = tf.constant(<span class="number">1.</span>)</span><br><span class="line">elastic_param2 = tf.constant(<span class="number">1.</span>)</span><br><span class="line">l1_a_loss = tf.reduce_mean(tf.abs(A))</span><br><span class="line">l2_a_loss = tf.reduce_mean(tf.square(A))</span><br><span class="line">e1_term = tf.multiply(elastic_param1, l1_a_loss)</span><br><span class="line">e2_term = tf.multiply(elastic_param2, l2_a_loss)</span><br><span class="line">loss = tf.expand_dims(tf.add(tf.add(tf.reduce_mean(tf.square(y_target - model_output)), e1_term), e2_term), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">my_opt = tf.train.GradientDescentOptimizer(<span class="number">0.001</span>)</span><br><span class="line">train_step = my_opt.minimize(loss)</span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Training loop</span></span><br><span class="line">loss_vec = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    rand_index = np.random.choice(len(x_vals), size=batch_size)</span><br><span class="line">    rand_x = np.transpose([x_vals[rand_index]])</span><br><span class="line">    rand_y = np.transpose([y_vals[rand_index]])</span><br><span class="line">    sess.run(train_step, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">    temp_loss = sess.run(loss, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">    loss_vec.append(temp_loss[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">250</span> == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'Step #'</span> + str(i + <span class="number">1</span>) + <span class="string">' A = '</span> + str(sess.run(A)) + <span class="string">' b = '</span> + str(sess.run(b)))</span><br><span class="line">    print(<span class="string">'Loss = '</span> + str(temp_loss))</span><br><span class="line"></span><br><span class="line">W = sess.run(A)</span><br><span class="line">bias = sess.run(b)</span><br><span class="line"></span><br><span class="line">plt.plot(loss_vec, <span class="string">'k-'</span>)</span><br><span class="line">plt.title(<span class="string">'Loss per Generation'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Generation'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Loss'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>好，今天到此把一些线性模型的应用问题大体讲完了，还是有什么问题，可以积极讨论，可以给我发邮件air@weaf.top，上面的代码由于很简单，所以我想大家都可以看懂的。其实这么多类型的回归问题，总的来说就是loss函数不一样，只要将loss函数理解了，那么问题就迎刃而解。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;tensorflow-linear-regression-2&quot;&gt;TensorFlow Linear Regression 2&lt;/h1&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;回顾一下线性回归的loss函数：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure
        
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/categories/TensorFlow/"/>
    
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow线性回归详解（1）</title>
    <link href="http://weafteam.github.io/posts/1ceb091/"/>
    <id>http://weafteam.github.io/posts/1ceb091/</id>
    <published>2018-05-06T03:29:55.000Z</published>
    <updated>2018-08-28T03:33:48.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tensorflow-linear-regression-1">TensorFlow Linear Regression 1</h1><p>亲爱的小伙伴们，上周又事情给耽搁了，这周将上周的内容一起补充一下。我们前面的内容将TensorFlow的基础内容都介绍了，所以接下来我们需要实现一些基本的算法，如果大家想跑一些现在主流的一些网络结构，大家可以移步到我的GitHub MLModel这个仓库<a href="https://github.com/Milittle/MLModel" target="_blank" rel="noopener">MLModel</a>，里面会定期更新一些主流的网络框架。喜欢的话，给个star可好。接下来呢我们开始我们今天的线性回归模型的各种求解方法。</p><ol type="1"><li>在TensorFlow中使用矩阵的逆来解决线性模型，这个解决方案，相比学过线性代数的你，都会解。</li></ol><p>大家可曾记得线性代数里面的线性方程组： <span class="math display">\[A * x + b = y\]</span> x就是我们要解的未知解，那x该怎么解来着？ <span class="math display">\[x = {(A^T  * A)}^{-1} * A^T * y - b\]</span> 上面的公式一下就能看出来是怎么回事对不对？</p><p>推导过程： <span class="math display">\[第一步:A^T * A * x = A^T*y-b\\第二步：{(A^T*A)}^{-1} *{(A^T*A)} * x = {(A^T*A)}^{-1} * A^T*y-b\\第三步：左边是不是就是一个单位矩阵了？\\得到最后的结果是：x = {(A^T  * A)}^{-1} * A^T * y-b\]</span> 我们下面使用的A的特征维度是一维，(再加上b这个维度)这是为了可以可视化结果：在直接利用矩阵运算而得到的解对于这些数据来说，是最好的结果。也是唯一解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line">ops.reset_default_graph()</span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 构造数据</span></span><br><span class="line">    x_vals = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">    y_vals = x_vals + np.random.normal(<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    x_vals_column = np.transpose(np.matrix(x_vals))</span><br><span class="line">    ones_column = np.transpose(np.matrix(np.repeat(<span class="number">1</span>, <span class="number">100</span>)))</span><br><span class="line"></span><br><span class="line">    A = np.column_stack((x_vals_column, ones_column))</span><br><span class="line"></span><br><span class="line">    y = np.transpose(np.matrix(y_vals))</span><br><span class="line"></span><br><span class="line">    A_tensor = tf.constant(A)</span><br><span class="line">    y_tensor = tf.constant(y)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#利用矩阵的逆解决这个线性问题。</span></span><br><span class="line">    t_A_A = tf.matmul(tf.transpose(A_tensor), A_tensor) <span class="comment">#求矩阵转置和本身的乘积</span></span><br><span class="line">    t_A_A_inverse = tf.matrix_inverse(t_A_A) <span class="comment"># 求矩阵的逆</span></span><br><span class="line">    product = tf.matmul(t_A_A_inverse, tf.transpose(A_tensor))</span><br><span class="line">    solution = tf.matmul(product, y_tensor)</span><br><span class="line"></span><br><span class="line">    solution_eval = sess.run(solution)</span><br><span class="line"></span><br><span class="line">    W = solution_eval[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    bias = solution_eval[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'W: '</span> + str(W))</span><br><span class="line">    print(<span class="string">'bias: '</span> + str(bias))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get best fit line</span></span><br><span class="line">    best_fit = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x_vals:</span><br><span class="line">        best_fit.append(W * i + bias)</span><br><span class="line">    plt.plot(x_vals, y_vals, <span class="string">'o'</span>, label = <span class="string">'data'</span>)</span><br><span class="line">    plt.plot(x_vals, best_fit, <span class="string">'r-'</span>, label = <span class="string">'best fit line'</span>, linewidth = <span class="number">3</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">'upper left'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(_)</span>:</span></span><br><span class="line">    run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tf.app.run()</span><br></pre></td></tr></table></figure><p>其实大家也可以看出，我们使用矩阵的逆去求线性模型是又快又准，但是你们想过没有为啥神经网络里面在求解线性回归的时候还要用到反向传播梯度下降的方式呢，给你们举个例子，假设现在一个样本有上万或者十万个特征维度，你想想我们在求解矩阵逆的时候要花费多长时间，那是你意想不到的，所以才会使用方向传播算法去解决W的求解问题。详细需要花费的时间。</p><ol start="2" type="1"><li>第二种求解方式：Cholesky Method</li></ol><p><span class="math display">\[A*x=y\]</span></p><p>思路如下：在Cholesky method方法中，我们需要将A分解为L和L的转置的乘积，然后再进行x的求解，为什么要这么做呢?当然是为了避免求矩阵的逆，它很耗费时间。</p><p>因为A要求在求解Cholesky Depcomposition的时候是square也就是方阵。但是一般的A都不是方阵，那么我们就构造出来一个方阵： <span class="math display">\[A^T*A\]</span> 它就是一个方阵，那么我们就求A转置和A乘积的Cholesky Decomposition。</p><p>首先明确分解步骤： <span class="math display">\[第一步：A^T*A=L^T*L\\第二步：L^T*L*x=A^T*Y\\第三步：L^T*z=A^T*Y\\where z = L*x\]</span> 其次明确求解步骤： <span class="math display">\[第一步：计算A的Cholesky Decomposition\\where A^T*A=L^T*L\\第二步：求解z，利用L^T*z=A^T*y这个公式\\第三步：求解x，利用L*x=z这个公式\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line">ops.reset_default_graph()</span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造数据</span></span><br><span class="line">    x_vals = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">    y_vals = x_vals + np.random.normal(<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    x_vals_column = np.transpose(np.matrix(x_vals))</span><br><span class="line">    ones_column = np.transpose(np.matrix(np.repeat(<span class="number">1</span>, <span class="number">100</span>)))</span><br><span class="line">    A = np.column_stack((x_vals_column, ones_column))</span><br><span class="line">    y = np.transpose(np.matrix(y_vals))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    A_tensor = tf.constant(A)</span><br><span class="line">    y_tensor = tf.constant(y)</span><br><span class="line"></span><br><span class="line">    tA_A = tf.matmul(tf.transpose(A_tensor), A_tensor)</span><br><span class="line">    L = tf.cholesky(tA_A)</span><br><span class="line"></span><br><span class="line">    tA_y = tf.matmul(tf.transpose(A_tensor), y)</span><br><span class="line">    sol1 = tf.matrix_solve(L, tA_y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sol2 = tf.matrix_solve(tf.transpose(L), sol1)</span><br><span class="line">    solution_eval = sess.run(sol2)</span><br><span class="line"></span><br><span class="line">    W = solution_eval[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    bias = solution_eval[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'slope: '</span> + str(W))</span><br><span class="line">    print(<span class="string">'y_intercept: '</span> + str(bias))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    best_fit = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x_vals:</span><br><span class="line">        best_fit.append(W * i + bias)</span><br><span class="line">    plt.plot(x_vals, y_vals, <span class="string">'o'</span>, label=<span class="string">'Data'</span>)</span><br><span class="line">    plt.plot(x_vals, best_fit, <span class="string">'r-'</span>, label=<span class="string">'Best fit line'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">'upper left'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(_)</span>:</span></span><br><span class="line">    run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tf.app.run()</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>使用反向传播梯度下降的方式求解线性模型。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line"></span><br><span class="line">ops.reset_default_graph()</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 构造数据</span></span><br><span class="line">    batch_size = <span class="number">32</span></span><br><span class="line">    x_vals = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">    y_vals = x_vals + np.random.normal(<span class="number">0</span>, <span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    x_data = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32)</span><br><span class="line">    y_target = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">    A = tf.Variable(tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line">    b = tf.Variable(tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">    model_output = tf.add(tf.matmul(x_data, A), b)</span><br><span class="line">    loss = tf.reduce_mean(tf.square(y_target - model_output))</span><br><span class="line"></span><br><span class="line">    my_opt = tf.train.GradientDescentOptimizer(<span class="number">0.00001</span>)</span><br><span class="line">    train_step = my_opt.minimize(loss)</span><br><span class="line"></span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line"></span><br><span class="line">    loss_vec = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10000</span>):</span><br><span class="line">        rand_index = np.random.choice(len(x_vals), size = batch_size)</span><br><span class="line">        rand_x = np.transpose([x_vals[rand_index]])</span><br><span class="line">        rand_y = np.transpose([y_vals[rand_index]])</span><br><span class="line">        sess.run(train_step, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">        temp_loss = sess.run(loss, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">        loss_vec.append(temp_loss)</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">25</span> == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'Step #'</span> + str(i + <span class="number">1</span>) + <span class="string">' A = '</span> + str(sess.run(A)) + <span class="string">' b = '</span> + str(sess.run(b)))</span><br><span class="line">            print(<span class="string">'Loss = '</span> + str(temp_loss))</span><br><span class="line"></span><br><span class="line">    [W] = sess.run(A)</span><br><span class="line">    [b] = sess.run(b)</span><br><span class="line"></span><br><span class="line">    best_fit = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x_vals:</span><br><span class="line">        best_fit.append(W * i + b)</span><br><span class="line"></span><br><span class="line">    plt.plot(x_vals, y_vals, <span class="string">'o'</span>, label=<span class="string">'Data Points'</span>)</span><br><span class="line">    plt.plot(x_vals, best_fit, <span class="string">'r-'</span>, label=<span class="string">'Best fit line'</span>, linewidth=<span class="number">3</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">'upper left'</span>)</span><br><span class="line">    plt.title(<span class="string">'Sepal Length vs Pedal Width'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Pedal Width'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Sepal Length'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    plt.plot(loss_vec, <span class="string">'b-'</span>)</span><br><span class="line">    plt.title(<span class="string">'L2 Loss per Generation'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Generation'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'L2 Loss'</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(_)</span>:</span></span><br><span class="line">    run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tf.app.run()</span><br></pre></td></tr></table></figure><p>这三种方式求解的线性模型，大家都熟悉一下。有什么不确定的地方，可以发邮件给我air@weaf.top。上面的方式其实在现实里面都可以使用，只不过前两种方法，在数据维度较大的时候，计算耗时。所以才会使用梯度下降的去求最优解。这次的文章就到这里。如果哪里表述不清的地方或者错误的地方，还请大家指出。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;tensorflow-linear-regression-1&quot;&gt;TensorFlow Linear Regression
        
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/categories/TensorFlow/"/>
    
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>asyncio 不完全指北（四）</title>
    <link href="http://weafteam.github.io/posts/7eb3a479/"/>
    <id>http://weafteam.github.io/posts/7eb3a479/</id>
    <published>2018-05-04T14:32:16.000Z</published>
    <updated>2018-08-07T08:56:41.619Z</updated>
    
    <content type="html"><![CDATA[<p>书接上文。</p><h2 id="同步原语">同步原语</h2><p>虽然使用 <code>asyncio</code> 的程序通常都以单线程运行，但仍然可以作为并发程序。每个协程或任务可以根据来自 I / O 或其他外部事件的延迟和中断以不可预测的顺序执行。为了支持安全并发，和 <code>threading</code>和 <code>multiprocessing</code> 模块一样，<code>asyncio</code> 包含了一些相同的低级原语的实现。</p><h3 id="锁">锁</h3><p>锁对共享资源的访问提供了保护。只有锁的持有者才能使用资源。第二次及以上获取锁的尝试将被阻止，因此每次只有一个持有者：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unlock</span><span class="params">(lock)</span>:</span></span><br><span class="line">    print(<span class="string">'callback releasing lock'</span>)</span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coro1</span><span class="params">(lock)</span>:</span></span><br><span class="line">    print(<span class="string">'`coro1` waiting for the lock'</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="keyword">await</span> lock:</span><br><span class="line">        print(<span class="string">'`coro1` acquired lock'</span>)</span><br><span class="line">    print(<span class="string">'`coro1` released lock'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coro2</span><span class="params">(lock)</span>:</span></span><br><span class="line">    print(<span class="string">'`coro2` waiting for the lock'</span>)</span><br><span class="line">    <span class="keyword">await</span> lock</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(<span class="string">'`coro2` acquired lock'</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">'`coro2` released lock'</span>)</span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></span><br><span class="line">    <span class="comment"># 创建并持有一个锁</span></span><br><span class="line">    lock = asyncio.Lock()</span><br><span class="line">    print(<span class="string">'acquiring the lock before starting coroutines'</span>)</span><br><span class="line">    <span class="keyword">await</span> lock.acquire()</span><br><span class="line">    print(<span class="string">f'lock acquired: <span class="subst">&#123;lock.locked()&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安排一个回调释放锁</span></span><br><span class="line">    loop.call_later(<span class="number">0.1</span>, functools.partial(unlock, lock))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行希望持有锁的协程</span></span><br><span class="line">    print(<span class="string">'waiting for coroutines'</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait([coro1(lock), coro2(lock)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    event_loop.run_until_complete(main(event_loop))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><p>可以使用 <code>await</code> 持有一个锁，并用 <code>release()</code> 释放，就像<code>coro2()</code> 的做法一样；同时也可以像 <code>coro1()</code> 一样，用带有 <code>await</code> 的异步上下文处理器来持有并释放一个锁：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">acquiring the lock before starting coroutines</span><br><span class="line">lock acquired: True</span><br><span class="line">waiting for coroutines</span><br><span class="line">`coro1` waiting for the lock</span><br><span class="line">`coro2` waiting for the lock</span><br><span class="line">callback releasing lock</span><br><span class="line">`coro1` acquired lock</span><br><span class="line">`coro1` released lock</span><br><span class="line">`coro2` acquired lock</span><br><span class="line">`coro2` released lock</span><br></pre></td></tr></table></figure><h3 id="event">Event</h3><p><code>asyncio.Event</code> 与 <code>threading.Event</code> 类似，用于允许多个协程等待某个事件发生，而不需要监听一个特定值来实现类似通知的功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_event</span><span class="params">(event)</span>:</span></span><br><span class="line">    print(<span class="string">'setting event in callback'</span>)</span><br><span class="line">    event.set()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coro1</span><span class="params">(event)</span>:</span></span><br><span class="line">    print(<span class="string">'coro1 waiting for event'</span>)</span><br><span class="line">    <span class="keyword">await</span> event.wait()</span><br><span class="line">    print(<span class="string">'coro1 triggered'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coro2</span><span class="params">(event)</span>:</span></span><br><span class="line">    print(<span class="string">'coro2 waiting for event'</span>)</span><br><span class="line">    <span class="keyword">await</span> event.wait()</span><br><span class="line">    print(<span class="string">'coro2 triggered'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></span><br><span class="line">    event = asyncio.Event()</span><br><span class="line">    print(<span class="string">f'event start state: <span class="subst">&#123;event.is_set()&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">    loop.call_later(<span class="number">0.1</span>, functools.partial(set_event, event))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(coro1(event), coro2(event))</span><br><span class="line">    print(<span class="string">f'event end state: <span class="subst">&#123;event.is_set()&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    event_loop.run_until_complete(main(event_loop))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><p>与锁一样，<code>coro1()</code> 和 <code>coro2()</code> 都会等待 <code>event</code> 被设置。不同之处在于，它们可以在 <code>event</code> 状态发生变化时立即启动，并且它们不需要获取 <code>event</code> 对象的唯一使用权：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">event start state: False</span><br><span class="line">coro2 waiting for event</span><br><span class="line">coro1 waiting for event</span><br><span class="line">setting event in callback</span><br><span class="line">coro2 triggered</span><br><span class="line">coro1 triggered</span><br><span class="line">event end state: True</span><br></pre></td></tr></table></figure><h3 id="condition">Condition</h3><p><code>Condition</code>的作用类似于 <code>Event</code>，不同之处在于，<code>Condition</code> 不会唤醒所有等待中的协程，唤醒的数量由 <code>notify() </code> 的参数控制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(condition, n)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> <span class="keyword">await</span> condition:</span><br><span class="line">        print(<span class="string">f'consumer <span class="subst">&#123;n&#125;</span> is waiting'</span>)</span><br><span class="line">        <span class="keyword">await</span> condition.wait()</span><br><span class="line">        print(<span class="string">f'consumer <span class="subst">&#123;n&#125;</span> triggered'</span>)</span><br><span class="line">    print(<span class="string">f'ending consumer <span class="subst">&#123;n&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">manipulate_condition</span><span class="params">(condition)</span>:</span></span><br><span class="line">    print(<span class="string">'starting manipulate_condition'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="keyword">await</span> condition:</span><br><span class="line">            print(<span class="string">f'notifying <span class="subst">&#123;i&#125;</span> consumers'</span>)</span><br><span class="line">            condition.notify(n=i)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="keyword">await</span> condition:</span><br><span class="line">        print(<span class="string">'notifying remaining consumers'</span>)</span><br><span class="line">        condition.notify_all()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'ending manipulate_condition'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></span><br><span class="line">    condition = asyncio.Condition()</span><br><span class="line"></span><br><span class="line">    consumers = [consumer(condition, i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line">    loop.create_task(manipulate_condition(condition))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*consumers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = event_loop.run_until_complete(main(event_loop))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><p>这个例子中启动了五个 <code>Condition</code> 的消费者。每个都使用 <code>wait()</code> 方法等待通知它们继续的消息。<code>manipulate_condition()</code> 通知一个消费者，然后通知两个消费者，最后通知所有剩余的消费者：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">starting manipulate_condition</span><br><span class="line">notifying 1 consumers</span><br><span class="line">consumer 2 is waiting</span><br><span class="line">consumer 3 is waiting</span><br><span class="line">consumer 0 is waiting</span><br><span class="line">consumer 4 is waiting</span><br><span class="line">consumer 1 is waiting</span><br><span class="line">notifying 2 consumers</span><br><span class="line">consumer 2 triggered</span><br><span class="line">ending consumer 2</span><br><span class="line">consumer 3 triggered</span><br><span class="line">ending consumer 3</span><br><span class="line">notifying remaining consumers</span><br><span class="line">ending manipulate_condition</span><br><span class="line">consumer 0 triggered</span><br><span class="line">ending consumer 0</span><br><span class="line">consumer 4 triggered</span><br><span class="line">ending consumer 4</span><br><span class="line">consumer 1 triggered</span><br><span class="line">ending consumer 1</span><br></pre></td></tr></table></figure><h3 id="queue">Queue</h3><p><code>asyncio.Queue</code> 为协程提供了一个先进先出的数据结构，类似于与多线程中的 <code>queue.Queue</code>，多进程中的 <code>multiprocessing.Queue</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(n, q)</span>:</span></span><br><span class="line">    print(<span class="string">f'consumer <span class="subst">&#123;n&#125;</span>: starting'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">f'consumer <span class="subst">&#123;n&#125;</span>: waiting for item'</span>)</span><br><span class="line">        item = <span class="keyword">await</span> q.get()</span><br><span class="line">        print(<span class="string">f'consumer <span class="subst">&#123;n&#125;</span>: has item <span class="subst">&#123;item&#125;</span>'</span>)</span><br><span class="line">        <span class="comment"># None 表示终止信号</span></span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            q.task_done()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">await</span> asyncio.sleep(<span class="number">0.01</span> * item)</span><br><span class="line">            q.task_done()</span><br><span class="line">    print(<span class="string">f'consumer <span class="subst">&#123;n&#125;</span>: ending'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(q, num_workers)</span>:</span></span><br><span class="line">    print(<span class="string">'producer: starting'</span>)</span><br><span class="line">    <span class="comment"># 向队列中添加一些数据</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_workers * <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">await</span> q.put(i)</span><br><span class="line">        print(<span class="string">f'producer: added task <span class="subst">&#123;i&#125;</span> to the queue'</span>)</span><br><span class="line">    <span class="comment"># 传入终止信号</span></span><br><span class="line">    print(<span class="string">'producer: adding stop signals to the queue'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_workers):</span><br><span class="line">        <span class="keyword">await</span> q.put(<span class="keyword">None</span>)</span><br><span class="line">    print(<span class="string">'producer: waiting for queue to empty'</span>)</span><br><span class="line">    <span class="keyword">await</span> q.join()</span><br><span class="line">    print(<span class="string">'producer: ending'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop, num_consumers)</span>:</span></span><br><span class="line">    <span class="comment"># 创建指定大小的队列</span></span><br><span class="line">    <span class="comment"># 超过队列大小时生产者会阻塞，直到有消费者取出数据</span></span><br><span class="line">    q = asyncio.Queue(maxsize=num_consumers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调度消费者</span></span><br><span class="line">    consumers = [loop.create_task(consumer(i, q)) <span class="keyword">for</span> i <span class="keyword">in</span> range(num_consumers)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 调度生产者</span></span><br><span class="line">    prod = loop.create_task(producer(q, num_consumers))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待所有任务完成</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(*consumers, prod)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    event_loop.run_until_complete(main(event_loop, <span class="number">2</span>))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><p>使用 <code>put()</code> 添加项或使用 <code>get()</code> 获取并删除项都是异步操作，因为队列大小可能是固定的（阻塞添加操作），或者队列可能是空的（阻塞获取项的操作）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">consumer 0: starting</span><br><span class="line">consumer 0: waiting for item</span><br><span class="line">consumer 1: starting</span><br><span class="line">consumer 1: waiting for item</span><br><span class="line">producer: starting</span><br><span class="line">producer: added task 0 to the queue</span><br><span class="line">producer: added task 1 to the queue</span><br><span class="line">consumer 0: has item 0</span><br><span class="line">consumer 1: has item 1</span><br><span class="line">producer: added task 2 to the queue</span><br><span class="line">producer: added task 3 to the queue</span><br><span class="line">consumer 0: waiting for item</span><br><span class="line">consumer 0: has item 2</span><br><span class="line">producer: added task 4 to the queue</span><br><span class="line">consumer 1: waiting for item</span><br><span class="line">consumer 1: has item 3</span><br><span class="line">producer: added task 5 to the queue</span><br><span class="line">producer: adding stop signals to the queue</span><br><span class="line">consumer 0: waiting for item</span><br><span class="line">consumer 0: has item 4</span><br><span class="line">consumer 1: waiting for item</span><br><span class="line">consumer 1: has item 5</span><br><span class="line">producer: waiting for queue to empty</span><br><span class="line">consumer 0: waiting for item</span><br><span class="line">consumer 0: has item None</span><br><span class="line">consumer 0: ending</span><br><span class="line">consumer 1: waiting for item</span><br><span class="line">consumer 1: has item None</span><br><span class="line">consumer 1: ending</span><br><span class="line">producer: ending</span><br></pre></td></tr></table></figure><h2 id="用-protocol-抽象类实现异步-i-o">用 Protocol 抽象类实现异步 I / O</h2><p>到目前为止，这些示例都避免了将并发和 I / O 操作混合在一起，一次只关注一个概念。但是，在 I / O 阻塞时切换上下文是 <code>asyncio</code> 的主要使用情形之一。在已经介绍的并发概念的基础上，本节将实现简单的 echo 服务器程序和客户端程序。客户端可以连接到服务器，发送一些数据，然后接收与响应相同的数据。每次启动 I / O 操作时，执行代码都会放弃对事件循环的控制，从而允许其他任务运行，直到 I / O 操作就绪。</p><h3 id="echo-服务器">Echo 服务器</h3><p>服务器首先导入所需的 <code>asyncio</code> 和 <code>logging</code> 模块，然后创建事件循环对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">SERVER_ADDRESS = (<span class="string">'localhost'</span>, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">    format=<span class="string">'%(name)s: %(message)s'</span>,</span><br><span class="line">    stream=sys.stderr,</span><br><span class="line">)</span><br><span class="line">log = logging.getLogger(<span class="string">'main'</span>)</span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br></pre></td></tr></table></figure><p>然后定义了一个 <code>asyncio.Protocol</code> 的子类，用来处理与客户端的通信。<code>Protocol</code> 对象的方法是基于与服务器 socket 关联的事件调用的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoServer</span><span class="params">(asyncio.Protocol)</span>:</span></span><br></pre></td></tr></table></figure><p>每个新的客户端连接都会触发对 <code>connection_made() </code> 的调用。<code>transport</code> 参数是<code>asyncio.Transport</code> 的实例，它提供了使用 socket 进行异步 I / O 的抽象。不同类型的通信提供不同的 <code>tansport</code> 实现，所有这些实现都具有相同的 API。例如，有单独的 <code>transport</code> 类用于与 socket 通信、与子进程通过管道通信。传入客户端的地址可以通过 <code>transport</code> 的 <code>get_extra_info()</code> 获取，这是一种特定于实现的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connection_made</span><span class="params">(self, transport)</span>:</span></span><br><span class="line">    self.transport = transport</span><br><span class="line">    self.address = transport.get_extra_info(<span class="string">'peername'</span>)</span><br><span class="line">    self.log = logging.getLogger(<span class="string">'EchoServer_&#123;&#125;_&#123;&#125;'</span>.format(*self.address))</span><br><span class="line">    self.log.debug(<span class="string">'connection accepted'</span>)</span><br></pre></td></tr></table></figure><p>建立连接后，当数据从客户端发送到服务器时，将调用协议的  <code>data_received()</code> 方法将数据传入以进行处理。数据以字节串的形式传递，由应用程序以适当的方式对其进行解码。在这里记录结果，然后通过调用 <code>transport.write()</code> 立即将响应发送回客户端：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_received</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    self.log.debug(<span class="string">'received &#123;!r&#125;'</span>.format(data))</span><br><span class="line">    self.transport.write(data)</span><br><span class="line">    self.log.debug(<span class="string">'sent &#123;!r&#125;'</span>.format(data))</span><br></pre></td></tr></table></figure><p>某些 <code>transport</code> 支持特殊的文件结束标识符（EOF）。遇到 EOF 时，将调用 <code>eof_received()</code> 方法。在这个实现中，EOF 被发送回客户端来表示它已被接收。由于并非所有 <code>transport</code> 都支持显式 EOF，因此 <code>protocol</code> 首先询问 <code>transport</code> 发送 EOF 是否安全：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eof_received</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.log.debug(<span class="string">'received EOF'</span>)</span><br><span class="line">    <span class="keyword">if</span> self.transport.can_write_eof():</span><br><span class="line">        self.transport.write_eof()</span><br></pre></td></tr></table></figure><p>当连接关闭时，无论是正常关闭还是错误关闭，都会调用 <code>protocol</code> 的  <code>connection_lost()</code>  方法。如果发生错误，参数会包含适当的异常对象，否则为 <code>None</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connection_lost</span><span class="params">(self, error)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> error:</span><br><span class="line">        self.log.error(<span class="string">f'ERROR: <span class="subst">&#123;error&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.log.debug(<span class="string">'closing'</span>)</span><br><span class="line">    super().connection_lost(error)</span><br></pre></td></tr></table></figure><p>启动服务器有两个步骤。首先，应用程序告诉事件循环要使用的 <code>protocol</code> 类以及要侦听的主机名和 socket，用来创建新的服务器对象。<code>create_server()</code> 方法是协程，因此必须由事件循环处理结果，才能真正的启动服务器。然后，协程完成后产生了一个绑定到事件循环的 <code>asyncio.Server</code> 实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">factory = event_loop.create_server(EchoServer, *SERVER_ADDRESS)</span><br><span class="line">server = event_loop.run_until_complete(factory)</span><br><span class="line">log.debug(<span class="string">'starting up on &#123;&#125; port &#123;&#125;'</span>.format(*SERVER_ADDRESS))</span><br></pre></td></tr></table></figure><p>然后，需要运行事件循环以处理事件和客户端请求。对于长期运行的服务，<code>run_forever()</code> 方法是最简单的方法。当事件循环停止时，无论是通过应用程序代码还是通过发信号通知进程，服务器都可以关闭，以便正确清理 socket，然后可以关闭事件循环，以便在程序退出之前完成对任何其他事务的处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    event_loop.run_forever()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    log.debug(<span class="string">'closing server'</span>)</span><br><span class="line">    server.close()</span><br><span class="line">    event_loop.run_until_complete(server.wait_closed())</span><br><span class="line">    log.debug(<span class="string">'closing event loop'</span>)</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><h3 id="echo-客户端">Echo 客户端</h3><p>使用 <code>protocol</code> 类构造客户端非常类似于构造服务器。首先导入所需的 <code>asyncio</code> 和 <code>logging</code> 模块，然后创建事件循环对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">MESSAGES = [</span><br><span class="line">    <span class="string">b'This is the message. '</span>,</span><br><span class="line">    <span class="string">b'It will be sent '</span>,</span><br><span class="line">    <span class="string">b'in parts.'</span>,</span><br><span class="line">]</span><br><span class="line">SERVER_ADDRESS = (<span class="string">'localhost'</span>, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    level=logging.DEBUG,</span><br><span class="line">    format=<span class="string">'%(name)s: %(message)s'</span>,</span><br><span class="line">    stream=sys.stderr,</span><br><span class="line">)</span><br><span class="line">log = logging.getLogger(<span class="string">'main'</span>)</span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br></pre></td></tr></table></figure><p>客户端 <code>protocol</code> 类定义了与服务器相同的方法，但实现方式不同。类构造函数接受两个参数，一个是要发送的消息列表，另一个是 <code>future</code> 的实例，用于通过接收来自服务器的响应来表明客户端已经完成了一个工作周期：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EchoClient</span><span class="params">(asyncio.Protocol)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, messages, future)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.messages = messages</span><br><span class="line">        self.log = logging.getLogger(<span class="string">'EchoClient'</span>)</span><br><span class="line">        self.f = future</span><br></pre></td></tr></table></figure><p>当客户端成功连接到服务器时，它将立即开始通信。消息序列一次发送一条，尽管底层网络代码可以将多个消息组合成一个传输。当所有消息都用尽时，将发送 EOF。</p><p>虽然看起来数据都是立即发送的，但实际上 <code>transport</code> 对象缓冲传出的数据，并在当 socket 的缓冲区准备好接收数据时设置回调来进行实际的传输。所有这些都是透明处理的，因此可以编写应用程序代码，就好像 I / O 操作正在立即发生一样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connection_made</span><span class="params">(self, transport)</span>:</span></span><br><span class="line">    self.transport = transport</span><br><span class="line">    self.address = transport.get_extra_info(<span class="string">'peername'</span>)</span><br><span class="line">    self.log.debug(<span class="string">'connecting to &#123;&#125; port &#123;&#125;'</span>.format(*self.address))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这里可以是 transport.writelines()</span></span><br><span class="line">    <span class="comment"># 但这会使显示要发送的消息的每个部分变得更加困难</span></span><br><span class="line">    <span class="keyword">for</span> msg <span class="keyword">in</span> self.messages:</span><br><span class="line">        transport.write(msg)</span><br><span class="line">        self.log.debug(<span class="string">f'sending <span class="subst">&#123;msg!r&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">if</span> transport.can_write_eof():</span><br><span class="line">        transport.write_eof()</span><br></pre></td></tr></table></figure><p>收到来自服务器的响应时，将记录该响应：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data_received</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    self.log.debug(<span class="string">f'received <span class="subst">&#123;data!r&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>当从服务器端接收到 EOF 或者连接被关闭时，本地 <code>transport</code> 对象被关闭，并通过设置结果将 <code>future</code> 对象标记为完成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eof_received</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.log.debug(<span class="string">'received EOF'</span>)</span><br><span class="line">    self.transport.close()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.f.done():</span><br><span class="line">        self.f.set_result(<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connection_lost</span><span class="params">(self, exc)</span>:</span></span><br><span class="line">    self.log.debug(<span class="string">'server closed connection'</span>)</span><br><span class="line">    self.transport.close()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.f.done():</span><br><span class="line">        self.f.set_result(<span class="keyword">True</span>)</span><br><span class="line">    super().connection_lost(exc)</span><br></pre></td></tr></table></figure><p>通常，<code>protocol</code> 类被传递到事件循环以创建连接。在这种情况下，由于事件循环没有向 <code>protocol</code> 构造函数传递额外参数的工具，因此需要 <code>functools.partial()</code> 来包装客户端类，并传递要发送的消息列表和 <code>future</code> 的实例。然后，在调用 <code>create_connection()</code> 建立客户端连接时，将使用该新的可调用对象代替 <code>protocol</code> 类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">client_completed = asyncio.Future()</span><br><span class="line"></span><br><span class="line">client_factory = functools.partial(</span><br><span class="line">    EchoClient,</span><br><span class="line">    messages=MESSAGES,</span><br><span class="line">    future=client_completed,</span><br><span class="line">)</span><br><span class="line">factory_coroutine = event_loop.create_connection(</span><br><span class="line">    client_factory,</span><br><span class="line">    *SERVER_ADDRESS,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>为了触发客户端运行，事件循环将调用一次创建客户端的协程，然后再调用一次指定给客户端的 <code>future</code> 实例，以便在完成后进行通信。使用这样的两个调用避免了客户端程序中的无限循环，客户端程序可能希望在完成与服务器的通信后退出。如果仅使用第一个调用来等待协程创建客户端，那它可能无法处理所有响应数据并正确清理与服务器的连接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">log.debug(<span class="string">'waiting for client to complete'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    event_loop.run_until_complete(factory_coroutine)</span><br><span class="line">    event_loop.run_until_complete(client_completed)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    log.debug(<span class="string">'closing event loop'</span>)</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><h3 id="输出">输出</h3><p>在一个窗口中运行服务器而在另一个窗口中运行客户端。</p><p>客户端将产生以下输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">asyncio: Using selector: KqueueSelector</span><br><span class="line">main: waiting for client to complete</span><br><span class="line">EchoClient: connecting to ::1 port 10000</span><br><span class="line">EchoClient: sending b'This is the message. '</span><br><span class="line">EchoClient: sending b'It will be sent '</span><br><span class="line">EchoClient: sending b'in parts.'</span><br><span class="line">EchoClient: received b'This is the message. It will be sent in parts.'</span><br><span class="line">EchoClient: received EOF</span><br><span class="line">EchoClient: server closed connection</span><br><span class="line">main: closing event loop</span><br></pre></td></tr></table></figure><p>虽然客户端总是单独发送消息，但客户端第一次运行时，服务器会收到一条大消息，并将该消息返回给客户端。根据网络的繁忙程度以及是否在准备所有数据之前刷新网络缓冲区，这些结果在后续运行中会有所不同：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">asyncio: Using selector: KqueueSelector</span><br><span class="line">main: starting up on localhost port 10000</span><br><span class="line">EchoServer_::1_55307: connection accepted</span><br><span class="line">EchoServer_::1_55307: received b'This is the message. It will be sent in part</span><br><span class="line">s.'</span><br><span class="line">EchoServer_::1_55307: sent b'This is the message. It will be sent in parts.'</span><br><span class="line">EchoServer_::1_55307: received EOF</span><br><span class="line">EchoServer_::1_55307: closing</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">EchoServer_::1_55309: connection accepted</span><br><span class="line">EchoServer_::1_55309: received b'This is the message. '</span><br><span class="line">EchoServer_::1_55309: sent b'This is the message. '</span><br><span class="line">EchoServer_::1_55309: received b'It will be sent in parts.'</span><br><span class="line">EchoServer_::1_55309: sent b'It will be sent in parts.'</span><br><span class="line">EchoServer_::1_55309: received EOF</span><br><span class="line">EchoServer_::1_55309: closing</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;书接上文。&lt;/p&gt;
&lt;h2 id=&quot;同步原语&quot;&gt;同步原语&lt;/h2&gt;
&lt;p&gt;虽然使用 &lt;code&gt;asyncio&lt;/code&gt; 的程序通常都以单线程运行，但仍然可以作为并发程序。每个协程或任务可以根据来自 I / O
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java中String、StringBuffer与StringBuilder的区别</title>
    <link href="http://weafteam.github.io/posts/2870b42a/"/>
    <id>http://weafteam.github.io/posts/2870b42a/</id>
    <published>2018-05-03T07:39:02.000Z</published>
    <updated>2018-05-29T01:27:49.865Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近准备开始刷牛客网上的题目，为找工作面试做准备，今后我会将其中感觉比较不错的知识点总结出来形成博客，贴出来与大家共同学习，如果其中存在什么问题，也希望大家不吝指教，邮箱地址为well@weaf.top。</p></blockquote><p>下面开始本次的内容整理吧~</p><h1 id="string">String</h1><p>首先说一下String类的声明,通过查阅源码可知它的声明是public final，所以也就是说我们的字符串的值一旦改变，我们就得再向内存重新申请一块地方存放改变之后的字符串。很显然，String是字符串常量，字符长度不可变。其实这是一件很恐怖的事情，当你需要多次改变时，多次的改变产生的代价不言而喻。</p><h1 id="stringbuffer">StringBuffer</h1><p>StringBuffer是字符串变量，支持多线程进行字符操作，而且是线程安全的，适合在多线程中使用。原因是在源代码中StringBuilder的很多方法都被关键字synchronized修饰了，这也是StringBuffer和StringBuilder的最大区别的地方。</p><h1 id="stringbuilder">StringBuilder</h1><p>StringBuilder也是字符串变量，但是区别于StringBuffer，它并不支持并发操作，非线程安全，不适合在多线程中使用，但是其在单线程中的性能比StringBuffer高。</p><h1 id="测试">测试</h1><h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EchoNum = <span class="number">10000</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TestStr</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String A = <span class="keyword">new</span> String(<span class="string">"AAA"</span>);</span><br><span class="line">        <span class="keyword">long</span> StartTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;EchoNum;i++)&#123;</span><br><span class="line">            A+=<span class="string">"A"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> EndTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"String: "</span>+ (EndTime-StartTime)+<span class="string">" millis has been used"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TestStrBuffer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuffer A = <span class="keyword">new</span> StringBuffer(<span class="string">"AAA"</span>);</span><br><span class="line">        <span class="keyword">long</span> StartTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;EchoNum;i++)&#123;</span><br><span class="line">            A = A.append(<span class="string">"A"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> EndTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"StringBuffer: "</span>+ (EndTime-StartTime)+<span class="string">" millis has been used"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TestStrBuilder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuilder A = <span class="keyword">new</span> StringBuilder(<span class="string">"AAA"</span>);</span><br><span class="line">        <span class="keyword">long</span> StartTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;EchoNum;i++)&#123;</span><br><span class="line">            A = A.append(<span class="string">"A"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> EndTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"StringBuilder: "</span>+ (EndTime-StartTime)+<span class="string">" millis has been used"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        TestStr();</span><br><span class="line">        TestStrBuffer();</span><br><span class="line">        TestStrBuilder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果">结果</h2><p><img src="https://i.loli.net/2018/05/06/5aee5e758b3a0.png" alt="StringsResult.png"></p><p>结果就很明显了，String的效率最低下，只考虑单线程的话，推荐使用StringBuilder；但是如果是要保证线程安全的话，肯定要使用StringBuffer。</p><p>稍微总结一下：</p><ul><li>如果我们需要一个在整个程序中不需要修改的字符串，<strong>String</strong>是首选。</li><li>如果我们需要一个在多线程之间共享的动态字符串，<strong>StringBuffer</strong>是我们的选择。</li><li>如果以上两种情况都不存在，<strong>StringBuilder</strong>是一个不错的选择。</li></ul><h1 id="练手">练手</h1><p>然后来看一道阿里巴巴的面试题吧，题目内容如下：</p><p><strong>题目：</strong> (单选题)Java中，StringBuilder和StringBuffer的区别，下面说法错误的是？</p><p><strong>A：</strong> StringBuffer是线程安全的。</p><p><strong>B：</strong> StringBuilder是非线程安全的。</p><p><strong>C：</strong> StringBuffer对String类型进行改变的时候，其实都等同于生成了一个新的String对象，然后将指针指向新的String对象。</p><p><strong>D：</strong> 效率比较 String &lt; StringBuffer &lt; StringBuilder，但是在 String S1 = “This is only a” + &quot; simple&quot; + &quot; test“时，String的效率最高。</p><p><strong>分析：</strong></p><p>A，B就不用多说了，肯定是正确的。C项一眼其实就能看出来是错误的，StringBuffer和StringBuilder都是字符串变量，并不需要重新申请内存存放新的对象。D项中的后一部分<strong>String S1 = “This is only a”+ “Simple”+“Test”</strong>，其实这个地方并没有字符串操作处理，只是简单的<strong>String S1 = “This is only a simple test”</strong>，所以效率最高。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;最近准备开始刷牛客网上的题目，为找工作面试做准备，今后我会将其中感觉比较不错的知识点总结出来形成博客，贴出来与大家共同学习，如果其中存在什么问题，也希望大家不吝指教，邮箱地址为well@weaf.top。&lt;/p&gt;
&lt;/blockquote&gt;

        
      
    
    </summary>
    
      <category term="JAVA" scheme="http://weafteam.github.io/categories/JAVA/"/>
    
    
      <category term="面试" scheme="http://weafteam.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号后台在SpringBoot2.0中的实现（上）</title>
    <link href="http://weafteam.github.io/posts/637facd6/"/>
    <id>http://weafteam.github.io/posts/637facd6/</id>
    <published>2018-05-01T10:13:02.000Z</published>
    <updated>2018-05-29T01:27:49.896Z</updated>
    
    <content type="html"><![CDATA[<p>现在微信在中国作为最重要的社交软件，相信很多人都使用微信公众号。 而且微信公众号也成为一些企业传播资讯最好的平台。 那么今天就来讲下微信公众号后台具体如何来实现。 一、申请公众号 ——- 首先我们根据自己活着企业的所需的东西，选定好一下几种类别的账号。 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/wechat-1.png" alt="wechat-1"> 不同的账户拥有的权限不尽相同。 这个我们可以根据权限文档进行查看！</p><p><a href="https://mp.weixin.qq.com/advanced/advanced?action=table&amp;token=1776791094&amp;lang=zh_CN" target="_blank" rel="noopener">接口权限：https://mp.weixin.qq.com/advanced/advanced?action=table&amp;token=1776791094&amp;lang=zh_CN</a> 然后就是根据自己的接口的要求，去审批。 二、设置基本配置 ——— <img src="https://weaf.oss-cn-beijing.aliyuncs.com/wechat-2.png" alt="wechat-2"> 这里需要我们先开启自己的开发者密码。（这个是我们在开发过程中需要使用的）</p><p>服务器地址（URL）:这里需要设置公网可访问的接口</p><p>令牌（Token）：这块我们可以设置为一个32为UUID的字符串。</p><p>更多细节请参考官方文档：<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421135319" class="uri" target="_blank" rel="noopener">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421135319</a></p><p>三、代码的实现 其他的也就不多说了，直接上代码。</p><p>我们首先创建一个介入指南中，微信需要验证的接口。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**---------*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"verification"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">weChatVerification</span><span class="params">(String signature, String timestamp, String nonce, String echostr, HttpServletRequest request)</span> <span class="keyword">throws</span> AesException </span>&#123;</span><br><span class="line">    log.info(<span class="string">"微信校验参数：signature=&#123;&#125;，timestamp=&#123;&#125;，nonce=&#123;&#125;，echostr=&#123;&#125;"</span>,signature,timestamp,nonce,echostr);</span><br><span class="line">    <span class="keyword">if</span>(signature.equals(getSHA1(token,timestamp,nonce)))</span><br><span class="line">            <span class="keyword">return</span> echostr;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getSHA1</span><span class="params">(String token, String timestamp, String nonce)</span> <span class="keyword">throws</span> AesException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] array = <span class="keyword">new</span> String[] &#123; token, timestamp, nonce &#125;;</span><br><span class="line">            StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            <span class="comment">// 字符串排序</span></span><br><span class="line">            Arrays.sort(array);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                sb.append(array[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            String str = sb.toString();</span><br><span class="line">            <span class="comment">// SHA1签名生成</span></span><br><span class="line">            MessageDigest md = MessageDigest.getInstance(<span class="string">"SHA-1"</span>);</span><br><span class="line">            md.update(str.getBytes());</span><br><span class="line">            <span class="keyword">byte</span>[] digest = md.digest();</span><br><span class="line"></span><br><span class="line">            StringBuffer hexstr = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            String shaHex = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digest.length; i++) &#123;</span><br><span class="line">                shaHex = Integer.toHexString(digest[i] &amp; <span class="number">0xFF</span>);</span><br><span class="line">                <span class="keyword">if</span> (shaHex.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                    hexstr.append(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                hexstr.append(shaHex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> hexstr.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AesException(AesException.ComputeSignatureError);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>现在就已经接入了微信公众平台。</p>]]></content>
    
    <summary type="html">
    
      微信公众号后台在SpringBoot2.0中的实现（上）
    
    </summary>
    
      <category term="JAVA" scheme="http://weafteam.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://weafteam.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>asyncio 不完全指北（三）</title>
    <link href="http://weafteam.github.io/posts/c99ebd1c/"/>
    <id>http://weafteam.github.io/posts/c99ebd1c/</id>
    <published>2018-05-01T03:58:22.000Z</published>
    <updated>2018-08-07T08:56:41.618Z</updated>
    
    <content type="html"><![CDATA[<p>书接上文。</p><h2 id="并行执行任务">并行执行任务</h2><p>任务是与事件循环交互的主要方式之一。任务包装协程并跟踪它们完成的时间。任务是 <code>future</code> 的子类，因此其它协程可以等待任务，并且每个任务都有一个结果，可以在任务完成后获取。</p><h3 id="启动任务">启动任务</h3><p>使用 <code>create_task()</code> 创建任务实例。只要事件循环正在运行且协程不返回，生成的任务将作为事件循环管理的并发操作的一部分运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">task_func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in task_func'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'the result'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></span><br><span class="line">    print(<span class="string">'creating task'</span>)</span><br><span class="line">    task = loop.create_task(task_func())</span><br><span class="line">    print(<span class="string">f'waiting for <span class="subst">&#123;task!r&#125;</span>'</span>)</span><br><span class="line">    return_value = <span class="keyword">await</span> task</span><br><span class="line">    print(<span class="string">f'task completed <span class="subst">&#123;task!r&#125;</span>'</span>)</span><br><span class="line">    print(<span class="string">f'return value: <span class="subst">&#123;return_value!r&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    event_loop.run_until_complete(main(event_loop))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><p><code>main()</code> 函数在退出前等待任务返回结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">creating task</span><br><span class="line">waiting for &lt;Task pending coro=&lt;task_func() running at *.py:4&gt;&gt;</span><br><span class="line">in task_func</span><br><span class="line">task completed &lt;Task finished coro=&lt;task_func() done, defined at *.py:4&gt; result='the result'&gt;</span><br><span class="line">return value: 'the result'</span><br></pre></td></tr></table></figure><h3 id="取消任务">取消任务</h3><p>通过保留 <code>create_task()</code> 返回的任务对象，可以在任务完成之前取消其操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">task_func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in task_func'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'the result'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></span><br><span class="line">    print(<span class="string">'creating task'</span>)</span><br><span class="line">    task = loop.create_task(task_func())</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'canceling task'</span>)</span><br><span class="line">    task.cancel()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'canceled task <span class="subst">&#123;task!r&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> task</span><br><span class="line">    <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">        print(<span class="string">'caught error from canceled task'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f'task result: <span class="subst">&#123;task.result()!r&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    event_loop.run_until_complete(main(event_loop))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><p>在启动事件循环之前取消任务时，<code>await task</code> 会抛出 <code>CancelledError</code> 异常：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">creating task</span><br><span class="line">canceling task</span><br><span class="line">canceled task &lt;Task cancelling coro=&lt;task_func() running at *.py:4&gt;&gt;</span><br><span class="line">caught error from canceled task</span><br></pre></td></tr></table></figure><p>如果某个任务在等待另一个并发操作时被取消，则会通过在其等待的位置抛出 <code>CancelledError</code> 异常来通知该任务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">task_func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in task_func, sleeping'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">        print(<span class="string">'task_func was canceled'</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'the result'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_canceller</span><span class="params">(t)</span>:</span></span><br><span class="line">    print(<span class="string">'in task_canceller'</span>)</span><br><span class="line">    t.cancel()</span><br><span class="line">    print(<span class="string">'canceled the task'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></span><br><span class="line">    print(<span class="string">'creating task'</span>)</span><br><span class="line">    task = loop.create_task(task_func())</span><br><span class="line">    loop.call_soon(task_canceller, task)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> task</span><br><span class="line">    <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">        print(<span class="string">'main() also sees task as canceled'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    event_loop.run_until_complete(main(event_loop))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><p>捕获该异常可以清理已完成工作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">creating task</span><br><span class="line">in task_func, sleeping</span><br><span class="line">in task_canceller</span><br><span class="line">canceled the task</span><br><span class="line">task_func was canceled</span><br><span class="line">main() also sees task as canceled</span><br></pre></td></tr></table></figure><h3 id="从协程创建任务">从协程创建任务</h3><p><code>ensure_future()</code> 返回一个与协程的执行相关联的任务。然后，可以将该任务实例传递给其他代码，这些代码可以在不知道原始的协程是如何构造或调用的情况下等待它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'wrapped'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'result'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(task)</span>:</span></span><br><span class="line">    print(<span class="string">'inner: starting'</span>)</span><br><span class="line">    print(<span class="string">f'inner: waiting for <span class="subst">&#123;task!r&#125;</span>'</span>)</span><br><span class="line">    result = <span class="keyword">await</span> task</span><br><span class="line">    print(<span class="string">f'inner: task returned <span class="subst">&#123;result!r&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">starter</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'starter: creating task'</span>)</span><br><span class="line">    task = asyncio.ensure_future(wrapped())</span><br><span class="line">    print(<span class="string">'starter: waiting for inner'</span>)</span><br><span class="line">    <span class="keyword">await</span> inner(task)</span><br><span class="line">    print(<span class="string">'starter: inner returned'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'entering event loop'</span>)</span><br><span class="line">    result = event_loop.run_until_complete(starter())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><p>可以注意到传入 <code>ensure_future()</code> 的协程不会马上启动，而是直到某个地方用 <code>await</code> 调用了用它创建的任务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">entering event loop</span><br><span class="line">starter: creating task</span><br><span class="line">starter: waiting for inner</span><br><span class="line">inner: starting</span><br><span class="line">inner: waiting for &lt;Task pending coro=&lt;wrapped() running at *.py:4&gt;&gt;</span><br><span class="line">wrapped</span><br><span class="line">inner: task returned 'result'</span><br><span class="line">starter: inner returned</span><br></pre></td></tr></table></figure><h2 id="用控制结构组合协程">用控制结构组合协程</h2><p>一系列线性执行的协程可以很方便的使用关键字 <code>await</code> 管理。对于复杂的控制结构，例如一个协程等待其他几个协程并行完成，也可以用 <code>asyncio</code> 中的工具实现。</p><h3 id="等待多个协程">等待多个协程</h3><p>将一个操作分成许多部分并分别执行它们是很常见的场景。例如，下载多个远程资源，或查询远程 API。在执行顺序无关紧要，并且可能存在任意数量的操作的情况下，<code>wait()</code> 可以用于暂停一个协程，直到其他后台操作完成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">phase</span><span class="params">(i)</span>:</span></span><br><span class="line">    print(<span class="string">f'in phase <span class="subst">&#123;i&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">0.1</span> * i)</span><br><span class="line">    print(<span class="string">f'done with phase <span class="subst">&#123;i&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'phase <span class="subst">&#123;i&#125;</span> result'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(num_phases)</span>:</span></span><br><span class="line">    print(<span class="string">'starting main'</span>)</span><br><span class="line">    phases = [phase(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(num_phases)]</span><br><span class="line">    print(<span class="string">'waiting for phases to complete'</span>)</span><br><span class="line">    completed, pending = <span class="keyword">await</span> asyncio.wait(phases)</span><br><span class="line">    results = [t.result() <span class="keyword">for</span> t <span class="keyword">in</span> completed]</span><br><span class="line">    print(<span class="string">f'results: <span class="subst">&#123;results!r&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    event_loop.run_until_complete(main(<span class="number">3</span>))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><p>在内部，<code>wait()</code> 使用一个集合来保存它创建的任务实例，所以任务的执行顺序是无序的。<code>wait()</code> 的返回值是一个包含两个集合的元组，第一个保存了状态为 <code>done</code> 的任务，第二个保存了状态为 <code>pending</code> 的任务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">starting main</span><br><span class="line">waiting for phases to complete</span><br><span class="line">in phase 1</span><br><span class="line">in phase 0</span><br><span class="line">in phase 2</span><br><span class="line">done with phase 0</span><br><span class="line">done with phase 1</span><br><span class="line">done with phase 2</span><br><span class="line">results: ['phase 1 result', 'phase 0 result', 'phase 2 result']</span><br></pre></td></tr></table></figure><p>调用 <code>wait()</code> 时如果指定了 <code>timeout</code> 参数，才会出现状态为 <code>pending</code> 的任务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">phase</span><span class="params">(i)</span>:</span></span><br><span class="line">    print(<span class="string">f'in phase <span class="subst">&#123;i&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0.1</span> * i)</span><br><span class="line">    <span class="keyword">except</span> asyncio.CancelledError:</span><br><span class="line">        print(<span class="string">f'phase <span class="subst">&#123;i&#125;</span> canceled'</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f'done with phase <span class="subst">&#123;i&#125;</span>'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'phase <span class="subst">&#123;i&#125;</span> result'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(num_phases)</span>:</span></span><br><span class="line">    print(<span class="string">'starting main'</span>)</span><br><span class="line">    phases = [phase(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(num_phases)]</span><br><span class="line">    print(<span class="string">'waiting 0.1 for phases to complete'</span>)</span><br><span class="line">    completed, pending = <span class="keyword">await</span> asyncio.wait(phases, timeout=<span class="number">0.1</span>)</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;len(completed)&#125;</span> completed and <span class="subst">&#123;len(pending)&#125;</span> pending'</span>)</span><br><span class="line">    <span class="comment"># 取消状态为 pending 的任务</span></span><br><span class="line">    <span class="keyword">if</span> pending:</span><br><span class="line">        print(<span class="string">'canceling tasks'</span>)</span><br><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> pending:</span><br><span class="line">            t.cancel()</span><br><span class="line">    print(<span class="string">'exiting main'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    event_loop.run_until_complete(main(<span class="number">3</span>))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><p>这些状态为 <code>pending</code> 的任务应被取消或者继续等待它们完成。事件循环继续运行时这些任务将继续执行，如果<code>wait()</code> 函数的完成被认为所有操作都已经终止了，那这样的结果是不正确的；如果在事件循环结束时仍未完成这些任务，则会生成警告。所以有必要在 <code>wait()</code> 函数结束后取消所有状态为 <code>pending</code> 的任务。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">starting main</span><br><span class="line">waiting 0.1 for phases to complete</span><br><span class="line">in phase 0</span><br><span class="line">in phase 1</span><br><span class="line">in phase 2</span><br><span class="line">done with phase 0</span><br><span class="line">1 completed and 2 pending</span><br><span class="line">canceling tasks</span><br><span class="line">exiting main</span><br><span class="line">phase 1 canceled</span><br><span class="line">phase 2 canceled</span><br></pre></td></tr></table></figure><h3 id="收集协程的结果">收集协程的结果</h3><p>如果要执行的多个协程已经被定义好，并且只关心它们的结果，那么 <code>gather()</code> 是一种比较好的收集结果的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">phase1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in phase1'</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'done with phase1'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'phase1 result'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">phase2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in phase2'</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'done with phase2'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'phase2 result'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'starting main'</span>)</span><br><span class="line">    print(<span class="string">'waiting for phases to complete'</span>)</span><br><span class="line">    results = <span class="keyword">await</span> asyncio.gather(</span><br><span class="line">        phase1(),</span><br><span class="line">        phase2(),</span><br><span class="line">    )</span><br><span class="line">    print(<span class="string">f'results: <span class="subst">&#123;results!r&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    event_loop.run_until_complete(main())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><p><code>gather()</code> 创建的任务不会公开，因此无法取消。返回值是一个结果列表，顺序与传递给 <code>gather()</code> 的参数的顺序相同，与实际完成的顺序无关：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">starting main</span><br><span class="line">waiting for phases to complete</span><br><span class="line">in phase2</span><br><span class="line">in phase1</span><br><span class="line">done with phase2</span><br><span class="line">done with phase1</span><br><span class="line">results: [&apos;phase1 result&apos;, &apos;phase2 result&apos;]</span><br></pre></td></tr></table></figure><h3 id="在任务完成后做一些事">在任务完成后做一些事</h3><p><code>as_completed()</code> 是一个生成器，它管理当作参数传递给它的协程列表的执行，每次迭代都会产生一个执行完的协程。与 <code>wait()</code> 一样，<code>as_completed()</code> 也不保证顺序；与 <code>wait()</code> 不同的是它不会等到所有后台操作完成后才可以执行其它操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">phase</span><span class="params">(i)</span>:</span></span><br><span class="line">    print(<span class="string">f'in phase <span class="subst">&#123;i&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">0.5</span> - (<span class="number">0.1</span> * i))</span><br><span class="line">    print(<span class="string">f'done with phase <span class="subst">&#123;i&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'phase <span class="subst">&#123;i&#125;</span> result'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(num_phases)</span>:</span></span><br><span class="line">    print(<span class="string">'starting main'</span>)</span><br><span class="line">    phases = [phase(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(num_phases)]</span><br><span class="line">    print(<span class="string">'waiting for phases to complete'</span>)</span><br><span class="line">    results = []</span><br><span class="line">    <span class="keyword">for</span> next_to_complete <span class="keyword">in</span> asyncio.as_completed(phases):</span><br><span class="line">        print(<span class="string">f'start <span class="subst">&#123;next_to_complete&#125;</span>'</span>)</span><br><span class="line">        answer = <span class="keyword">await</span> next_to_complete</span><br><span class="line">        print(<span class="string">f'received answer <span class="subst">&#123;answer!r&#125;</span>'</span>)</span><br><span class="line">        results.append(answer)</span><br><span class="line">    print(<span class="string">f'results: <span class="subst">&#123;results!r&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    event_loop.run_until_complete(main(<span class="number">3</span>))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><p>这个例子启动了几个协程，这些协程以它们开始顺序的相反顺序结束。当生成器被消耗时，循环使用 <code>await</code>等待协程的结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">starting main</span><br><span class="line">waiting for phases to complete</span><br><span class="line">in phase 0</span><br><span class="line">in phase 1</span><br><span class="line">in phase 2</span><br><span class="line">done with phase 2</span><br><span class="line">received answer 'phase 2 result'</span><br><span class="line">done with phase 1</span><br><span class="line">received answer 'phase 1 result'</span><br><span class="line">done with phase 0</span><br><span class="line">received answer 'phase 0 result'</span><br><span class="line">results: ['phase 2 result', 'phase 1 result', 'phase 0 result']</span><br></pre></td></tr></table></figure><h2 id="参考资料">参考资料</h2><ul><li><a href="https://pymotw.com/3/asyncio/tasks.html" target="_blank" rel="noopener">Executing Tasks Concurrently</a></li><li><a href="https://pymotw.com/3/asyncio/control.html" target="_blank" rel="noopener">Composing Coroutines with Control Structures</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;书接上文。&lt;/p&gt;
&lt;h2 id=&quot;并行执行任务&quot;&gt;并行执行任务&lt;/h2&gt;
&lt;p&gt;任务是与事件循环交互的主要方式之一。任务包装协程并跟踪它们完成的时间。任务是 &lt;code&gt;future&lt;/code&gt;
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>asyncio 不完全指北（二）</title>
    <link href="http://weafteam.github.io/posts/84801e4e/"/>
    <id>http://weafteam.github.io/posts/84801e4e/</id>
    <published>2018-04-24T15:43:20.000Z</published>
    <updated>2018-08-07T08:56:41.617Z</updated>
    
    <content type="html"><![CDATA[<p>书接上文。</p><h2 id="调度常规函数">调度常规函数</h2><p>除了管理协程和 I / O 回调之外，<code>asyncio</code> 事件循环还可以根据循环中的计时器调度常规函数。</p><h3 id="立即调度">立即调度</h3><p>如果函数执行的时机无关紧要，<code>call_soon()</code> 可以用于在事件循环的下一次迭代中调度函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(arg, *, kwarg=<span class="string">'default'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">f'callback invoked with <span class="subst">&#123;arg&#125;</span> and <span class="subst">&#123;kwarg&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></span><br><span class="line">    print(<span class="string">'registering callbacks'</span>)</span><br><span class="line">    loop.call_soon(callback, <span class="number">1</span>)</span><br><span class="line">    wrapped = functools.partial(callback, kwarg=<span class="string">'not default'</span>)</span><br><span class="line">    loop.call_soon(wrapped, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'entering event loop'</span>)</span><br><span class="line">    event_loop.run_until_complete(main(event_loop))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'closing event loop'</span>)</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><p><code>call_soon()</code> 的第一个参数为回调函数，剩下的位置参数都会被传递给回调函数。如果想传入关键字参数，就需要用到 <code>functools.partical()</code>。</p><p>回调函数按照调度顺序被依次调用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">entering event loop</span><br><span class="line">registering callbacks</span><br><span class="line">callback invoked with 1 and default</span><br><span class="line">callback invoked with 2 and not default</span><br><span class="line">closing event loop</span><br></pre></td></tr></table></figure><h3 id="有延迟的调度">有延迟的调度</h3><p>要将回调函数的执行推迟到将来的某个时间，可以使用 <code>call_later()</code>。它的第一个参数是以秒为单位的延迟，第二个参数是回调函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">f'callback <span class="subst">&#123;n&#125;</span> invoked'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></span><br><span class="line">    print(<span class="string">'registering callbacks'</span>)</span><br><span class="line">    loop.call_later(<span class="number">0.2</span>, callback, <span class="number">1</span>)</span><br><span class="line">    loop.call_later(<span class="number">0.1</span>, callback, <span class="number">2</span>)</span><br><span class="line">    loop.call_soon(callback, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">0.4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'entering event loop'</span>)</span><br><span class="line">    event_loop.run_until_complete(main(event_loop))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'closing event loop'</span>)</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><p>在这个例子中，相同的回调函数参与了三次调度，分别使用了几个不同的延迟和不同的参数。最后使用了 <code>call_soon()</code>，它使回调函数在所有延迟调度之前调用，这表明 <code>call_soon()</code> 通常意味着最小延迟：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">entering event loop</span><br><span class="line">registering callbacks</span><br><span class="line">callback 3 invoked</span><br><span class="line">callback 2 invoked</span><br><span class="line">callback 1 invoked</span><br><span class="line">closing event loop</span><br></pre></td></tr></table></figure><h3 id="在特定时间调度">在特定时间调度</h3><p>还可以在特定时间调度函数。事件循环使用单调时钟，而不是 Unix 时钟，以确保当前的值永不回归。要在特定的时间调度，必须使用事件循环的<code>time()</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(n, loop)</span>:</span></span><br><span class="line">    print(<span class="string">f'callback <span class="subst">&#123;n&#125;</span> invoked at <span class="subst">&#123;loop.time()&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></span><br><span class="line">    now = loop.time()</span><br><span class="line">    print(<span class="string">f'clock time: <span class="subst">&#123;time.time()&#125;</span>'</span>)</span><br><span class="line">    print(<span class="string">f'loop  time: <span class="subst">&#123;now&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'registering callbacks'</span>)</span><br><span class="line">    loop.call_at(now + <span class="number">0.2</span>, callback, <span class="number">1</span>, loop)</span><br><span class="line">    loop.call_at(now + <span class="number">0.1</span>, callback, <span class="number">2</span>, loop)</span><br><span class="line">    loop.call_soon(callback, <span class="number">3</span>, loop)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'entering event loop'</span>)</span><br><span class="line">    event_loop.run_until_complete(main(event_loop))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'closing event loop'</span>)</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><p>可以注意到事件循环内的时间与 <code>time.time()</code> 不一致：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">entering event loop</span><br><span class="line">clock time: 1524502404.7036376</span><br><span class="line">loop  time: 4562.515</span><br><span class="line">registering callbacks</span><br><span class="line">callback 3 invoked at 4562.515</span><br><span class="line">callback 2 invoked at 4562.625</span><br><span class="line">callback 1 invoked at 4562.718</span><br><span class="line">closing event loop</span><br></pre></td></tr></table></figure><h2 id="异步产生结果">异步产生结果</h2><p><code>future</code>是尚未完成的工作的结果。事件循环可以监视<code>future</code>对象的状态直到它完成，从而允许应用程序的一部分等待另一部分完成某些工作。</p><h3 id="等待-future">等待 <code>future</code></h3><p><code>future</code>就像协程，所以任何用于处理协程的方法也可以用来处理<code>future</code>。这个例子将<code>future</code>传递给事件循环的<code>run_until_complete()</code>方法。记住我们在上一篇中提到的，通常我们不应该自行创建 <code>future</code> 对象，这里只为演示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mark_done</span><span class="params">(future, result)</span>:</span></span><br><span class="line">    print(<span class="string">f'setting future result to <span class="subst">&#123;result!r&#125;</span>'</span>)</span><br><span class="line">    future.set_result(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    all_done = asyncio.Future()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'scheduling mark_done'</span>)</span><br><span class="line">    event_loop.call_soon(mark_done, all_done, <span class="string">'the result'</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'entering event loop'</span>)</span><br><span class="line">    result = event_loop.run_until_complete(all_done)</span><br><span class="line">    print(<span class="string">f'returned result: <span class="subst">&#123;result!r&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'closing event loop'</span>)</span><br><span class="line">    event_loop.close()</span><br><span class="line"></span><br><span class="line">print(<span class="string">f'future result: <span class="subst">&#123;all_done.result()!r&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>调用 <code>set_result()</code> 时，<code>future</code> 的状态会被更改为已完成，<code>future</code>的实例将保存结果，并返回：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scheduling mark_done</span><br><span class="line">entering event loop</span><br><span class="line">setting future result to 'the result'</span><br><span class="line">returned result: 'the result'</span><br><span class="line">closing event loop</span><br><span class="line">future result: 'the result'</span><br></pre></td></tr></table></figure><p><code>future</code> 也可以与 <code>await</code> 一起使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mark_done</span><span class="params">(future, result)</span>:</span></span><br><span class="line">    print(<span class="string">f'setting future result to <span class="subst">&#123;result!r&#125;</span>'</span>)</span><br><span class="line">    future.set_result(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(loop)</span>:</span></span><br><span class="line">    all_done = asyncio.Future()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'scheduling mark_done'</span>)</span><br><span class="line">    loop.call_soon(mark_done, all_done, <span class="string">'the result'</span>)</span><br><span class="line"></span><br><span class="line">    result = <span class="keyword">await</span> all_done</span><br><span class="line">    print(<span class="string">f'returned result: <span class="subst">&#123;result!r&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    event_loop.run_until_complete(main(event_loop))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><p><code>future</code> 的结果由 <code>await</code> 返回：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scheduling mark_done</span><br><span class="line">setting future result to <span class="string">'the result'</span></span><br><span class="line">returned result: <span class="string">'the result'</span></span><br></pre></td></tr></table></figure><h3 id="future-的回调"><code>future</code> 的回调</h3><p>除了像协程一样工作之外，<code>future</code>还可以在完成时调用回调函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(future, n)</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;n&#125;</span>: future done: <span class="subst">&#123;future.result()&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">register_callbacks</span><span class="params">(all_done)</span>:</span></span><br><span class="line">    print(<span class="string">'registering callbacks on future'</span>)</span><br><span class="line">    all_done.add_done_callback(functools.partial(callback, n=<span class="number">1</span>))</span><br><span class="line">    all_done.add_done_callback(functools.partial(callback, n=<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(all_done)</span>:</span></span><br><span class="line">    <span class="keyword">await</span> register_callbacks(all_done)</span><br><span class="line">    print(<span class="string">'setting result of future'</span>)</span><br><span class="line">    all_done.set_result(<span class="string">'the result'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    all_done = asyncio.Future()</span><br><span class="line">    event_loop.run_until_complete(main(all_done))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><p>添加回调的函数只需要一个参数，即回调函数；回调函数也只接受一个参数，即 <code>future</code> 实例。若要传递其他参数给回调函数，要使用 <code>functools.partical()</code> 。回调函数按注册顺序被调用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">registering callbacks on future</span><br><span class="line">setting result of future</span><br><span class="line">1: future done: the result</span><br><span class="line">2: future done: the result</span><br></pre></td></tr></table></figure><h2 id="参考资料">参考资料</h2><ul><li><a href="https://pymotw.com/3/asyncio/scheduling.html" target="_blank" rel="noopener">Scheduling Calls to Regular Functions</a></li><li><a href="https://pymotw.com/3/asyncio/futures.html" target="_blank" rel="noopener">Producing Results Asynchronously</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;书接上文。&lt;/p&gt;
&lt;h2 id=&quot;调度常规函数&quot;&gt;调度常规函数&lt;/h2&gt;
&lt;p&gt;除了管理协程和 I / O 回调之外，&lt;code&gt;asyncio&lt;/code&gt; 事件循环还可以根据循环中的计时器调度常规函数。&lt;/p&gt;
&lt;h3
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kafka在SpringBoot 2.0中的整合</title>
    <link href="http://weafteam.github.io/posts/23949c22/"/>
    <id>http://weafteam.github.io/posts/23949c22/</id>
    <published>2018-04-23T10:13:02.000Z</published>
    <updated>2018-08-12T09:51:01.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一windows平台kafka的环境搭建">一、Windows平台Kafka的环境搭建</h2><p>注意：确保JAVA环境变量的正确</p><h3 id="zookeeper的安装">1.ZooKeeper的安装</h3><p>Kafka的运行依赖于Zookeeper，所以需要先安装Zookeeper. Zookeeper下载地址：<a href="http://mirror.bit.edu.cn/apache/zookeeper/" target="_blank" rel="noopener">Zookeeper</a> <img src="https://weaf.oss-cn-beijing.aliyuncs.com/kafka-1.png" alt="kafka-1"> 解压出来，放在指定位置。 在conf文件夹下修改zoo_sample.cfg名为zoo.cfg 然后打开zoo.cfg 添加一下变量（如果没有请添加，存在请修改） <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataDir=D:\data\logs\zookeeper </span><br><span class="line">dataLogDir=D:\data\logs\zookeeper</span><br></pre></td></tr></table></figure></p><p>然后进入bin目录双击zkServer.cmd运行。如下图： <img src="https://weaf.oss-cn-beijing.aliyuncs.com/kafka-2.png" alt="kafka-2"></p><h3 id="kafka的安装">2.Kafka的安装</h3><p>Kafka下载地址：<a href="http://kafka.apache.org/downloads.html" target="_blank" rel="noopener">Kafka</a> <img src="https://weaf.oss-cn-beijing.aliyuncs.com/kafka-3.png" alt="kafka-3"> 解压文件到指定地方 打开config下的server.properties 修改以下变量 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log.dirs=D:\data\logs\kafka</span><br></pre></td></tr></table></figure></p><p>我们可以看到bin目录下的是linux的启动脚本，然后有个单独的文件夹装着windows的脚本。 我们在根目录下打开命令行，运行以下命令启动Kafka。 我们在运行前需要注意以下几点</p><ol type="1"><li>确认JAVA环境变量没有问题</li><li>路径不能有空格，不然可能会出现无法加载主类的错误。</li><li>出现无法加载主类错误，可修改bin-run-class.bat中 set COMMAND=%JAVA% %KAFKA_HEAP_OPTS% %KAFKA_JVM_PERFORMANCE_OPTS% %KAFKA_JMX_OPTS% %KAFKA_LOG4J_OPTS% -cp %CLASSPATH% %KAFKA_OPTS% %* 中“%CLASSPATH%”加上双引号</li></ol><p><img src="https://weaf.oss-cn-beijing.aliyuncs.com/kafka-4.png" alt="kafka-3"> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\bin\windows\kafka-server-start.bat .\config\server.properties</span><br></pre></td></tr></table></figure></p><h2 id="二springboot2.0相关配置">二、SpringBoot2.0相关配置</h2><p>pom文件加入以下依赖</p><h5 id="pom.xml">pom.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- kafka --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我这里SpringBoot的配置文件使用的是YAML。 在相应环境中配置Kafka ##### application-local.yml <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">    port: 7777</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">    datasource:</span><br><span class="line">        name: test</span><br><span class="line">        driverClassName: com.mysql.jdbc.Driver</span><br><span class="line">        url: jdbc:mysql://.....</span><br><span class="line">        username: ...</span><br><span class="line">        password: ....</span><br><span class="line">    redis:</span><br><span class="line">      database: 0</span><br><span class="line">      host: localhost</span><br><span class="line">      port: 6379</span><br><span class="line">      jedis:</span><br><span class="line">        pool:</span><br><span class="line">          min-idle: 0</span><br><span class="line">          max-idle: 8</span><br><span class="line">          max-active: 8</span><br><span class="line">          max-wait: -1ms</span><br><span class="line">      password: 123456</span><br><span class="line">    kafka:</span><br><span class="line">        consumer:</span><br><span class="line">          group-id: foo</span><br><span class="line">          auto-offset-reset: earliest</span><br><span class="line">          key-deserializer: org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">          value-deserializer: org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">        producer:</span><br><span class="line">          key-serializer: org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">          value-serializer: org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">        bootstrap-servers: localhost:9092</span><br><span class="line">app:</span><br><span class="line">      topic:</span><br><span class="line">        foo: foo.t</span><br></pre></td></tr></table></figure></p><p>可以仅关注spring.kafka和app.topic节点 更多spring.kafka配置信息请查看<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html" target="_blank" rel="noopener">官网文档</a></p><h2 id="三代码">三、代码</h2><p>主要代码结构 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/kafka-5.png" alt="kafka-5"> 消费者代码 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.kafka.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.handler.annotation.Payload;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ：yaxuSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 17:56 2018/4/23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> by:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener</span>(topics = <span class="string">"$&#123;app.topic.foo&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(@Payload String message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"received message='&#123;&#125;'"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>生产者代码 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.kafka.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ：yaxuSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 17:57 2018/4/23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> by:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;app.topic.foo&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String topic;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"sending message='&#123;&#125;' to topic='&#123;&#125;'"</span>, message, topic);</span><br><span class="line">        kafkaTemplate.send(topic, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试代码 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xxx.controller.entry.ResMsg;</span><br><span class="line"><span class="keyword">import</span> com.xxx.Sender;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ：yaxuSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 11:21 2018/4/21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> by:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"test"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Sender sender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"send"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResMsg <span class="title">send</span><span class="params">(String content)</span></span>&#123;</span><br><span class="line">        sender.send(<span class="string">"Spring Kafka and Spring Boot Send Message:"</span>+content);</span><br><span class="line">        <span class="keyword">return</span> ResMsg.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="四简单的测试">四、简单的测试</h2><p>运行项目 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/kafka-6.png" alt="kafka-6"> 测试发送 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/kafka-7.png" alt="kafka-6"> 查看接收结果： <img src="https://weaf.oss-cn-beijing.aliyuncs.com/kafka-8.png" alt="kafka-6"></p><h2 id="五springboot-demo">五、SpringBoot-Demo</h2><p>本人最近使用阿里云的Kafka发现没有SpringBoot的Demo便写了一个。</p><p>代码地址：<a href="https://github.com/songyaxu/kafka-springboot-demo" class="uri" target="_blank" rel="noopener">https://github.com/songyaxu/kafka-springboot-demo</a></p><p>本文参考地址<a href="https://docs.spring.io/spring-kafka/docs/2.1.5.RELEASE/reference/html/" class="uri" target="_blank" rel="noopener">https://docs.spring.io/spring-kafka/docs/2.1.5.RELEASE/reference/html/</a></p>]]></content>
    
    <summary type="html">
    
      Kafka在SpringBoot 2.0中的整合
    
    </summary>
    
      <category term="JAVA" scheme="http://weafteam.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://weafteam.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>TensorFLow 基础（3）</title>
    <link href="http://weafteam.github.io/posts/3cae9921/"/>
    <id>http://weafteam.github.io/posts/3cae9921/</id>
    <published>2018-04-22T06:31:24.000Z</published>
    <updated>2018-08-28T03:33:27.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tensorflow-基础3">TensorFlow 基础（3）</h1><p>hello,大家好，几天我们继续学习基础知识，为我们以后建立模型打下基础。主要是最近有点忙，所以每一周的内容会少一些，请大家谅解，随后慢慢加快进度。</p><blockquote><p>这一次我们讲一下batch的概念，以及一些基本的操作，在之前的文章中，我们也讲过batch这个概念的。大家应该不会陌生</p></blockquote><ol type="1"><li>Working with Batch and Stochastic Training</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line">ops.reset_default_graph()</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机梯度训练</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成数据</span></span><br><span class="line"></span><br><span class="line">x_vals = np.random.normal(<span class="number">1.</span>, <span class="number">0.1</span>, <span class="number">100</span>)</span><br><span class="line">y_vals = np.repeat(<span class="number">10.</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">x_data = tf.placeholder(shape = [<span class="number">1</span>], dtype = tf.float32)</span><br><span class="line">y_target = tf.placeholder(shape = [<span class="number">1</span>], dtype = tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># A就相当于权重咯</span></span><br><span class="line">A = tf.Variable(tf.random_normal(shape = [<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">my_output = tf.multiply(x_data, A)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意我们上一次的loss函数哦</span></span><br><span class="line"></span><br><span class="line">loss = tf.square(my_output - y_target)</span><br><span class="line"></span><br><span class="line">my_opt = tf.train.GradientDescentOptimizer(<span class="number">0.02</span>) <span class="comment"># 0.02就是学习率</span></span><br><span class="line"></span><br><span class="line">train_step = my_opt.minimize(loss)</span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始训练模型</span></span><br><span class="line">loss_stochastic = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    rand_index = np.random.choice(<span class="number">100</span>) <span class="comment"># 随机选取一个样本进行训练</span></span><br><span class="line">    rand_x = [x_vals[rand_index]]</span><br><span class="line">    rand_y = [y_vals[rand_index]]</span><br><span class="line">    sess.run(train_step, feed_dict = &#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">    <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">5</span> == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'Step #'</span> + str(i + <span class="number">1</span>) + <span class="string">' A = '</span> + str(sess.run(A)))</span><br><span class="line">        temp_loss = sess.run(loss, feed_dict = &#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">        print(<span class="string">'Loss = '</span> + str(temp_loss))</span><br><span class="line">        loss_stochastic.append(temp_loss)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment"># batch train      </span></span><br><span class="line">ops.reset_default_graph()</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">25</span></span><br><span class="line">x_vals = np.random.normal(<span class="number">1</span>, <span class="number">0.1</span>, <span class="number">100</span>)</span><br><span class="line">y_vals = np.repeat(<span class="number">10.</span>, <span class="number">100</span>)</span><br><span class="line">x_data = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32) <span class="comment"># 看出来变化了吧？</span></span><br><span class="line">y_target = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32) <span class="comment"># 这里也是</span></span><br><span class="line"></span><br><span class="line">A = tf.Variable(tf.random_normal(shape=[<span class="number">1</span>,<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">my_output = tf.matmul(x_data, A)</span><br><span class="line"><span class="comment"># 是不是l2loss</span></span><br><span class="line">loss = tf.reduce_mean(tf.square(my_output - y_target))</span><br><span class="line"><span class="comment"># 这里已经强调过很多遍了</span></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里是优化器</span></span><br><span class="line">my_opt = tf.train.GradientDescentOptimizer(<span class="number">0.02</span>)</span><br><span class="line">train_step = my_opt.minimize(loss)</span><br><span class="line"></span><br><span class="line">loss_batch = []</span><br><span class="line"><span class="comment"># Run Loop</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    rand_index = np.random.choice(<span class="number">100</span>, size=batch_size) <span class="comment"># 看出来区别了么？</span></span><br><span class="line">    rand_x = np.transpose([x_vals[rand_index]])</span><br><span class="line">    rand_y = np.transpose([y_vals[rand_index]])</span><br><span class="line">    sess.run(train_step, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">5</span>==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'Step #'</span> + str(i+<span class="number">1</span>) + <span class="string">' A = '</span> + str(sess.run(A)))</span><br><span class="line">        temp_loss = sess.run(loss, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">        print(<span class="string">'Loss = '</span> + str(temp_loss))</span><br><span class="line">        loss_batch.append(temp_loss)</span><br><span class="line"></span><br><span class="line">plt.plot(range(<span class="number">0</span>, <span class="number">100</span>, <span class="number">5</span>), loss_stochastic, <span class="string">'b-'</span>, label=<span class="string">'Stochastic Loss'</span>)</span><br><span class="line">plt.plot(range(<span class="number">0</span>, <span class="number">100</span>, <span class="number">5</span>), loss_batch, <span class="string">'r--'</span>, label=<span class="string">'Batch Loss, size=20'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>, prop=&#123;<span class="string">'size'</span>: <span class="number">11</span>&#125;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>让你感受一些，batch训练的loss收敛：</p><p><img src="https://s1.ax1x.com/2018/04/22/CMTbv9.png" alt="-"></p><p>你就说上面的你理解没理解，没理解要好好理解理解了~！！！</p><ol start="2" type="1"><li>这个就是结合了，把所有上面介绍的基础结合在一起，你说说是不是很棒</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 联合所有的基础操作，弄一个分类的例子，期不期待</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line">ops.reset_default_graph()</span><br><span class="line"></span><br><span class="line">iris = datasets.load_iris() <span class="comment"># 将鸢尾花数据集下下来 总共是四个属性的数据集，根据四个种类，预测种类，总共三类</span></span><br><span class="line">binary_target = np.array([<span class="number">1.</span> <span class="keyword">if</span> x==<span class="number">0</span> <span class="keyword">else</span> <span class="number">0.</span> <span class="keyword">for</span> x <span class="keyword">in</span> iris.target]) <span class="comment"># 将label作为二分类问题</span></span><br><span class="line">iris_2d = np.array([[x[<span class="number">2</span>], x[<span class="number">3</span>]] <span class="keyword">for</span> x <span class="keyword">in</span> iris.data]) <span class="comment"># 将后两个属性取出来用作种类预测</span></span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line">x1_data = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32)</span><br><span class="line">x2_data = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32)</span><br><span class="line">y_target = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">A = tf.Variable(tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line">b = tf.Variable(tf.random_normal(shape=[<span class="number">1</span>, <span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">my_mult = tf.matmul(x2_data, A)</span><br><span class="line">my_add = tf.add(my_mult, b)</span><br><span class="line">my_output = tf.subtract(x1_data, my_add) <span class="comment"># 你能不能自己使用公式写出我们预测种类的公式呢？</span></span><br><span class="line"></span><br><span class="line">xentropy = tf.nn.sigmoid_cross_entropy_with_logits(logits = my_output, labels = y_target)</span><br><span class="line"></span><br><span class="line">my_opt = tf.train.GradientDescentOptimizer(<span class="number">0.05</span>)</span><br><span class="line">train_step = my_opt.minimize(xentropy)</span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    rand_index = np.random.choice(len(iris_2d), size=batch_size)</span><br><span class="line">    <span class="comment">#rand_x = np.transpose([iris_2d[rand_index]])</span></span><br><span class="line">    rand_x = iris_2d[rand_index]</span><br><span class="line">    rand_x1 = np.array([[x[<span class="number">0</span>]] <span class="keyword">for</span> x <span class="keyword">in</span> rand_x])</span><br><span class="line">    rand_x2 = np.array([[x[<span class="number">1</span>]] <span class="keyword">for</span> x <span class="keyword">in</span> rand_x])</span><br><span class="line">    <span class="comment">#rand_y = np.transpose([binary_target[rand_index]])</span></span><br><span class="line">    rand_y = np.array([[y] <span class="keyword">for</span> y <span class="keyword">in</span> binary_target[rand_index]])</span><br><span class="line">    sess.run(train_step, feed_dict=&#123;x1_data: rand_x1, x2_data: rand_x2, y_target: rand_y&#125;)</span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">200</span>==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'Step #'</span> + str(i+<span class="number">1</span>) + <span class="string">' A = '</span> + str(sess.run(A)) + <span class="string">', b = '</span> + str(sess.run(b)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pull out slope/intercept</span></span><br><span class="line">[[slope]] = sess.run(A)</span><br><span class="line">[[intercept]] = sess.run(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create fitted line</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">3</span>, num=<span class="number">50</span>)</span><br><span class="line">ablineValues = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">  ablineValues.append(slope*i+intercept)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot the fitted line over the data</span></span><br><span class="line">setosa_x = [a[<span class="number">1</span>] <span class="keyword">for</span> i,a <span class="keyword">in</span> enumerate(iris_2d) <span class="keyword">if</span> binary_target[i]==<span class="number">1</span>]</span><br><span class="line">setosa_y = [a[<span class="number">0</span>] <span class="keyword">for</span> i,a <span class="keyword">in</span> enumerate(iris_2d) <span class="keyword">if</span> binary_target[i]==<span class="number">1</span>]</span><br><span class="line">non_setosa_x = [a[<span class="number">1</span>] <span class="keyword">for</span> i,a <span class="keyword">in</span> enumerate(iris_2d) <span class="keyword">if</span> binary_target[i]==<span class="number">0</span>]</span><br><span class="line">non_setosa_y = [a[<span class="number">0</span>] <span class="keyword">for</span> i,a <span class="keyword">in</span> enumerate(iris_2d) <span class="keyword">if</span> binary_target[i]==<span class="number">0</span>]</span><br><span class="line">plt.plot(setosa_x, setosa_y, <span class="string">'rx'</span>, ms=<span class="number">10</span>, mew=<span class="number">2</span>, label=<span class="string">'setosa'</span>)</span><br><span class="line">plt.plot(non_setosa_x, non_setosa_y, <span class="string">'ro'</span>, label=<span class="string">'Non-setosa'</span>)</span><br><span class="line">plt.plot(x, ablineValues, <span class="string">'b-'</span>)</span><br><span class="line">plt.xlim([<span class="number">0.0</span>, <span class="number">2.7</span>])</span><br><span class="line">plt.ylim([<span class="number">0.0</span>, <span class="number">7.1</span>])</span><br><span class="line">plt.suptitle(<span class="string">'Linear Separator For I.setosa'</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Petal Length'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Petal Width'</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'lower right'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/04/22/CM7GV0.png"></p><p>上面是分类的结果图</p><ol start="3" type="1"><li>验证模型：</li></ol><p>接下来，我们会实现一个简单的回归模型和分类模型，分别做出他们的测试样例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回归模型</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line">ops.reset_default_graph()</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">batch_size = <span class="number">25</span></span><br><span class="line"></span><br><span class="line">x_vals = np.random.normal(<span class="number">1</span>, <span class="number">0.1</span>, <span class="number">100</span>)</span><br><span class="line">y_vals = np.repeat(<span class="number">10.</span>, <span class="number">100</span>)</span><br><span class="line">x_data = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32)</span><br><span class="line">y_target = tf.placeholder(shape=[<span class="keyword">None</span>, <span class="number">1</span>], dtype=tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据分为训练集80%和测试集20%</span></span><br><span class="line">train_indices = np.random.choice(len(x_vals), round(len(x_vals) * <span class="number">0.8</span>), replace = <span class="keyword">False</span>)</span><br><span class="line">test_indices = np.array(list(set(range(len(x_vals))) - set(train_indices)))</span><br><span class="line">x_vals_train = x_vals[train_indices]</span><br><span class="line">x_vals_test = x_vals[test_indices]</span><br><span class="line">y_vals_train = y_vals[train_indices]</span><br><span class="line">y_vals_test = y_vals[test_indices]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面这些我们是不是写了好多遍了！！！</span></span><br><span class="line">A = tf.Variable(tf.random_normal(shape=[<span class="number">1</span>,<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">my_output = tf.matmul(x_data, A)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还记得我么？你也见过我好多次了，为什么加reduce_mean? 你也知道batch可不是一个数据样本呀~</span></span><br><span class="line">loss = tf.reduce_mean(tf.square(my_output - y_target))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建优化器</span></span><br><span class="line">my_opt = tf.train.GradientDescentOptimizer(<span class="number">0.02</span>)</span><br><span class="line">train_step = my_opt.minimize(loss)</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 算了，我都不想写了，你说说我们写了多少遍了，该会了</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    rand_index = np.random.choice(len(x_vals_train), size=batch_size)</span><br><span class="line">    rand_x = np.transpose([x_vals_train[rand_index]])</span><br><span class="line">    rand_y = np.transpose([y_vals_train[rand_index]])</span><br><span class="line">    sess.run(train_step, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">25</span>==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'Step #'</span> + str(i+<span class="number">1</span>) + <span class="string">' A = '</span> + str(sess.run(A)))</span><br><span class="line">        print(<span class="string">'Loss = '</span> + str(sess.run(loss, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证呀，一般训练出来的模型，我们要在测试集上面跑的很好，在测试集上面的准确率好了，没用，因为有过拟合的嫌疑，就是太认真了。泛化能力太差。</span></span><br><span class="line"><span class="comment"># 验证回归模型，那就要使用loss去衡量这个模型的好坏了</span></span><br><span class="line">mse_test = sess.run(loss, feed_dict=&#123;x_data: np.transpose([x_vals_test]), y_target: np.transpose([y_vals_test])&#125;)</span><br><span class="line">mse_train = sess.run(loss, feed_dict=&#123;x_data: np.transpose([x_vals_train]), y_target: np.transpose([y_vals_train])&#125;)</span><br><span class="line">print(<span class="string">'MSE on test:'</span> + str(np.round(mse_test, <span class="number">2</span>)))</span><br><span class="line">print(<span class="string">'MSE on train:'</span> + str(np.round(mse_train, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分类工作，小伙伴是不是一直觉得分类工作怎么能做，那是因为使用概率做的，也就是说，比如概率大于某一个阈值0.5 我们就分为某一类，如果小于我们就分为另一种，这是二分类，那么多分类怎么办，那么就要引入one-hot编码，这个我们后来慢慢深入。先来看例子</span></span><br><span class="line">ops.reset_default_graph()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">batch_size = <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一毛一样</span></span><br><span class="line">x_vals = np.concatenate((np.random.normal(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">50</span>), np.random.normal(<span class="number">2</span>, <span class="number">1</span>, <span class="number">50</span>)))</span><br><span class="line">y_vals = np.concatenate((np.repeat(<span class="number">0.</span>, <span class="number">50</span>), np.repeat(<span class="number">1.</span>, <span class="number">50</span>)))</span><br><span class="line">x_data = tf.placeholder(shape=[<span class="number">1</span>, <span class="keyword">None</span>], dtype=tf.float32)</span><br><span class="line">y_target = tf.placeholder(shape=[<span class="number">1</span>, <span class="keyword">None</span>], dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">train_indices = np.random.choice(len(x_vals), round(len(x_vals)*<span class="number">0.8</span>), replace=<span class="keyword">False</span>)</span><br><span class="line">test_indices = np.array(list(set(range(len(x_vals))) - set(train_indices)))</span><br><span class="line">x_vals_train = x_vals[train_indices]</span><br><span class="line">x_vals_test = x_vals[test_indices]</span><br><span class="line">y_vals_train = y_vals[train_indices]</span><br><span class="line">y_vals_test = y_vals[test_indices]</span><br><span class="line"></span><br><span class="line">A = tf.Variable(tf.random_normal(mean=<span class="number">10</span>, shape=[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">my_output = tf.add(x_data, A) <span class="comment"># 我们直接使用了一个加法操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键还是loss函数</span></span><br><span class="line">xentropy = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits = my_output, labels = y_target))</span><br><span class="line"></span><br><span class="line">my_opt = tf.train.GradientDescentOptimizer(<span class="number">0.05</span>)</span><br><span class="line">train_step = my_opt.minimize(xentropy)</span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run loop</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1800</span>):</span><br><span class="line">    rand_index = np.random.choice(len(x_vals_train), size=batch_size)</span><br><span class="line">    rand_x = [x_vals_train[rand_index]]</span><br><span class="line">    rand_y = [y_vals_train[rand_index]]</span><br><span class="line">    sess.run(train_step, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">    <span class="keyword">if</span> (i + <span class="number">1</span>) % <span class="number">200</span> == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'Step #'</span> + str(i+<span class="number">1</span>) + <span class="string">' A = '</span> + str(sess.run(A)))</span><br><span class="line">        print(<span class="string">'Loss = '</span> + str(sess.run(xentropy, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)))</span><br><span class="line"><span class="comment"># 在测试集上面做测试</span></span><br><span class="line">y_prediction = tf.squeeze(tf.round(tf.nn.sigmoid(tf.add(x_data, A))))</span><br><span class="line">correct_prediction = tf.equal(y_prediction, y_target)</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line">acc_value_test = sess.run(accuracy, feed_dict=&#123;x_data: [x_vals_test], y_target: [y_vals_test]&#125;)</span><br><span class="line">acc_value_train = sess.run(accuracy, feed_dict=&#123;x_data: [x_vals_train], y_target: [y_vals_train]&#125;)</span><br><span class="line">print(<span class="string">'Accuracy on train set: '</span> + str(acc_value_train))</span><br><span class="line">print(<span class="string">'Accuracy on test set: '</span> + str(acc_value_test))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出分类结果</span></span><br><span class="line">A_result = -sess.run(A)</span><br><span class="line">bins = np.linspace(<span class="number">-5</span>, <span class="number">5</span>, <span class="number">50</span>)</span><br><span class="line">plt.hist(x_vals[<span class="number">0</span>:<span class="number">50</span>], bins, alpha=<span class="number">0.5</span>, label=<span class="string">'N(-1,1)'</span>, color=<span class="string">'white'</span>)</span><br><span class="line">plt.hist(x_vals[<span class="number">50</span>:<span class="number">100</span>], bins[<span class="number">0</span>:<span class="number">50</span>], alpha=<span class="number">0.5</span>, label=<span class="string">'N(2,1)'</span>, color=<span class="string">'red'</span>)</span><br><span class="line">plt.plot((A_result, A_result), (<span class="number">0</span>, <span class="number">8</span>), <span class="string">'k--'</span>, linewidth=<span class="number">3</span>, label=<span class="string">'A = '</span>+ str(np.round(A_result, <span class="number">2</span>)))</span><br><span class="line">plt.legend(loc=<span class="string">'upper right'</span>)</span><br><span class="line">plt.title(<span class="string">'Binary Classifier, Accuracy='</span> + str(np.round(acc_value_test, <span class="number">2</span>)))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>总结：这次下来我们就把TensorFlow的所有基础内容讲完了，有什么问题，可以给我发邮件：air@weaf.top</p><p>希望大家把这些基础知识好好稳固一下，务必牢记于心，随后我们就会很顺利。</p><p>下一次我们就会开始一些基本算法~，基础学完不得好好练习一下么？</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;tensorflow-基础3&quot;&gt;TensorFlow
        
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/categories/TensorFlow/"/>
    
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>唯密文解密（针对Vigenere加密）</title>
    <link href="http://weafteam.github.io/posts/899ccb0/"/>
    <id>http://weafteam.github.io/posts/899ccb0/</id>
    <published>2018-04-21T01:38:12.000Z</published>
    <updated>2018-05-29T01:27:49.860Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上次说到了Vigenere加密以及解密的算法，但是如何破译这样的密码，也是很有意思的，这篇博客就是实现一个这样的破译，主要针对的是通过Vigenere加密的密文，那么就开始吧~</p></blockquote><h1 id="任务要求">任务要求：</h1><ul><li><pre><code> a.编程实现Vigenere加密/解密系统，并分析和评估该算法的安全性。</code></pre></li><li><pre><code> b.编程实现唯密文破译系统，能够破译密钥为2到4个字符的Vigenere密文，并分析如何加快破译速度。</code></pre></li><li>时间要求： 布置任务后，在3周之内完成。</li><li>提交结果：已设计并测试好的程序，包括源码、可执行程序、测试数据集、实验报告。</li></ul><h1 id="原理介绍">原理介绍：</h1><p>按照我们之前的说法，我们先介绍一下Caesar加密的缺点。对于一个稍微有点点密码学功底的人来说，Caesar密码的安全强度几乎为零，正如我们是上篇博客所讲的Caesar加密，加密的密钥充其量也就24个，也就是说，不管移动多少个字符，最多进行24次猜解就可以破译出来。</p><p>当然，这只是一种解密方法，也是比较笨的一种方法，而且这种方法并不适用于我们的Vigenere密码破解，因为我们没办法列举出所有的情况。</p><p>这里我们介绍破解Caesar密码的另一类方法，称为（字母）频度分析法。</p><p>假设大家都知道，英语中的字母出现概率是有差别的，其实对于一种特定的自然语言，如果文本足够长，那么各个字母出现的概率就是相对稳定的，具体的概率统计如下图所示：</p><p><img src="https://i.loli.net/2018/04/21/5adaa41cbbb56.png" alt="percent.png"></p><p>这样我们根据以上的频度表，以及根据我们的Caesar密文中的统计出来的各个词的拼读，对应一下就可以找到密文对应的明文，再然后对应密文与明文就可以找到相应的加密的密钥。很简单吧，其实能想到这个想法并不简单的。</p><p>由上一篇的博客介绍，你应该知道了Vigenere密码分解之后其实就是多个Caesar密码。所以我们如果知道密钥的长度，每隔这个长度将原来的Vigenere密文分解为多个Caesar密文，再做上述的工作，是不是就完成了我们的破译工作？思路就是这样，但是怎么确定我们的密钥长度？那么我们接下来就讲讲怎么解决这个问题吧。</p><h1 id="确定密钥长度">确定密钥长度</h1><p>这个在网上搜集到的资料其实是有两种方法的。分别称为Kasiski测试法和Friedman测试法，但是本文给到的代码是基于第二个方法的，不过在此之前，我们还是先讲讲这两个方法的思路吧。</p><h2 id="kasiski测试法">Kasiski测试法</h2><p>Kasiski测试法是由Friedrich Kasiski于1863年给出了其描述，然而早在约1854年这一方法就由Charles Babbage首先发现。</p><p>它的思想是基于这样的一个事实：两个相同的明文段加密成相同的密文段，它们之间的距离为Length，那么密钥的长度就是距离Length的约数。</p><p>而当密文的长度很长时，我们便可以多找几组这样拥有重复密文段，找出他们间距的相同约数就是密钥的长度。</p><p>关于这个方法的代码，本文并未涉及，大家有兴趣可自行查阅资料实现。</p><p>另：机智的你也许发现了，我们这种方法其实并没有涉及到我们刚才说的统计频度，所以我们的重点不是这个方法，接下来就是本文的重点了。</p><h2 id="friedman测试法">Friedman测试法</h2><p>首先我们讲一个概念：重合指数（IC，index of coincidence）。百度一下这个概念的话，搜到的结果可能不是令人很满意，我也是找了很多资料，感觉如下的概念说的很清楚，分享给大家。</p><p>重合指数表示：两个随机选出的字母是相同的概率，对于我们的英文字母来说，即以上概率即为随机选出两个A的概率+随机选出两个B的概率+….+随机选出两个Z的概率。</p><p>前人也为我们统计出了这个数字，为0.65。</p><blockquote><p>即 P(A)^2 + P(B)^2 + P(C)^2 + … + P(Z)^2 = 0.65.</p></blockquote><p>而利用这一概念推测密钥长度的原理为：对于一个Caesar密码的序列，由于所有字母的位移程度是一样的，所以密文的重合指数等于原文的重合指数。</p><p>将这一概念迁移到我们的Vigenere密文上，我们只要计算不同密钥长度下的重合指数，只要重合指数接近期望的0.65时，我们便可以推测当前的长度就是我们的密钥长度。</p><p><strong>举个例子：</strong></p><p>密文为：AAABBCCDDDDEEEFG</p><p>首先我们测试密钥长度=1，首先统计上述密文中每个字母出现的次数（A-Z）：</p><p>A：3 B：2 C：2 D：4 E：3 F:1 G:1 H:0 … Z：0</p><p>然后我们根据上述公式计算重合指数P，如果 P ！= 0.65，我们就尝试密钥长度2。</p><p>假设为2的话，将上述的密文分成两组：</p><p>组1：A A B C D D E F</p><p>组2：A B C D D E E G</p><p>再分别计算重合指数，如果这两个的重合指数都接近于0.65，那么我们就可以基本确定密钥的长度为2了。如果不是，那么继续往下分。</p><p>理论上来说，我们得到的密文长度越长，通过这个方法分析得到的效果会更好，实际上在我测试的结果中，也确实符合刚才的说法。</p><h1 id="实现">实现</h1><p><strong>Friedman测试法确定密钥长度</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">// Friedman测试法确定密钥长度</span><br><span class="line">   public int Friedman(String ciphertext) &#123;</span><br><span class="line">       int keyLength = 1; // 猜测密钥长度</span><br><span class="line">       double[] IC; // 重合指数</span><br><span class="line">       double average; // 平均重合指数</span><br><span class="line">       ArrayList&lt;String&gt; cipherGroup; // 密文分组</span><br><span class="line"></span><br><span class="line">       while (true) &#123;</span><br><span class="line">           IC = new double[keyLength];</span><br><span class="line">           cipherGroup = new ArrayList&lt;String&gt;();</span><br><span class="line">           average = 0;</span><br><span class="line"></span><br><span class="line">           // 1 先根据密钥长度分组</span><br><span class="line">           for (int i = 0; i &lt; keyLength; ++i) &#123;</span><br><span class="line">               StringBuffer temporaryGroup = new StringBuffer();</span><br><span class="line">               for (int j = 0; i + j * keyLength &lt; ciphertext.length(); ++j) &#123;</span><br><span class="line">                   temporaryGroup.append(ciphertext.charAt(i + j * keyLength));</span><br><span class="line">               &#125;</span><br><span class="line">               cipherGroup.add(temporaryGroup.toString());</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           // 2 再计算每一组的重合指数</span><br><span class="line">           for (int i = 0; i &lt; keyLength; ++i) &#123;</span><br><span class="line">               String subCipher = new String(cipherGroup.get(i)); // 子串</span><br><span class="line">               HashMap&lt;Character, Integer&gt; occurrenceNumber = new HashMap&lt;Character, Integer&gt;(); // 字母及其出现的次数</span><br><span class="line"></span><br><span class="line">               // 2.1 初始化字母及其次数键值对</span><br><span class="line">               for (int h = 0; h &lt; 26; ++h) &#123;</span><br><span class="line">                   occurrenceNumber.put((char) (h + 65), 0);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               // 2.2 统计每个字母出现的次数</span><br><span class="line">               for (int j = 0; j &lt; subCipher.length(); ++j) &#123;</span><br><span class="line">                   occurrenceNumber.put(subCipher.charAt(j), occurrenceNumber.get(subCipher.charAt(j)) + 1);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               // 2.3 计算重合指数</span><br><span class="line">               double denominator = Math.pow((double) subCipher.length(), 2);</span><br><span class="line">               for (int k = 0; k &lt; 26; ++k) &#123;</span><br><span class="line">                   double o = (double) occurrenceNumber.get((char) (k + 65));</span><br><span class="line">                   IC[i] += o * (o - 1);</span><br><span class="line">               &#125;</span><br><span class="line">               IC[i] /= denominator;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           // 3 判断退出条件,重合指数的平均值是否大于0.065</span><br><span class="line">           for (int i = 0; i &lt; keyLength; ++i) &#123;</span><br><span class="line">               average += IC[i];</span><br><span class="line">           &#125;</span><br><span class="line">           average /= (double) keyLength;</span><br><span class="line">           if (average &gt;= 0.06) &#123;</span><br><span class="line">               break;</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               keyLength++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; // while--end</span><br><span class="line">       </span><br><span class="line">       return keyLength;</span><br><span class="line">   &#125;// Friedman--end</span><br></pre></td></tr></table></figure><p><strong>破译密文</strong></p><p>这里给出来的是打印出来了具体的密钥和明文，实际上可以直接写一个类，类中设计两个属性值，一个密钥属性，一个明文属性，直接赋值下就可以了。相信机智的你可以完成这个操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">public void decryptCipher(int keyLength, String ciphertext) &#123;</span><br><span class="line">        int[] key = new int[keyLength];</span><br><span class="line">        ArrayList&lt;String&gt; cipherGroup = new ArrayList&lt;String&gt;();</span><br><span class="line">        double[] probability = new double[] &#123; 0.082, 0.015, 0.028, 0.043, 0.127, 0.022, 0.02, 0.061, 0.07, 0.002, 0.008,</span><br><span class="line">                0.04, 0.024, 0.067, 0.075, 0.019, 0.001, 0.06, 0.063, 0.091, 0.028, 0.01, 0.023, 0.001, 0.02, 0.001 &#125;;</span><br><span class="line"></span><br><span class="line">        // 1 先根据密钥长度分组</span><br><span class="line">        for (int i = 0; i &lt; keyLength; ++i) &#123;</span><br><span class="line">            StringBuffer temporaryGroup = new StringBuffer();</span><br><span class="line">            for (int j = 0; i + j * keyLength &lt; ciphertext.length(); ++j) &#123;</span><br><span class="line">                temporaryGroup.append(ciphertext.charAt(i + j * keyLength));</span><br><span class="line">            &#125;</span><br><span class="line">            cipherGroup.add(temporaryGroup.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 2 确定密钥</span><br><span class="line">        for (int i = 0; i &lt; keyLength; ++i) &#123;</span><br><span class="line">            double MG; // 重合指数</span><br><span class="line">            int flag; // 移动位置</span><br><span class="line">            int g = 0; // 密文移动g个位置</span><br><span class="line">            HashMap&lt;Character, Integer&gt; occurrenceNumber; // 字母出现次数</span><br><span class="line">            String subCipher; // 子串</span><br><span class="line"></span><br><span class="line">            while (true) &#123;</span><br><span class="line">                MG = 0;</span><br><span class="line">                flag = 65 + g;</span><br><span class="line">                subCipher = new String(cipherGroup.get(i));</span><br><span class="line">                occurrenceNumber = new HashMap&lt;Character, Integer&gt;();</span><br><span class="line"></span><br><span class="line">                // 1.1 初始化字母及其次数</span><br><span class="line">                for (int h = 0; h &lt; 26; ++h) &#123;</span><br><span class="line">                    occurrenceNumber.put((char) (h + 65), 0);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // 1.2 统计字母出现次数</span><br><span class="line">                for (int j = 0; j &lt; subCipher.length(); ++j) &#123;</span><br><span class="line">                    occurrenceNumber.put(subCipher.charAt(j), occurrenceNumber.get(subCipher.charAt(j)) + 1);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // 1.3 计算重合指数</span><br><span class="line">                for (int k = 0; k &lt; 26; ++k, ++flag) &#123;</span><br><span class="line">                    double p = probability[k];</span><br><span class="line">                    flag = (flag == 91) ? 65 : flag;</span><br><span class="line">                    double f = (double) occurrenceNumber.get((char) flag) / subCipher.length();</span><br><span class="line">                    MG += p * f;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // 1.4 判断退出条件</span><br><span class="line">                if (MG &gt;= 0.055) &#123;</span><br><span class="line">                    key[i] = g;</span><br><span class="line">                    break;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    ++g;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; // while--end</span><br><span class="line">        &#125; // for--end</span><br><span class="line"></span><br><span class="line">        // 3 打印密钥</span><br><span class="line">        StringBuffer keyString = new StringBuffer();</span><br><span class="line">        for (int i = 0; i &lt; keyLength; ++i) &#123;</span><br><span class="line">            keyString.append((char) (key[i] + 65));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;\n密钥为: &quot; + keyString.toString());</span><br><span class="line"></span><br><span class="line">        // 4 解密</span><br><span class="line">        StringBuffer plainBuffer = new StringBuffer();</span><br><span class="line">        for (int i = 0; i &lt; ciphertext.length(); ++i) &#123;</span><br><span class="line">            int keyFlag = i % keyLength;</span><br><span class="line">            int change = (int) ciphertext.charAt(i) - 65 - key[keyFlag];</span><br><span class="line">            char plainLetter = (char) ((change &lt; 0 ? (change + 26) : change) + 65);</span><br><span class="line">            plainBuffer.append(plainLetter);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;\n明文为：\n&quot; + plainBuffer.toString().toLowerCase());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>参考资料：</strong></p><p><a href="https://blog.csdn.net/limisky/article/details/16885959" target="_blank" rel="noopener">维吉尼亚密码及其破解</a></p><p><a href="https://blog.csdn.net/white_idiot/article/details/61201864" target="_blank" rel="noopener">【密码学】维吉尼亚密码加解密原理及其破解算法Java实现</a></p><p>以上是本次博客的全部内容，感谢驻足~</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;上次说到了Vigenere加密以及解密的算法，但是如何破译这样的密码，也是很有意思的，这篇博客就是实现一个这样的破译，主要针对的是通过Vigenere加密的密文，那么就开始吧~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1
        
      
    
    </summary>
    
      <category term="密码学" scheme="http://weafteam.github.io/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="密码学" scheme="http://weafteam.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Redis在SpringBoot 2.0中的整合</title>
    <link href="http://weafteam.github.io/posts/2b2e3e2f/"/>
    <id>http://weafteam.github.io/posts/2b2e3e2f/</id>
    <published>2018-04-18T09:57:12.000Z</published>
    <updated>2018-05-29T01:27:49.847Z</updated>
    
    <content type="html"><![CDATA[<p>今天开始给大家分享Java相关的技术开发知识，在以后的开发和学习中，还希望大家多多指教，对于我发表的相关内容，如有错误，请大家指出来，一起学习。 更要记住这句话：Stay Hungry, Stay Foolish.</p><h2 id="一redis的安装">一、Redis的安装</h2><p>为了方便教程这里先简单介绍Redis的安装。</p><h3 id="windows平台的安装">1. windows平台的安装</h3><p>现在官网已经不提供windows平台的下载，所以只能去github上下载安装 <a href="https://github.com/MSOpenTech/redis/tags" target="_blank" rel="noopener">github下载网址</a> 进入之后选择好版本点击msi下载 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/redis-1.png" alt="Redis"> 然后双击安装。 默认是直接运行的。 可以通过控制台访问如 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/redis-2.png" alt="Redis"> 具体语法可以在相关网上查阅。 ### 2. Linux平台的安装 直接到官网下载 <a href="http://redis.io/download" target="_blank" rel="noopener">Redis.io</a> 解压并安装 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-4.0.9.tar.gz</span><br><span class="line">tar xzf redis-4.0.9.tar.gz</span><br><span class="line">cd redis-4.0.9</span><br><span class="line">make</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>服务端运行脚本 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src/redis-server</span><br></pre></td></tr></table></figure></p><p>客户端运行脚本 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src/redis-cli</span><br></pre></td></tr></table></figure></p><h3 id="springboot2.0相关配置">3. SpringBoot2.0相关配置</h3><p>pom文件加入以下依赖 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>我这里SpringBoot的配置文件使用的是YAML。 在相应环境中配置Redis ##### application-local.yml <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    datasource:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">        driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/local?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">        username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">        password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    redis:</span></span><br><span class="line"><span class="attr">          database:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">          host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">          port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">          jedis:</span></span><br><span class="line"><span class="attr">            pool:</span></span><br><span class="line"><span class="attr">              min-idle:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">              max-idle:</span> <span class="number">8</span></span><br><span class="line"><span class="attr">              max-active:</span> <span class="number">8</span></span><br><span class="line"><span class="attr">              max-wait:</span> <span class="bullet">-1</span><span class="string">ms</span></span><br></pre></td></tr></table></figure></p><h3 id="代码级别配置">4.代码级别配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xxx.controller.entry.entity.AccessToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.jedis.JedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.convert.KeyspaceConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.repository.configuration.EnableRedisRepositories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ：yaxuSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 18:35 2018/4/17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> by:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="comment">//增加Respository支持，并使其支持@TimeToLive</span></span><br><span class="line"><span class="meta">@EnableRedisRepositories</span>(keyspaceConfiguration = RedisCacheConfig.MyKeyspaceConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCacheConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager.builder(connectionFactory).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public RedisConnectionFactory connectionFactory() &#123;</span></span><br><span class="line"><span class="comment">//        return new JedisConnectionFactory();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;?, ?&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) &#123;</span><br><span class="line">        RedisTemplate&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; template = <span class="keyword">new</span> RedisTemplate&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public RedisTemplate&lt;Object, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory)&#123;</span></span><br><span class="line"><span class="comment">//        RedisTemplate&lt;Object, Object&gt; redisTemplate = new RedisTemplate&lt;Object, Object&gt;();</span></span><br><span class="line"><span class="comment">//        redisTemplate.setConnectionFactory(redisConnectionFactory);</span></span><br><span class="line"><span class="comment">//        redisTemplate.setKeySerializer(new StringRedisSerializer());//key序列化</span></span><br><span class="line"><span class="comment">//        redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer(Object.class));  //value序列化</span></span><br><span class="line"><span class="comment">//        redisTemplate.afterPropertiesSet();</span></span><br><span class="line"><span class="comment">//        return redisTemplate;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyKeyspaceConfiguration</span> <span class="keyword">extends</span> <span class="title">KeyspaceConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Iterable&lt;KeyspaceSettings&gt; <span class="title">initialConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> KeyspaceSettings(AccessToken.class, <span class="string">"accessToken"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存对象AccessToken <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisHash;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.TimeToLive;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ：yaxuSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 14:26 2018/4/18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> by:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RedisHash</span>(<span class="string">"accessToken"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessToken</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    String id;</span><br><span class="line">    String accessToken;</span><br><span class="line">    <span class="meta">@TimeToLive</span></span><br><span class="line">    Long expire;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建Respository <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xxx.controller.entry.entity.AccessToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.repository.CrudRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ：yaxuSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 14:34 2018/4/18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> by:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="comment">// 继承自CURD，里边有最基本的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccessTokenRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">AccessToken</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来完成自己的业务服务类 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xxx.controller.entry.entity.AccessToken;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ：yaxuSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 14:50 2018/4/18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> by:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccessTokenService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">AccessToken <span class="title">save</span><span class="params">(AccessToken accessToken)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(AccessToken accessToken)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">AccessToken <span class="title">get</span><span class="params">(String id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>业务服务类的实现 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xxx.controller.entry.entity.AccessToken;</span><br><span class="line"><span class="keyword">import</span> com.xxx.dao.repository.AccessTokenRepository;</span><br><span class="line"><span class="keyword">import</span> com.xxx.service.AccessTokenService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ：yaxuSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 14:52 2018/4/18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> by:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"accessTokenService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessTokenServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccessTokenService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccessTokenRepository repo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccessToken <span class="title">save</span><span class="params">(AccessToken accessToken)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  repo.save(accessToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(AccessToken accessToken)</span> </span>&#123;</span><br><span class="line">        repo.delete(accessToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccessToken <span class="title">get</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        Optional&lt;AccessToken&gt; accessToken = repo.findById(id);</span><br><span class="line">        <span class="keyword">return</span> accessToken.orElse(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上完成了整个整合过程。 ### 5. 简单的测试 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xxx.controller.entry.entity.AccessToken;</span><br><span class="line"><span class="keyword">import</span> com.xxx.service.AccessTokenService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ：yaxuSong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 15:16 2018/4/18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Modified</span> by:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccessTokenService accessTokenService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        AccessToken accessToken = <span class="keyword">new</span> AccessToken();</span><br><span class="line">        accessToken.setAccessToken(<span class="string">"dadaadadsdadewqeqfskksdbfdbkfsdkdajdhwke2elhsbcslc/DNDAWDAWWAFEWFSD23E2342"</span>);</span><br><span class="line">        accessToken.setExpire(<span class="number">60L</span>);</span><br><span class="line"><span class="comment">//单位 秒</span></span><br><span class="line">        AccessToken at = accessTokenService.save(accessToken);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"成功"</span>+<span class="string">"键值为："</span>+at.getId();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"get"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        AccessToken accessToken = accessTokenService.get(id);</span><br><span class="line">        <span class="keyword">return</span> accessToken==<span class="keyword">null</span>?<span class="string">"已过期"</span>:accessToken.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试结果：</p><p><img src="https://weaf.oss-cn-beijing.aliyuncs.com/redis-3.png" alt="Redis"></p><p>我这里添加了一个过期时间为60s的token。 我们通过查看可以看到时间的变化</p><p>第一次查询： <img src="https://weaf.oss-cn-beijing.aliyuncs.com/redis-4.png" alt="Redis"> 第二次查询： <img src="https://weaf.oss-cn-beijing.aliyuncs.com/redis-5.png" alt="Redis"> 第三次查询： <img src="https://weaf.oss-cn-beijing.aliyuncs.com/redis-6.png" alt="Redis"></p><p>我们查看下本地Rdis所有键值情况： <img src="https://weaf.oss-cn-beijing.aliyuncs.com/redis-7.png" alt="Redis"> 过一段时间后查询： <img src="https://weaf.oss-cn-beijing.aliyuncs.com/redis-9.png" alt="Redis"> 我们发现之前还存在键值id为c07cde6a-aec7-40f3-ad39-41862209bc9f的，但是内容没有了。 后来查询的就被删除了（过期后不会直接删除，会稍有延迟，只有id存在，其他都已被删除）</p><p>我们看到键值为：d2b97d54-1c8b-4803-8f60-6aaf3384fc32的是我之前存的TTL=7200s的。 <img src="https://weaf.oss-cn-beijing.aliyuncs.com/redis-8.png" alt="Redis"></p><p>至此所有相关的内容就介绍完了。</p><p>本文参考地址：<a href="https://docs.spring.io/spring-data/redis/docs/2.0.5.RELEASE/reference/html/" target="_blank" rel="noopener">Spring-data-redis</a></p>]]></content>
    
    <summary type="html">
    
      Redis在SpringBoot 2.0中的整合
    
    </summary>
    
      <category term="JAVA" scheme="http://weafteam.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="http://weafteam.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Linux下MySQL安装</title>
    <link href="http://weafteam.github.io/posts/2cd32dfc/"/>
    <id>http://weafteam.github.io/posts/2cd32dfc/</id>
    <published>2018-04-17T04:07:12.000Z</published>
    <updated>2018-05-29T01:27:49.843Z</updated>
    
    <content type="html"><![CDATA[<p>接下来我将介绍3种方法安装MySQL</p><h1 id="第一种">第一种</h1><h2 id="一查看是否安装了mysql">一、查看是否安装了MySQL</h2><p>使用命令： <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure></p><p>如果使用centos，可能会出现冲突，解决冲突需要卸载mariadb 首先查看是否安装了Mariadb <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep mariadb</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>然后卸载 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e mariadb-libs-5.5.56-2.el7.x86_64</span><br></pre></td></tr></table></figure></p><p>强制卸载(可选): <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64</span><br></pre></td></tr></table></figure></p><p><img src="http://us-forever.com/img/linuxMySQL-1.png" alt="mysql-1"> 二、如果安装了需删除已安装版本 —— 删除命令： <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps 包名</span><br><span class="line">( rpm -ev mysql-4.1.12-3.RHEL4.1 )</span><br></pre></td></tr></table></figure></p><p>删除老版本mysql的开发头文件和库 命令： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -fr /usr/lib/mysql</span><br><span class="line">rm -fr /usr/include/mysql</span><br></pre></td></tr></table></figure></p><p>注意：卸载后/var/lib/mysql中的数据及/etc/my.cnf不会删除，如果确定没用后就手工删除 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -f /etc/my.cnf</span><br><span class="line">rm -fr /var/lib/mysql</span><br></pre></td></tr></table></figure></p><h2 id="三安装mysql准备环境">三、安装mysql准备环境</h2><p>我自mysql官网下载通用的Linux版本安装包 mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz 将下载好的包放在 /usr/local 目录下，或者执行命令： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">wget https://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure></p><p><img src="http://us-forever.com/img/linuxMySQL-2.png" alt="mysql-2"></p><p>解压下载的文件 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz</span><br></pre></td></tr></table></figure></p><p>将解压之后的所有文件移动到/usr/local/mysql <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv ./mysql-5.7.20-linux-glibc2.12-x86_64/* ./mysql</span><br></pre></td></tr></table></figure></p><p>为mysql创建系统用户(可选，新版本会自动创建相应用户) <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql mysql</span><br></pre></td></tr></table></figure></p><p>//-r参数表示mysql用户是系统用户，不可用于登录系统 并变更mysql安装目录的所属用户和用户组 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql:mysql mysql</span><br><span class="line">// -R 迭代处理</span><br></pre></td></tr></table></figure></p><p><img src="http://us-forever.com/img/linuxMySQL-3.png" alt="mysql-3"> 四、 安装和初始化 ——</p><p>初始化数据库 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --lc_messages_dir=/usr/local/mysql/share --lc_messages=en_US</span><br></pre></td></tr></table></figure></p><p>记录刚刚输出的密码： jk9tEao&lt;94MC <img src="http://us-forever.com/img/linuxMySQL-4.png" alt="mysql-4"></p><p>配置/etc/my.cnf</p><p><a href="http://us-forever.com/file/my.cnf" target="_blank" rel="noopener">my.cnf</a></p><h2 id="五-启动登录和设置密码">五、 启动登录和设置密码</h2><p>切换到mysql安装目录的bin下启动 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mysqld_safe --user=mysql</span><br></pre></td></tr></table></figure></p><p>启动后可能无法使用当前窗口</p><p>登录进去设置新的密码： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mysql -u root -p</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">password</span>=<span class="keyword">password</span>(<span class="string">"root"</span>);</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><p><img src="http://us-forever.com/img/linuxMySQL-5.png" alt="mysql-5"></p><p>六、 添加到服务</p><p>切换到 support-files目录下，并执行以下命令 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp mysql.server /etc/init.d/mysql</span><br></pre></td></tr></table></figure></p><p>然后停止当前进程，使用服务启动mysql <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql start</span><br></pre></td></tr></table></figure></p><p>并添加mysql环境变量 在 /etc/profile 的文件末尾追加： export PATH=$PATH:/usr/local/mysql/bin 保存后执行 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p><p>最后使用新密码登录到mysql <img src="http://us-forever.com/img/linuxMySQL-6.png" alt="mysql-6"></p><h1 id="第二种">第二种</h1><h2 id="一查看是否安装了mysql-1">一、查看是否安装了MySQL</h2><p>使用命令： <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure></p><p>如果使用centos，可能会出现冲突，解决冲突需要卸载mariadb 首先查看是否安装了Mariadb <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep mariadb</span><br></pre></td></tr></table></figure></p><!--more--><p>然后卸载 <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e mariadb-libs-5.5.56-2.el7.x86_64</span><br></pre></td></tr></table></figure></p><p>强制卸载(可选): <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64</span><br></pre></td></tr></table></figure></p><p><img src="http://us-forever.com/img/linuxMySQL-1.png" alt="mysql-1"> 二、如果安装了需删除已安装版本 —— 删除命令： <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps 包名</span><br><span class="line">( rpm -ev mysql-4.1.12-3.RHEL4.1 )</span><br></pre></td></tr></table></figure></p><p>删除老版本mysql的开发头文件和库 命令： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -fr /usr/lib/mysql</span><br><span class="line">rm -fr /usr/include/mysql</span><br></pre></td></tr></table></figure></p><p>注意：卸载后/var/lib/mysql中的数据及/etc/my.cnf不会删除，如果确定没用后就手工删除 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -f /etc/my.cnf</span><br><span class="line">rm -fr /var/lib/mysql</span><br></pre></td></tr></table></figure></p><p>三、准备安装的环境 wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.20-1.el7.x86_64.rpm-bundle.tar 或者用自己准备好的包 mysql-5.7.20-1.el7.x86_64.rpm-bundle.tar 解压包 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf mysql-5.7.20-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure></p><p>然后按照以下顺序安装 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.20-1.el7.x86_64.rpm </span><br><span class="line">rpm -ivh mysql-community-libs-5.7.20-1.el7.x86_64.rpm </span><br><span class="line">rpm -ivh mysql-community-client-5.7.20-1.el7.x86_64.rpm </span><br><span class="line">rpm -ivh mysql-community-server-5.7.20-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure></p><p>四、启动并修改密码 安装完成后就可以启动服务了 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure></p><p>启动后查看配置文件 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure></p><p><img src="http://us-forever.com/img/linuxMySQL-1-2.png" alt="linuxMySQL-1-2.png"> 找打log文件 进入查找默认root密码 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/log/mysqld.log</span><br></pre></td></tr></table></figure></p><p><img src="http://us-forever.com/img/linuxMySQL-1-3.png"></p><p>使用一下命令登录并修改密码 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></p><p>修改密码 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;newpass&apos;);</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></p><p><img src="http://us-forever.com/img/linuxMySQL-1-4.png"></p><h1 id="第三种">第三种</h1><h2 id="一查看是否安装了mysql数据库">一、查看是否安装了MySQL数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep mysql</span><br></pre></td></tr></table></figure><p><img src="http://us-forever.com/img/mysql1.png"> 卸载 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps mysql-libs-5.1.71-1.el6.x86_64</span><br></pre></td></tr></table></figure></p><p>二、安装 安装一下包 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh MySQL-devel-5.6.23-1.linux_glibc2.5.x86_64.rpm</span><br><span class="line">rpm -ivh MySQL-client-5.6.23-1.linux_glibc2.5.x86_64.rpm</span><br><span class="line">rpm -ivh MySQL-server-5.6.23-1.linux_glibc2.5.x86_64.rpm</span><br><span class="line">rpm -ivh MySQL-embedded-5.6.23-1.linux_glibc2.5.x86_64.rpm</span><br><span class="line">rpm -ivh MySQL-shared-5.6.23-1.linux_glibc2.5.x86_64.rpm</span><br><span class="line">rpm -ivh MySQL-shared-compat-5.6.23-1.linux_glibc2.5.x86_64.rpm</span><br></pre></td></tr></table></figure></p><p>三、启动登录设置密码 使用以下命令开启服务</p><pre><code>service mysql start</code></pre><p>获取初始密码： <img src="http://us-forever.com/img/mysql2.png"> 使用root登录</p><pre><code>mysql -uroot -p</code></pre><p>然后试用一下命令设置密码</p><pre><code>SET PASSWORD = PASSWORD(&#39;123456&#39;);</code></pre>]]></content>
    
    <summary type="html">
    
      Linux下MySQL安装
    
    </summary>
    
      <category term="Linux" scheme="http://weafteam.github.io/categories/Linux/"/>
    
    
      <category term="Linux运维" scheme="http://weafteam.github.io/tags/Linux%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>TensorFLow 基础（2）</title>
    <link href="http://weafteam.github.io/posts/7b0ee3f1/"/>
    <id>http://weafteam.github.io/posts/7b0ee3f1/</id>
    <published>2018-04-15T14:14:23.000Z</published>
    <updated>2018-08-28T03:33:18.767Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tensorflow-基础2">TensorFlow 基础（2）</h1><p>今天有和大家见面了，今天的文章可能内容有点少，这周有很多事情，所以少写点。下一周我尽量多写点。弥补大家。那么我们今天闲话少说，直接开始今天的TensorFlow的基础介绍。接着上一节继续讲起。</p><ol type="1"><li>Loss Functions</li></ol><blockquote><p>今天这个开头就是最常用的损失函数的实现，使用。主要涉及到两种损失函数的设计，数值预测的回归损失函数，还有分类的损失函数设计。那么我们直接开始我们的实现，有什么难点我会注释。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先我们像往常一场导入我们需要的模块</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line">ops.reset_default_graph()</span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line">x_vals = tf.linspace(<span class="number">-1.</span>, <span class="number">1.</span>, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">target = tf.constant(<span class="number">0.</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># l2 loss 和l2范数差一个平方根</span></span><br><span class="line">l2_y_vals = tf.square(target - x_vals)</span><br><span class="line">l2_y_out = sess.run(l2_y_vals)</span><br><span class="line"></span><br><span class="line"><span class="comment"># l1 loss 就是l1范数</span></span><br><span class="line">l1_y_vals = tf.abs(target - x_vals)</span><br><span class="line">l1_y_out = sess.run(l1_y_vals)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Pseudo-Huber loss 为了让loss更加的光滑一些</span></span><br><span class="line"><span class="comment"># 具体看公式一</span></span><br><span class="line">delta = tf.constant(<span class="number">0.25</span>)</span><br><span class="line">phuber1_y_vals = tf.multiply(tf.square(delta), tf.sqrt(<span class="number">1.</span> + tf.square((target - x_vals) / delta)) - <span class="number">1.</span>)</span><br><span class="line">phuber1_y_out = sess.run(phuber1_y_vals)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delta2 = tf.constant(<span class="number">5.</span>)</span><br><span class="line">phuber2_y_vals = tf.multiply(tf.square(delta2), tf.sqrt(<span class="number">1.</span> + tf.square((target - x_vals)/delta2)) - <span class="number">1.</span>)</span><br><span class="line">phuber2_y_out = sess.run(phuber2_y_vals)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出这些回归损失函数</span></span><br><span class="line">x_array = sess.run(x_vals)</span><br><span class="line">plt.plot(x_array, l2_y_out, <span class="string">'b-'</span>, label=<span class="string">'L2 Loss'</span>)</span><br><span class="line">plt.plot(x_array, l1_y_out, <span class="string">'r--'</span>, label=<span class="string">'L1 Loss'</span>)</span><br><span class="line">plt.plot(x_array, phuber1_y_out, <span class="string">'k-.'</span>, label=<span class="string">'P-Huber Loss (0.25)'</span>)</span><br><span class="line">plt.plot(x_array, phuber2_y_out, <span class="string">'g:'</span>, label=<span class="string">'P-Huber Loss (5.0)'</span>)</span><br><span class="line">plt.ylim(<span class="number">-0.2</span>, <span class="number">0.4</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'lower right'</span>, prop=&#123;<span class="string">'size'</span>: <span class="number">11</span>&#125;)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment"># 你能从后面的两个损失函数中得到什么规律呢？</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">ops.reset_default_graph()</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Various predicted X values</span></span><br><span class="line">x_vals = tf.linspace(<span class="number">-3.</span>, <span class="number">5.</span>, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Target of 1.0</span></span><br><span class="line">target = tf.constant(<span class="number">1.</span>)</span><br><span class="line">targets = tf.fill([<span class="number">500</span>,], <span class="number">1.</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分类损失函数</span></span><br><span class="line"><span class="comment"># Hinge Loss 合页损失函数</span></span><br><span class="line"><span class="comment"># 具体请见公式二</span></span><br><span class="line">hinge_y_vals = tf.maximum(<span class="number">0.</span>, <span class="number">1.</span> - tf.multiply(target, x_vals))</span><br><span class="line">hinge_y_out = sess.run(hinge_y_vals)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交叉熵损失</span></span><br><span class="line">xentropy_y_vals = - tf.multiply(target, tf.log(x_vals)) - tf.multiply((<span class="number">1.</span> - target), tf.log(<span class="number">1.</span> - x_vals))</span><br><span class="line">xentropy_y_out = sess.run(xentropy_y_vals)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sigmoid 交叉熵</span></span><br><span class="line">x_val_input = tf.expand_dims(x_vals, <span class="number">1</span>)</span><br><span class="line">target_input = tf.expand_dims(targets, <span class="number">1</span>)</span><br><span class="line">xentropy_sigmoid_y_vals = tf.nn.softmax_cross_entropy_with_logits(logits = x_val_input, labels = target_input)</span><br><span class="line">xentropy_sigmoid_y_out = sess.run(xentropy_sigmoid_y_vals)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 权重softmax 交叉熵损失函数</span></span><br><span class="line">weight = tf.constant(<span class="number">0.5</span>)</span><br><span class="line">xentropy_weighted_y_vals = tf.nn.weighted_cross_entropy_with_logits(x_vals, targets, weight)</span><br><span class="line">xentropy_weighted_y_out = sess.run(xentropy_weighted_y_vals)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出这些损失函数</span></span><br><span class="line">x_array = sess.run(x_vals)</span><br><span class="line">plt.plot(x_array, hinge_y_out, <span class="string">'b-'</span>, label=<span class="string">'Hinge Loss'</span>)</span><br><span class="line">plt.plot(x_array, xentropy_y_out, <span class="string">'r--'</span>, label=<span class="string">'Cross Entropy Loss'</span>)</span><br><span class="line">plt.plot(x_array, xentropy_sigmoid_y_out, <span class="string">'k-.'</span>, label=<span class="string">'Cross Entropy Sigmoid Loss'</span>)</span><br><span class="line">plt.plot(x_array, xentropy_weighted_y_out, <span class="string">'g:'</span>, label=<span class="string">'Weighted Cross Entropy Loss (x0.5)'</span>)</span><br><span class="line">plt.ylim(<span class="number">-1.5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">#plt.xlim(-1, 3)</span></span><br><span class="line">plt.legend(loc=<span class="string">'lower right'</span>, prop=&#123;<span class="string">'size'</span>: <span class="number">11</span>&#125;)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具体损失函数是干嘛用的，那就是为了具体的数据预测给提供一个最优化的目标，为了让每一类任务有一个最小化目标而构造出来的loss函数，在机器学习里面最重要的其实有一项就是损失函数的设计，设计一个好的损失函数，会让我们的网络更加的稳定，更加容易收敛和收敛到一个相对最优值</span></span><br><span class="line"><span class="comment"># 没有掌握这些基本概念的，希望自己先找一些这方面的知识来看一看，然后再理解的写代码，这样会事半功倍。</span></span><br></pre></td></tr></table></figure><blockquote><p>公式一：</p></blockquote><p><span class="math display">\[L_{\delta}(i) = {\delta}^2 (\sqrt{1 + (a/{\delta})^2} - 1)\]</span></p><blockquote><p>公式二：</p></blockquote><p><span class="math display">\[max(0, 1 - (pre - y))\]</span></p><blockquote><p>公式三：</p></blockquote><p><span class="math display">\[L = -actual * (log(pre)) - (1- actual)(log(1-pre))\]</span></p><blockquote><p>公式四：</p></blockquote><p><span class="math display">\[L = -actual * (log(sigmoid(pre))) - (1- actual)(log(1- sigmoid(pre)))\]</span></p><blockquote><p>公式五：</p></blockquote><p><span class="math display">\[L = -actual * (log(pre)) * weights - (1-actual)(log(1-pre))\]</span></p><ol start="2" type="1"><li>Back Propagation</li></ol><blockquote><p>这个地方不要紧张，我这里给你推荐一个网站，上面有很好理解这个算法的解释。</p></blockquote><p><a href="https://www.zybuluo.com/hanbingtao/note/476663" target="_blank" rel="noopener">机器学习基础以及反向传播算法介绍</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面是一个回归的例子</span></span><br><span class="line"><span class="comment"># 老样子，我们创建tensorflow的会话，使用默认的计算图</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line">ops.reset_default_graph()</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"><span class="comment"># 一个回归的例子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line">x_vals = np.random.normal(<span class="number">1</span>, <span class="number">0.1</span>, <span class="number">100</span>) <span class="comment"># x数据</span></span><br><span class="line">y_vals = np.repeat(<span class="number">10.</span>, <span class="number">100</span>) <span class="comment"># y 数据</span></span><br><span class="line">x_data = tf.placeholder(shape=[<span class="number">1</span>], dtype=tf.float32) <span class="comment"># 占位符</span></span><br><span class="line">y_target = tf.placeholder(shape=[<span class="number">1</span>], dtype=tf.float32) <span class="comment"># label（真值）</span></span><br><span class="line"></span><br><span class="line">A = tf.Variable(tf.random_normal(shape=[<span class="number">1</span>]))</span><br><span class="line">my_output = tf.multiply(x_data, A)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用l2 loss</span></span><br><span class="line">loss = tf.square(my_output - y_target)</span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建了一个反向传播优化器</span></span><br><span class="line">my_opt = tf.train.GradientDescentOptimizer(<span class="number">0.02</span>)</span><br><span class="line">train_step = my_opt.minimize(loss) <span class="comment"># 最小化loss</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始我们的迭代训练</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    rand_index = np.random.choice(<span class="number">100</span>)</span><br><span class="line">    rand_x = [x_vals[rand_index]]</span><br><span class="line">    rand_y = [y_vals[rand_index]]</span><br><span class="line">    sess.run(train_step, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">25</span>==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'Step #'</span> + str(i+<span class="number">1</span>) + <span class="string">' A = '</span> + str(sess.run(A)))</span><br><span class="line">        print(<span class="string">'Loss = '</span> + str(sess.run(loss, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面是一个分类的例子</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line"></span><br><span class="line">ops.reset_default_graph()</span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分类的例子</span></span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line">x_vals = np.concatenate((np.random.normal(<span class="number">-1</span>, <span class="number">1</span>, <span class="number">50</span>), np.random.normal(<span class="number">3</span>, <span class="number">1</span>, <span class="number">50</span>)))</span><br><span class="line">y_vals = np.concatenate((np.repeat(<span class="number">0.</span>, <span class="number">50</span>), np.repeat(<span class="number">1.</span>, <span class="number">50</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建占位符</span></span><br><span class="line">x_data = tf.placeholder(shape=[<span class="number">1</span>], dtype=tf.float32)</span><br><span class="line">y_target = tf.placeholder(shape=[<span class="number">1</span>], dtype=tf.float32)</span><br><span class="line">A = tf.Variable(tf.random_normal(mean=<span class="number">10</span>, shape=[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">my_output = tf.add(x_data, A)</span><br><span class="line"></span><br><span class="line">my_output_expanded = tf.expand_dims(my_output, <span class="number">0</span>)</span><br><span class="line">y_target_expanded = tf.expand_dims(y_target, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是不是使用的是对应的分类损失函数呀 sigmoid cross entropy</span></span><br><span class="line">xentropy = tf.nn.sigmoid_cross_entropy_with_logits(logits = my_output_expanded, labels = y_target_expanded)</span><br><span class="line"></span><br><span class="line">my_opt = tf.train.GradientDescentOptimizer(<span class="number">0.05</span>)</span><br><span class="line">train_step = my_opt.minimize(xentropy)</span><br><span class="line"></span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1400</span>):</span><br><span class="line">    rand_index = np.random.choice(<span class="number">100</span>)</span><br><span class="line">    rand_x = [x_vals[rand_index]]</span><br><span class="line">    rand_y = [y_vals[rand_index]]</span><br><span class="line">    </span><br><span class="line">    sess.run(train_step, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)</span><br><span class="line">    <span class="keyword">if</span> (i+<span class="number">1</span>)%<span class="number">200</span>==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'Step #'</span> + str(i+<span class="number">1</span>) + <span class="string">' A = '</span> + str(sess.run(A)))</span><br><span class="line">        print(<span class="string">'Loss = '</span> + str(sess.run(xentropy, feed_dict=&#123;x_data: rand_x, y_target: rand_y&#125;)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试 </span></span><br><span class="line">predictions = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(x_vals)):</span><br><span class="line">    x_val = [x_vals[i]]</span><br><span class="line">    prediction = sess.run(tf.round(tf.sigmoid(my_output)), feed_dict=&#123;x_data: x_val&#125;)</span><br><span class="line">    predictions.append(prediction[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">accuracy = sum(x==y <span class="keyword">for</span> x,y <span class="keyword">in</span> zip(predictions, y_vals))/<span class="number">100.</span></span><br><span class="line">print(<span class="string">'Ending Accuracy = '</span> + str(np.round(accuracy, <span class="number">2</span>)))</span><br></pre></td></tr></table></figure><p>o^o,今天我们就讲到这里，下节我们再见，总的来说，就是在回归和分类问题中，设计相对应的loss函数，然后使用反向传播优化器起优化loss，使得loss逐渐减小</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;tensorflow-基础2&quot;&gt;TensorFlow
        
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/categories/TensorFlow/"/>
    
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>asyncio 不完全指北（一）</title>
    <link href="http://weafteam.github.io/posts/b496f296/"/>
    <id>http://weafteam.github.io/posts/b496f296/</id>
    <published>2018-04-14T19:37:56.000Z</published>
    <updated>2018-08-07T08:56:41.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>众所周知，Python 的并发编程主要由线程、进程和协程三个组件组成，我们可以使用 Python 模块 <code>threading</code>、<code>multiprocessing</code> 和 <code>yield</code> 句法去操纵它们。后来，又有了更高层的封装：<code>concurrent.futures</code> 和 <code>asyncio</code> 模块。<code>concurrent.futures</code>是对 <code>threading</code> 和 <code>multiprocessing</code> 的封装，不是这篇文章的重点；<code>asyncio</code> 是 Python 中的重大变化，也代表了未来的发展趋势，所以这篇文章打算讲讲 <code>asyncio</code>。</p><h2 id="什么是-asyncio">什么是 asyncio</h2><p><code>asyncio</code> 一开始是 Python 的作者 Guido van Rossum 在 Python 仓库之外开发的，代号为“<a href="https://code.google.com/p/tulip/" target="_blank" rel="noopener">Tulip</a>”，在 Python 3.4 时加入标准库。<code>asyncio</code>模块使用事件循环驱动的协程实现并发，提供了基于协程来构建并发程序的工具。作为对比，<code>threading</code> 模块通过应用级线程实现并发；<code>multiprocessing</code> 模块使用系统级进程实现并发；而 <code>asyncio</code>使用单线程、单进程，其中应用程序的各个部分在事件循环的驱动下进行协作，在最佳时间显式切换任务。<code>asyncio</code> 不但支持通常情况下出现阻塞型 IO 时的上下文切换，还支持调度，来让代码在指定的将来时间运行，并且还可以让一个协程等待另一个协程完成。</p><h2 id="asyncio-中的几个概念">asyncio 中的几个概念</h2><p>事件循环：<code>asyncio</code> 提供的框架以事件循环为中心，它是负责有效处理 I / O 事件、系统事件和应用程序上下文切换的第一类对象。Python 提供了几个循环实现，通常会自动选择合理的默认值，但也可以选择特定的事件循环实现。同样也有一些第三方的实现，例如 <a href="https://github.com/MagicStack/uvloop" target="_blank" rel="noopener">uvloop</a>。应用程序将要执行的代码注册到事件循环中，代表允许事件循环在必要时对代码进行调用。当调用结束，或无法继续时，应用程序会让出控制权，交还给事件循环。</p><p>协程（coroutine ）：将控制权交还给事件循环的机制来自于 Python 的协程，这是一种特殊的函数，它将控制权交还给调用方而不会丢失本身状态。协程类似于生成器函数，事实上可以在 Python 3.5 之前的版本中用生成器实现协程。<code>asyncio</code> 还为 <code>Protocols</code> 和 <code>Transports</code> 提供了基于类的抽象层，使用回调的代码风格。在基于类的模型和协程模型中，通过重新进入事件循环来显式更改上下文将取代 Python 线程实现中的隐式上下文更改。</p><p><code>future</code>：<code>future</code>是一种对象，表示待完成的操作的结果。事件循环可以监视 <code>future</code> 对象直到它完成，从而允许应用程序的一部分等待另一部分完成某些工作。除了 <code>future</code>，<code>asyncio</code> 还包括其他并发原语，例如锁和信号量。通常情况下，我们不应该自行创建 <code>future</code>，只能通过并发框架（例如 <code>asyncio</code>）来实例化。原因是 <code>future</code>代表终将发生的事情，而某件事的发生，是通过安排好这件事的执行时间来确定的。只有当我们把某件事交给事件循环处理时，事件循环才会给这件事排期，从而创建一个 <code>future</code>对象。</p><p>任务（Task）：任务是 <code>future</code>的子类，它包装并管理协程的执行。任务可以通过事件循环进行调度，以便在它们需要的资源可用时运行，并生成可由其他协程使用的结果。</p><h2 id="使用协程处理多任务协作">使用协程处理多任务协作</h2><p>协程是为并发设计的语言概念。协程函数在调用时创建协程对象，然后调用方可以使用协程的 <code>send ()</code> 方法运行函数。协程可以在另一个协程中使用 <code>await</code>关键字暂停执行。当它被暂停时，协程的状态被保持，允许它在下次被唤醒时恢复到它停止的位置。</p><h3 id="启动协程">启动协程</h3><p>启动一个协程最简单的方式是将一个协程传递给事件循环的 <code>run_until_complete()</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coroutine</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in coroutine'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'starting coroutine'</span>)</span><br><span class="line">    print(<span class="string">'entering event loop'</span>)</span><br><span class="line">    event_loop.run_until_complete(coroutine())</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'closing event loop'</span>)</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">starting coroutine</span><br><span class="line">entering event loop</span><br><span class="line">in coroutine</span><br><span class="line">closing event loop</span><br></pre></td></tr></table></figure><p>首先，我们通过 <code>asyncio.get_event_loop()</code> 获取了一个默认事件循环的引用。<code>run_until_complete()</code> 方法接受一个协程对象，并用它启动事件循环，然后在协程通过 <code>return</code> 结束时停止事件循环。</p><h3 id="协程的返回值">协程的返回值</h3><p>协程的返回值返回给启动并等待它的程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">coroutine</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in coroutine'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'result'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    return_value = event_loop.run_until_complete(coroutine())</span><br><span class="line">    print(<span class="string">f'it returned: <span class="subst">&#123;return_value!r&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">in coroutine</span><br><span class="line">it returned: 'result'</span><br></pre></td></tr></table></figure><h3 id="链式调用协程">链式调用协程</h3><p>一个协程可以启动另一个协程并等待它返回结果。下面的示例包含两个阶段，它们必须按顺序执行，但可以与另外的操作同时运行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">phase1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in phase1'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'result1'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">phase2</span><span class="params">(arg)</span>:</span></span><br><span class="line">    print(<span class="string">'in phase2'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'result2 derived from <span class="subst">&#123;arg&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in main'</span>)</span><br><span class="line">    print(<span class="string">'waiting for result1'</span>)</span><br><span class="line">    result1 = <span class="keyword">await</span> phase1()</span><br><span class="line">    print(<span class="string">'waiting for result2'</span>)</span><br><span class="line">    result2 = <span class="keyword">await</span> phase2(result1)</span><br><span class="line">    <span class="keyword">return</span> (result1, result2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    return_value = event_loop.run_until_complete(main())</span><br><span class="line">    print(<span class="string">f'return value: <span class="subst">&#123;return_value!r&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">in main</span><br><span class="line">waiting for result1</span><br><span class="line">in phase1</span><br><span class="line">waiting for result2</span><br><span class="line">in phase2</span><br><span class="line">return value: ('result1', 'result2 derived from result1')</span><br></pre></td></tr></table></figure><p>在这里使用了 <code>await</code> 关键字，并没有将新的协程添加到事件循环中。因为控制流已经在由事件循环管理的协程内部，所以不需要通知事件循环管理新的协程。</p><h3 id="使用生成器语法">使用生成器语法</h3><p><code>async</code> 和 <code>await</code> 关键字出现于 Python 3.5，对于 Python 3.5 之前的版本，可以使用 <code>asyncio.coroutine</code> 装饰器和 <code>yield from</code> 来实现相同的功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">phase1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in phase1'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'result1'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">phase2</span><span class="params">(arg)</span>:</span></span><br><span class="line">    print(<span class="string">'in phase2'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f'result2 derived from <span class="subst">&#123;arg&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'in main'</span>)</span><br><span class="line">    print(<span class="string">'waiting for result1'</span>)</span><br><span class="line">    result1 = <span class="keyword">yield</span> <span class="keyword">from</span> phase1()</span><br><span class="line">    print(<span class="string">'waiting for result2'</span>)</span><br><span class="line">    result2 = <span class="keyword">yield</span> <span class="keyword">from</span> phase2(result1)</span><br><span class="line">    <span class="keyword">return</span> (result1, result2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    return_value = event_loop.run_until_complete(main())</span><br><span class="line">    print(<span class="string">f'return value: <span class="subst">&#123;return_value!r&#125;</span>'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure><h2 id="参考资料">参考资料</h2><ul><li><a href="https://pymotw.com/3/asyncio/concepts.html" target="_blank" rel="noopener">Asynchronous Concurrency Concepts</a></li><li><a href="https://pymotw.com/3/asyncio/coroutines.html" target="_blank" rel="noopener">Cooperative Multitasking with Coroutines</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;众所周知，Python 的并发编程主要由线程、进程和协程三个组件组成，我们可以使用 Python 模块 &lt;code&gt;threading&lt;/code&gt;、&lt;code&gt;multiprocessing&lt;/code&gt; 和
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vigenere密码加密解密</title>
    <link href="http://weafteam.github.io/posts/8b092926/"/>
    <id>http://weafteam.github.io/posts/8b092926/</id>
    <published>2018-04-14T14:11:24.000Z</published>
    <updated>2018-05-29T01:27:49.829Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天换个口味，写点原来从没接触过的东西–密码学。前一阵信息安全课上留了一个作业，实现Vigenere加密解密，借着机会写篇博客。这次博客由于比较仓促，这次只写加密解密系统的实现，不涉及唯密文破解。</p></blockquote><hr><h1 id="任务要求">任务要求：</h1><ul><li><pre><code> a.编程实现Vigenere加密/解密系统，并分析和评估该算法的安全性。</code></pre></li><li><pre><code> b.编程实现唯密文破译系统，能够破译密钥为2到4个字符的Vigenere密文，并分析如何加快破译速度。</code></pre></li><li>时间要求： 布置任务后，在3周之内完成。</li><li>提交结果：已设计并测试好的程序，包括源码、可执行程序、测试数据集、实验报告。</li></ul><h1 id="原理介绍">原理介绍：</h1><p>先普及下Caesar密码，作为单密码简单替换密码届的扛把子，他有着不可动摇的地位，它的原理很简单，对于需要加密的每个字符都进行相同大小的平移。先给出Caesar密码加密的字符对应表，如下：</p><p><img src="https://i.loli.net/2018/04/15/5ad32ed02524c.png" alt="Caesar.png"></p><p>举个例子吧：明文为China，它对应的数字应为2 7 8 13 0.比如我们平移距离为3，那么加密之后的密文应该为FKLQD，简单到炸。</p><p>我们先不谈上述加密方法的缺点，这些我们放到唯密文解密中聊。有了以上的基础之后我们再聊Vigenere加密以及解密，它是使用一系列凯撒密码组成密码字母表的加密算法，属于多表密码的一种简单形式。同样先给出它的密码加密字符对应表（自己画太麻烦了，我就在百科上扒了一个图，溜。。）：</p><p><img src="https://i.loli.net/2018/04/15/5ad33112af0e9.png" alt="222.png"></p><p>上图中的维吉尼亚表的第一列代表着密钥字母（这是有别于Caesar密码的地方），第一行代表着明文字母，行列分别使用当前需要加密字符和当前的密钥字符确定当前明文字符对应着的密文字符。</p><p>这里我们说一下，一般情况下，我们给出的密钥是短于我们的明文长度的。所以我们做Vigenere加密的时候第一步做的就是对照明文长度，补齐密钥字串。</p><p>说了这么多，举个例子说下吧：</p><ul><li><p>例如我们的明文字串为：data security</p></li><li><p>密钥：best</p></li></ul><p>按照上述的规则，第b行，第d列，对应的字符为E，….. 加密之后的密文应为：EELTTIUNSMLR（不区分大小写）。</p><h1 id="实现">实现</h1><h3 id="第一步使得密钥字符串长度与明文长度相同">第一步：使得密钥字符串长度与明文长度相同</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">dealKey</span><span class="params">(String str,String Key)</span></span>&#123;   </span><br><span class="line">        Key=Key.toUpperCase();<span class="comment">// 将密钥转换成大写</span></span><br><span class="line">        Key=Key.replaceAll(<span class="string">"[^A-Z]"</span>, <span class="string">""</span>);<span class="comment">//去除所有非字母的字符  </span></span><br><span class="line"></span><br><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder(Key);</span><br><span class="line">        String newKey=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span>(sstringBuilder.length()!=str.length())&#123; </span><br><span class="line">            <span class="comment">//如果密钥长度与str不同，则需要生成密钥字符串</span></span><br><span class="line">            <span class="keyword">if</span>(stringBuilder.length()&lt;str.length())&#123;</span><br><span class="line">                <span class="comment">//如果密钥长度比str短，则以不断重复密钥的方式生成密钥字符串</span></span><br><span class="line">                <span class="keyword">while</span>(stringBuilder.length()&lt;str.length())&#123;</span><br><span class="line">                    stringBuilder.append(Key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//此时，密钥字符串的长度大于或等于str长度</span></span><br><span class="line">            <span class="comment">//将密钥字符串截取为与str等长的字符串</span></span><br><span class="line">            newKey=stringBuilder.substring(<span class="number">0</span>, str.length());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newKey;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="第二步加密">第二步：加密</h3><p>其实我们不用将上述的Vigenere密码表列出来，一是列出来费时费力费空间，二是一个简单的取余操作就能解决这个事情。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String PwTable = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">Encryption</span><span class="params">(String P,String K)</span></span>&#123;</span><br><span class="line">        P = P.toUpperCase();<span class="comment">// 将明文转换成大写</span></span><br><span class="line">        P = P.replaceAll(<span class="string">"[^A-Z]"</span>, <span class="string">""</span>);<span class="comment">//去除所有非字母的字符   </span></span><br><span class="line">        K = dealKey(P,K);</span><br><span class="line">        <span class="keyword">int</span> len = K.length();</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> row=PwTable.indexOf(K.charAt(i));<span class="comment">//行号</span></span><br><span class="line">            <span class="keyword">int</span> col=PwTable.indexOf(P.charAt(i));<span class="comment">//列号</span></span><br><span class="line">            <span class="keyword">int</span> index = (row+col)%<span class="number">26</span>;</span><br><span class="line">            stringBuilder.append(PwTable.charAt(index));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();       </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="第三步解密">第三步：解密</h3><p>这个过程其实是比较有趣的，我们取密钥所在行为解密的行号，密文所在列作为我们的列号，我们需要分两种情况考虑：</p><p>首先说一下第一种情况，将上述的密码表从主对角线分开，一是密文在我们的密码表的右上部，这种情况比较简单，其实就是一个加密过程的逆过程，我们此时的密文字符在密码表中的位置肯定是不比其对应的明文靠后的（理解这句话，这种情况其实也就明白了，再简单点讲就是PwTable.indexof(密文)&gt;PwTable.indexof(对应的明文)），此时我们只要让列号减去行号，然后将结果做indexof操作就能得到相应的明文。</p><p>如果你理解了第一种情况，第二种情况也就好理解了，此时我们的密文字符在我们的密码表中的位置肯定是不比其对应的明文的位置靠前的，我们需要将列号加一圈字符表再去减行号。</p><p>理解之后下面的这些代码应该就不难理解了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">Decryption</span><span class="params">(String C,String K)</span></span>&#123;</span><br><span class="line">        C=C.toUpperCase();<span class="comment">// 将密文转换成大写</span></span><br><span class="line">        C=C.replaceAll(<span class="string">"[^A-Z]"</span>, <span class="string">""</span>);<span class="comment">//去除所有非字母的字符   </span></span><br><span class="line">        K=dealKey(C,K);</span><br><span class="line">        <span class="keyword">int</span> len = K.length();</span><br><span class="line">        StringBuilder stringBuilder=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> row = PwTable.indexOf(K.charAt(i));<span class="comment">//行号</span></span><br><span class="line">            <span class="keyword">int</span> col = PwTable.indexOf(C.charAt(i));<span class="comment">//列号</span></span><br><span class="line">            <span class="keyword">int</span> index;</span><br><span class="line">            <span class="keyword">if</span>(row&gt;col)&#123;</span><br><span class="line">                index=col+<span class="number">26</span>-row;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                index=col-row;</span><br><span class="line">            &#125;</span><br><span class="line">            stringBuilder.append(PwTable.charAt(index));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();     </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以上是本篇博客的全部内容，希望对你有所帮助，感谢驻足~</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;今天换个口味，写点原来从没接触过的东西–密码学。前一阵信息安全课上留了一个作业，实现Vigenere加密解密，借着机会写篇博客。这次博客由于比较仓促，这次只写加密解密系统的实现，不涉及唯密文破解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
        
      
    
    </summary>
    
      <category term="密码学" scheme="http://weafteam.github.io/categories/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
    
      <category term="密码学" scheme="http://weafteam.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>如何理解丘奇计数</title>
    <link href="http://weafteam.github.io/posts/cd89a3b2/"/>
    <id>http://weafteam.github.io/posts/cd89a3b2/</id>
    <published>2018-04-07T19:39:29.000Z</published>
    <updated>2018-08-07T08:56:41.615Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>不想写 Python 了，这次换个主题：丘奇计数，又名 lambda 演算的自然数表示法。</p><h2 id="什么是-lambda-演算">什么是 lambda 演算</h2><p>lambda 演算（也称为 λ 演算）是数学逻辑中的一种形式系统，它基于函数抽象和应用，使用变量绑定和替换来表示计算。</p><p>没错，上面这句话来自维基百科，基本上是一句正确的废话，看完了也不知道什么是 lambda 演算。不过这篇文章的重点不在 lambda 演算上，希望你已经了解了一些关于 lambda 演算的知识。如果有机会下一篇再展开说（可能</p><h2 id="什么是自然数">什么是自然数</h2><p>在计算机科学和集合论中，我们把非负整数 <span class="math inline">\((0, 1, 2, 3, 4...)\)</span> 称为自然数。皮亚诺给出了自然数的严格定义：</p><ol type="1"><li><span class="math inline">\(0\)</span> 是自然数；</li><li>如果 <span class="math inline">\(n\)</span> 是自然数，那么 <span class="math inline">\(n+1\)</span> 也是自然数（<span class="math inline">\(n+1\)</span> 代表 <span class="math inline">\(n\)</span> 的后继）；</li><li><span class="math inline">\(0\)</span> 不是任何一个数的后继；</li><li>如果 <span class="math inline">\(m\)</span> 与 <span class="math inline">\(n\)</span> 都是自然数且 <span class="math inline">\(m\neq n\)</span>，那么 <span class="math inline">\(n+1 \neq m+1\)</span>；</li><li>设 <span class="math inline">\(P(n)\)</span> 为关于自然数 <span class="math inline">\(n\)</span> 的一个性质，如果 <span class="math inline">\(P(0)\)</span> 正确， 且假设 <span class="math inline">\(P(n)\)</span> 正确，则 <span class="math inline">\(P(n+1)\)</span> 亦正确。那么 <span class="math inline">\(P(n)\)</span> 对一切自然数 <span class="math inline">\(n\)</span> 都正确。</li></ol><p>存在一个集合 <span class="math inline">\(N\)</span>，称其元素为自然数，当且仅当这些元素满足公理 1 - 5（也就是皮亚诺公理）。</p><p>在自然数集合上可以定义一组运算：加法、乘法等等，这里用加法举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(m, n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> m</span><br><span class="line">    <span class="keyword">return</span> add(m, n - <span class="number">1</span>) + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>可以看出加法是由两条规则递归定义的：</p><ol type="1"><li>$ m + 0 = m$</li><li><span class="math inline">\(m + (n + 1) = (m + n) + 1\)</span></li></ol><h2 id="lambda-演算的自然数表示法">lambda 演算的自然数表示法</h2><p>自然数当然不止可以用皮亚诺公理定义，丘奇首先把自然数和自然数上的运算定义在了 lambda 演算上，所以称之为丘奇计数。</p><p>下面就要开始丘奇计数的定义了，由于 lambda 演算的样子不太友好，所以还是用 Python 表示。</p><p>首先定义 0：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zero = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: x</span><br></pre></td></tr></table></figure><p>先不管它为什么是 0，让我们看看这个语句。它定义了一个接受一个参数 <code>f</code> 的函数，返回一个函数，这个函数接受一个参数 <code>x</code>，然后返回它。似乎很简单，但是它为什么是 0？</p><p>把它放在一边，看看 1 的定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">one = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(x)</span><br></pre></td></tr></table></figure><p>这个语句是什么意思呢？定义了一个接受一个参数 <code>f</code> 的函数，返回一个函数，这个函数接受一个参数 <code>x</code>，然后返回 <code>f(x)</code> 的调用结果。好像有些规律了，再看看 2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">two = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(f(x))</span><br></pre></td></tr></table></figure><p>定义了一个接受一个参数 <code>f</code> 的函数，返回一个函数，这个函数接受一个参数 <code>x</code>，然后返回 <code>f(f(x))</code> 的调用结果。</p><p>现在可以清楚的看到，每个自然数的后继都多调用了一次 <code>f</code>，自然数被表示为 <code>f</code> 的调用次数。</p><p>于是，我们可以很轻易的写出后继函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">succ = <span class="keyword">lambda</span> n: <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(n(f)(x))</span><br></pre></td></tr></table></figure><p>这个函数接受一个参数 <code>n</code>（也就是上面被定义的 0，1，2 等等），返回一个函数，这个函数在 <code>n</code> 的基础上多执行了一次 <code>f</code>，达到了求 <code>n</code> 的后继的目的。</p><p>现在让我们忘记 1 的定义，用 0 和后继重新定义一次：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">zero = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: x</span><br><span class="line">succ = <span class="keyword">lambda</span> n: <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(n(f)(x))</span><br><span class="line"></span><br><span class="line">one = succ(zero)</span><br><span class="line">    = (<span class="keyword">lambda</span> n: <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(n(f)(x)))(<span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: x)</span><br><span class="line">    = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(((<span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: x)(f))(x))</span><br><span class="line">    = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f((<span class="keyword">lambda</span> x: x)(x))</span><br><span class="line">    = <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(x)</span><br></pre></td></tr></table></figure><p>和我们预想的完全一致。</p><h3 id="加法">加法</h3><p>接下来试着定义一下加法，加法是两个数相加返回一个数（也就是说，加法是定义在自然数上的幺半群），所以签名长这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add = <span class="keyword">lambda</span> m: <span class="keyword">lambda</span> n: <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: ...</span><br></pre></td></tr></table></figure><p>函数体呢？我们推广一下后继函数：后继函数在<code>n</code>的基础上多调用了一次 <code>f</code>，相当于 <code>+1</code>；那加法相当于 <code>+m</code>，也就是多调用 <code>m</code> 次 <code>f</code>，于是可以得出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add = <span class="keyword">lambda</span> m: <span class="keyword">lambda</span> n: <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: m(f)(n(f)(x))</span><br></pre></td></tr></table></figure><h3 id="乘法">乘法</h3><p>乘法的签名也是一样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mul = <span class="keyword">lambda</span> m: <span class="keyword">lambda</span> n: <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: ...</span><br></pre></td></tr></table></figure><p>我们都知道乘法是从加法推广而来的：<code>m * n</code> 相当于加 <code>m</code> 次 <code>n</code>，所以可以使用加法的定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mul = <span class="keyword">lambda</span> m: <span class="keyword">lambda</span> n: <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: m(add(n))(zero)(f)(x)</span><br></pre></td></tr></table></figure><p>上面的写法正确，不过太丑了，可以化简为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mul = <span class="keyword">lambda</span> m: <span class="keyword">lambda</span> n: <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: m(n(f))(x)</span><br></pre></td></tr></table></figure><h3 id="求幂">求幂</h3><p>求幂的签名也一样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pow = <span class="keyword">lambda</span> m: <span class="keyword">lambda</span> n: <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: ...</span><br></pre></td></tr></table></figure><p>求幂是由乘法推广而来的：m<sup>n</sup> 相当于乘 <code>n</code> 次 <code>m</code>，所以可以使用乘法的定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pow = <span class="keyword">lambda</span> m: <span class="keyword">lambda</span> n: <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: n(mul(m))(one)(f)(x)</span><br></pre></td></tr></table></figure><p>同样可以化简为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pow = <span class="keyword">lambda</span> m: <span class="keyword">lambda</span> n: <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: n(m)(f)(x)</span><br></pre></td></tr></table></figure><h2 id="结语">结语</h2><p>机智的同学一定发现我们并没有实现减法，这是因为减法的实现太复杂了。至于为什么减法的实现很复杂，以及如何实现减法，这里有一篇<a href="http://gettingsharper.de/2012/08/30/lambda-calculus-subtraction-is-hard/" target="_blank" rel="noopener">参考资料</a> ，有兴趣的话可以自行了解一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;不想写 Python 了，这次换个主题：丘奇计数，又名 lambda 演算的自然数表示法。&lt;/p&gt;
&lt;h2 id=&quot;什么是-lambda-演算&quot;&gt;什么是 lambda 演算&lt;/h2&gt;
&lt;p&gt;lambda 演算（也称为 λ
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TensorFLow 基础（1）</title>
    <link href="http://weafteam.github.io/posts/466eca41/"/>
    <id>http://weafteam.github.io/posts/466eca41/</id>
    <published>2018-04-05T02:13:07.000Z</published>
    <updated>2018-08-28T03:33:10.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tensorflow-基础1">TensorFLow 基础（1）</h1><p>hi,又和大家见面了，上一次我们讲了建立模型步骤和一些基础的概念（Tensor、Placeholder），那么我们这次就继续我们的矩阵操作，因为在TensorFlow处理一些数学问题的时候，往往都是通过矩阵来存储数据，通过特定的矩阵运算，我们实现数据的处理，从而得到一些数据的特性。还有一些其他的Tensorflow的概念，我希望大家能坚持下去，只要将这些基础的概念学会，那么以后运用TensorFlow就会得心应手。</p><ol type="1"><li>和TensorFlow一起工作的Matrices</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵和矩阵操作</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line">ops.reset_default_graph()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">identity_matrix = tf.diag([<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1</span>])</span><br><span class="line">print(sess.run(identity_matrix)) <span class="comment">#注意这个地方，如果是TensorFlow的Tensor，</span></span><br><span class="line"><span class="comment"># 那么使用sess的run方法才能将结果显示</span></span><br><span class="line"><span class="comment"># 或者下面这种方式</span></span><br><span class="line">print(identity_matrix.eval(session = sess))</span><br><span class="line">A = tf.truncated_normal([<span class="number">2</span>, <span class="number">3</span>]) <span class="comment"># 2 * 3 大小 均值0 方差为1.</span></span><br><span class="line">print(sess.run(A))</span><br><span class="line">B = tf.fill([<span class="number">2</span>, <span class="number">3</span>], <span class="number">5.</span>) <span class="comment"># 2 * 3 使用5.填充</span></span><br><span class="line">print(sess.run(B))</span><br><span class="line">C = tf.random_uniform([<span class="number">3</span>, <span class="number">2</span>]) <span class="comment"># 3 * 2 随机初始化</span></span><br><span class="line">print(sess.run(C))</span><br><span class="line">D = tf.convert_to_tensor(np.array([[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>], [<span class="number">-3.</span>, <span class="number">-7.</span>, <span class="number">-1.</span>], [<span class="number">0.</span>, <span class="number">5.</span>, <span class="number">-2.</span>]]))</span><br><span class="line">print(sess.run(D))</span><br><span class="line"></span><br><span class="line">print(sess.run(A+B)) <span class="comment"># 加法和 tf.add() 一样</span></span><br><span class="line">print(sess.run(B-B)) <span class="comment"># 减法和 tf.subtract() 一样</span></span><br><span class="line">print(sess.run(tf.matmul(B, identity_matrix))) <span class="comment"># 矩阵乘法</span></span><br><span class="line">print(sess.run(tf.transpose(C))) <span class="comment"># 矩阵转置</span></span><br><span class="line">print(sess.run(tf.matrix_determinant(D)))  <span class="comment"># 计算行列式</span></span><br><span class="line">print(sess.run(tf.matrix_inverse(D))) <span class="comment"># 矩阵的逆</span></span><br><span class="line">print(sess.run(tf.cholesky(identity_matrix))) <span class="comment"># cholesk分解（平方根分解）</span></span><br><span class="line"></span><br><span class="line">eigenvalues, eigenvectors = sess.run(tf.self_adjoint_eig(D)) <span class="comment"># 求特征向量和特征值</span></span><br><span class="line">print(eigenvalues)</span><br><span class="line">print(eigenvectors)</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>Math Operation（数学操作）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line">ops.reset_default_graph()</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"><span class="comment"># math operation</span></span><br><span class="line">print(sess.run(tf.div(<span class="number">3</span>, <span class="number">4</span>)))</span><br><span class="line">print(sess.run(tf.truediv(<span class="number">3</span>, <span class="number">4</span>)))</span><br><span class="line">print(sess.run(tf.floordiv(<span class="number">3.</span>, <span class="number">4.</span>)))</span><br><span class="line">print(sess.run(tf.mod(<span class="number">22.</span>, <span class="number">5.</span>)))</span><br><span class="line">print(sess.run(tf.cross([<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>], [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>])))</span><br><span class="line"><span class="comment"># Trig operation</span></span><br><span class="line">print(sess.run(tf.sin(<span class="number">3.1416</span>)))</span><br><span class="line">print(sess.run(tf.cos(<span class="number">3.1416</span>)))</span><br><span class="line">print(sess.run(tf.div(tf.sin(<span class="number">3.1416</span> / <span class="number">4.</span>), tf.cos(<span class="number">3.1416</span> / <span class="number">4.</span>))))</span><br><span class="line"><span class="comment"># custom operation</span></span><br><span class="line"><span class="comment"># f(x) = 3 * x^2 - X + 10</span></span><br><span class="line"></span><br><span class="line">test_nums = range(<span class="number">15</span>) <span class="comment"># 生成一个list</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom_polynomial</span><span class="params">(x_val)</span>:</span></span><br><span class="line"><span class="keyword">return</span> (tf.subtract(<span class="number">3</span> * tf.square(x_val), x_val) + <span class="number">10</span>)</span><br><span class="line">print(sess.run(custom_polynomial(<span class="number">11</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># list expend</span></span><br><span class="line">expected_output = [<span class="number">3</span> * x * x - x + <span class="number">10</span> <span class="keyword">for</span> x <span class="keyword">in</span> test_nums]</span><br><span class="line">print(expected_output)</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> test_nums:</span><br><span class="line">    print(sess.run(custom_polynomial(num)))</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>Activation Function（激活函数）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 激活函数主要是为了让神经网络模型具有非线性的特性</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line">ops.reset_default_graph()</span><br><span class="line">sess = tf.Session()</span><br><span class="line">x_vals = np.linspace(start = <span class="number">-10</span>, stop = <span class="number">10</span>, num = <span class="number">100</span>)</span><br><span class="line"><span class="comment"># Relu Activation-&gt; max(0, x)</span></span><br><span class="line">print(sess.run(tf.nn.relu([<span class="number">-3.</span>, <span class="number">3.</span>, <span class="number">10.</span>])))</span><br><span class="line">y_relu = sess.run(tf.nn.relu(x_vals))</span><br><span class="line"><span class="comment"># Relu6 Activation-&gt; min(max(x, 0), 6)</span></span><br><span class="line">print(sess.run(tf.nn.relu6([<span class="number">-3.</span>, <span class="number">3.</span>, <span class="number">10.</span>])))</span><br><span class="line">y_relu6 = sess.run(tf.nn.relu6(x_vals))</span><br><span class="line"><span class="comment"># Sigmoidactivation-&gt; 见公式1</span></span><br><span class="line">print(sess.run(tf.nn.sigmoid([<span class="number">-1.</span>, <span class="number">0.</span>, <span class="number">1.</span>])))</span><br><span class="line">y_sigmoid = sess.run(tf.nn.sigmoid(x_vals))</span><br><span class="line"><span class="comment"># Hyper Tangent activation-&gt;见公式2</span></span><br><span class="line">print(sess.run(tf.nn.tanh([<span class="number">-1.</span>, <span class="number">0.</span>, <span class="number">1.</span>])))</span><br><span class="line">y_tanh = sess.run(tf.nn.tanh(x_vals))</span><br><span class="line"><span class="comment"># softsign activation-&gt;见公式3</span></span><br><span class="line">print(sess.run(tf.nn.softsign([<span class="number">-1.</span>, <span class="number">0.</span>, <span class="number">1.</span>])))</span><br><span class="line">y_softsign = sess.run(tf.nn.softsign(x_vals))</span><br><span class="line"><span class="comment"># softplus activation-&gt;见公式4</span></span><br><span class="line">print(sess.run(tf.nn.softplus([<span class="number">-1.</span>, <span class="number">0.</span>, <span class="number">1.</span>])))</span><br><span class="line">y_softplus = sess.run(tf.nn.softplus(x_vals))</span><br><span class="line"><span class="comment"># Exponential linear activation-&gt;见公式5</span></span><br><span class="line">print(sess.run(tf.nn.elu([<span class="number">-1.</span>, <span class="number">0.</span>, <span class="number">1.</span>])))</span><br><span class="line">y_elu = sess.run(tf.nn.elu(x_vals))</span><br><span class="line"></span><br><span class="line">plt.plot(x_vals, y_softplus, <span class="string">'r--'</span>, label=<span class="string">'Softplus'</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">plt.plot(x_vals, y_relu, <span class="string">'b:'</span>, label=<span class="string">'ReLU'</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">plt.plot(x_vals, y_relu6, <span class="string">'g-.'</span>, label=<span class="string">'ReLU6'</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">plt.plot(x_vals, y_elu, <span class="string">'k-'</span>, label=<span class="string">'ExpLU'</span>, linewidth=<span class="number">0.5</span>)</span><br><span class="line">plt.ylim([<span class="number">-1.5</span>,<span class="number">7</span>])</span><br><span class="line">plt.legend(loc=<span class="string">'upper left'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">plt.plot(x_vals, y_sigmoid, <span class="string">'r--'</span>, label=<span class="string">'Sigmoid'</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">plt.plot(x_vals, y_tanh, <span class="string">'b:'</span>, label=<span class="string">'Tanh'</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">plt.plot(x_vals, y_softsign, <span class="string">'g-.'</span>, label=<span class="string">'Softsign'</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">plt.ylim([<span class="number">-2</span>,<span class="number">2</span>])</span><br><span class="line">plt.legend(loc=<span class="string">'upper left'</span>)</span><br><span class="line">plt.show()</span><br><span class="line">下图给出激活函数的曲线图</span><br></pre></td></tr></table></figure><blockquote><p>公式1：</p></blockquote><p><span class="math display">\[\sigma(x)=\frac{1}{1+e^{-x}}\]</span></p><blockquote><p>公式2：</p></blockquote><p><span class="math display">\[f(x)=\frac{e^x-e^{-x}}{e^x + e^{-x}}\]</span></p><blockquote><p>公式3：</p></blockquote><p><span class="math display">\[f(x) = \frac{1}{1 + |x|}\]</span></p><blockquote><p>公式4</p></blockquote><p><span class="math display">\[f(x) = \log(1 + e^x)\]</span></p><blockquote><p>公式5：</p></blockquote><p><span class="math display">\[elu(x) = \begin{cases} x &amp; x &gt; 0 \\\alpha(exp(x) - 1) &amp; x \leq 0\end{cases}\]</span></p><p><img src="https://s1.ax1x.com/2018/04/05/CC9wN9.png" alt="-"></p><p><img src="https://s1.ax1x.com/2018/04/05/CC90hR.png" alt="-"></p><ol start="4" type="1"><li>Operations on a Computational Graph</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line">ops.reset_default_graph()</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建的数据是要喂给下面的placeholder的</span></span><br><span class="line">x_vals = np.array([<span class="number">1.</span>, <span class="number">3.</span>, <span class="number">5.</span>, <span class="number">7.</span>, <span class="number">9.</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建placeholder</span></span><br><span class="line">x_data = tf.placeholder(tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个乘数</span></span><br><span class="line">m = tf.constant(<span class="number">3.</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法</span></span><br><span class="line">prod = tf.multiply(x_data, m)</span><br><span class="line"><span class="keyword">for</span> x_val <span class="keyword">in</span> x_vals:</span><br><span class="line">    print(sess.run(prod, feed_dict = &#123;x_data: x_val&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">#下面将数据计算图输出到文件里面，供我们后来启动tensorboard使用</span></span><br><span class="line">merged = tf.summary.merge_all(key = <span class="string">'summary'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'tensorboard_logs/'</span>):</span><br><span class="line">    os.makedirs(<span class="string">'tensorboard_logs/'</span>)</span><br><span class="line"></span><br><span class="line">my_writer = tf.summary.FileWriter(<span class="string">'./tensorboard_logs/'</span>, sess.graph)</span><br></pre></td></tr></table></figure><ol start="5" type="1"><li>Layering Nested Operations</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line"></span><br><span class="line">ops.reset_default_graph()</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据为了feed</span></span><br><span class="line">my_array = np.array([[<span class="number">1.</span>, <span class="number">3.</span>, <span class="number">5.</span>, <span class="number">7.</span>, <span class="number">9.</span>],</span><br><span class="line">                    [<span class="number">-2.</span>, <span class="number">0.</span>, <span class="number">2.</span>, <span class="number">4.</span>, <span class="number">6.</span>],</span><br><span class="line">                    [<span class="number">-6.</span>, <span class="number">-3.</span>, <span class="number">0.</span>, <span class="number">3.</span>, <span class="number">6.</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制</span></span><br><span class="line">x_vals = np.array([my_array, my_array + <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明placeholder</span></span><br><span class="line">x_data = tf.placeholder(tf.float32, shape = [<span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明常数来操作</span></span><br><span class="line">m1 = tf.constant([[<span class="number">1.</span>], [<span class="number">0.</span>], [<span class="number">-1.</span>], [<span class="number">2.</span>], [<span class="number">4</span>]])</span><br><span class="line">m2 = tf.constant([[<span class="number">2.</span>]])</span><br><span class="line">a1 = tf.constant([[<span class="number">10.</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明操作</span></span><br><span class="line">prod1 = tf.matmul(x_data, m1)</span><br><span class="line">prod2 = tf.matmul(prod1, m2)</span><br><span class="line">add1 = tf.matmul(prod2, a1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印验证结果</span></span><br><span class="line"><span class="keyword">for</span> x_val <span class="keyword">in</span> x_vals:</span><br><span class="line">    print(sess.run(add1, feed_dict = &#123;x_data: x_val&#125;))</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#下面将数据计算图输出到文件里面，供我们后来启动tensorboard使用</span></span><br><span class="line">merged = tf.summary.merge_all(key = <span class="string">'summaries'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'tensorboard_logs/'</span>):</span><br><span class="line">    os.makedirs(<span class="string">'tensorflow_logs/'</span>)</span><br><span class="line">my_writer = tf.summary.FileWriter(<span class="string">'tensorboard_logs/'</span>, sess.graph)</span><br><span class="line"><span class="comment">#下图就是在操作过程中，tensorflow建立的图运算模型</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/04/05/CCkFQ1.png" alt="-"></p><ol start="6" type="1"><li>Working With Multiple Layers</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line"></span><br><span class="line">ops.reset_default_graph()</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line">x_shape = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># 定义一个4 * 4 大小的随机矩阵</span></span><br><span class="line">x_val = np.randim.uniform(size = x_shape)</span><br><span class="line"></span><br><span class="line">x_data = tf.placeholder(tf.float32, shape = x_shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个空间移动窗口，也就是卷积操作的卷积核</span></span><br><span class="line"><span class="comment"># 大小是2 * 2， 步长是 2</span></span><br><span class="line"><span class="comment"># filter的值是一个固定的值0.25</span></span><br><span class="line">my_filter = tf.constant(<span class="number">0.25</span>, shape = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line">my_strides = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">mov_avg_layer = tf.nn.conv2d(x_data, my_filter, my_strides, padding = <span class="string">'SAME'</span>, name = <span class="string">'Moving_Avg_Window'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二层</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom_layer</span><span class="params">(input_matrix)</span>:</span></span><br><span class="line">    input_matrix_sqeezed = tf.squeeze(input_matrix)</span><br><span class="line">    A = tf.constant([<span class="number">1.</span>, <span class="number">2.</span>], [<span class="number">-1.</span>, <span class="number">3.</span>])</span><br><span class="line">    b = tf.constant(<span class="number">1.</span>, shape = [<span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line">    output = tf.add(tf.matmul(A, input_matrix_sqeezed), b)</span><br><span class="line">    <span class="keyword">return</span> tf.nn.relu(output)</span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'custom_layer'</span>) <span class="keyword">as</span> scope:</span><br><span class="line">    custom_layer1 = custom_layer(mov_avg_layer)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">print(sess.run(mov_avg_layer, feed_dict = &#123;x_data: x_val&#125;))</span><br><span class="line"></span><br><span class="line">print(sess.run(custom_layer1, feed_dict = &#123;x_data: x_val&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">#下面将数据计算图输出到文件里面，供我们后来启动tensorboard使用</span></span><br><span class="line">merged = tf.summary.merge_all(key = <span class="string">'summaries'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'tensorboard_logs/'</span>):</span><br><span class="line">    os.makedirs(<span class="string">'tensorboard_logs/'</span>)</span><br><span class="line">my_writer = tf.summary.FileWriter(<span class="string">'tensorboard_logs'</span>, sess.graph)</span><br><span class="line"><span class="comment"># 下图是计算图</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/04/05/CCksmV.png" alt="-"></p><p>总结：这一次，一开始主要讲了矩阵的一些操作，后续又进行了数学操作，激活函数，运算图、层内元素嵌套运算还有最好的多层运算，并给出了tensorboard的计算图结构。大家不仅仅要看一看，也要动手做一做哦。</p><p>一如既往的有什么问题可以直接联系milittle，air@weaf.top邮箱</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;tensorflow-基础1&quot;&gt;TensorFLow
        
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/categories/TensorFlow/"/>
    
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>Nginx和Git的离线安装</title>
    <link href="http://weafteam.github.io/posts/a86291b8/"/>
    <id>http://weafteam.github.io/posts/a86291b8/</id>
    <published>2018-04-01T04:07:12.000Z</published>
    <updated>2018-05-29T01:27:49.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一准备工作">一、准备工作</h1><p>一般情况下为了确保安装没有任何问题，我们先使用有网络环境的下安装的方法，去检测当前机器具体需要安装什么冬天链接库，然后按照提示缺失的库去下载相应的库。 我们按照正常的流程，去解压nginx <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.13.8.tar.gz</span><br></pre></td></tr></table></figure></p><p>进入解压后的目录执行 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.13.8</span><br><span class="line">./configure</span><br></pre></td></tr></table></figure></p><p>出现以下错误： <img src="http://us-forever.com/img/nginxerror.png"></p><p>我们按照有网络环境的方法去检测缺失的库及其版本。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ autoconf automake make</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>显示如下： <img src="http://us-forever.com/img/liberror.png"></p><p>我们下载号相应的库 下边提供几个下载的网址：</p><ul><li><a href="http://mirrors.163.com/centos/6/os/x86_64/Packages/" class="uri" target="_blank" rel="noopener">http://mirrors.163.com/centos/6/os/x86_64/Packages/</a></li><li><a href="http://rpmfind.net/" class="uri" target="_blank" rel="noopener">http://rpmfind.net/</a></li><li><a href="https://pkgs.org" class="uri" target="_blank" rel="noopener">https://pkgs.org</a></li></ul><p>下边是下载好的库 <img src="http://us-forever.com/img/gcclib.png"> 安装相应的库（<strong>集体安装情况具体分析</strong>）： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mpfr-2.4.1-6.el6.x86_64.rpm</span><br><span class="line">rpm -ivh cpp-4.4.7-18.el6.x86_64.rpm</span><br><span class="line">rpm -Uvh tzdata-2016j-1.el6.noarch.rpm</span><br><span class="line">rpm -Uvh glibc-common-2.12-1.209.el6.x86_64.rpm glibc-2.12-1.209.el6.x86_64.rpm glibc-headers-2.12-1.209.el6.x86_64.rpm glibc-devel-2.12-1.209.el6.x86_64.rpm kernel-headers-2.6.32-696.el6.x86_64.rpm</span><br><span class="line">rpm -ivh libgomp-4.4.7-18.el6.x86_64.rpm</span><br><span class="line">rpm -Uvh libstdc++-4.4.7-18.el6.x86_64.rpm</span><br><span class="line">rpm -ivh libstdc++-devel-4.4.7-18.el6.x86_64.rpm</span><br><span class="line">rpm -ivh ppl-0.10.2-11.el6.x86_64.rpm</span><br><span class="line">rpm -ivh cloog-ppl-0.15.7-1.2.el6.x86_64.rpm</span><br><span class="line">rpm -Uvh libgcc-4.4.7-18.el6.x86_64.rpm</span><br><span class="line">rpm -ivh gcc-4.4.7-18.el6.x86_64.rpm</span><br><span class="line">rpm -ivh gcc-c++-4.4.7-18.el6.x86_64.rpm</span><br><span class="line">rpm -ivh automake-1.11.1-4.el6.noarch.rpm autoconf-2.63-5.1.el6.noarch.rpm</span><br></pre></td></tr></table></figure></p><p>然后执行./configure 发现错误： <img src="http://us-forever.com/img/nginxerror1.png"> 然后安装一下库 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rpm -Uvh pcre-7.8-7.el6.x86_64.rpm</span><br><span class="line">rpm -ivh pcre-devel-7.8-7.el6.x86_64.rpm</span><br><span class="line">rpm -Uvh zlib-1.2.3-29.el6.x86_64.rpm</span><br><span class="line">rpm -ivh zlib-devel-1.2.3-29.el6.x86_64.rpm</span><br><span class="line">rpm -i --force --nodeps krb5-devel-1.10.3-65.el6.x86_64.rpm</span><br><span class="line">rpm -Uvh openssl-1.0.1e-57.el6.x86_64.rpm</span><br><span class="line">rpm -ivh openssl-devel-1.0.1e-57.el6.x86_64.rpm</span><br></pre></td></tr></table></figure></p><p>然后执行 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>安装完成 二、查看版本信息 ===== 根据安装完成的信息查看nginx. 三、简介 —– 不同操作系统的Linux的安装可能不太一样。 本教程使用的是CentOS或者RHEL。 四、准备环境 —- 如果有网络的情况下肯定相当容易： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker</span><br><span class="line"></span><br><span class="line">yum install git</span><br></pre></td></tr></table></figure></p><p>若果yum源安装的版本较低，不执行<strong>yum install git</strong>命令，并按照四、五步骤操作。 如果是离线需要完成后续操作： 首先我们需要到官网下载相应的安装包 <a href="https://www.kernel.org/pub/software/scm/git/" class="uri" target="_blank" rel="noopener">https://www.kernel.org/pub/software/scm/git/</a> 选择<strong>tar.gz</strong> 三、下载和安装依赖 —— 然后最麻烦的地方就是依赖动态链接库的下载。 需要下载的库可以到这两个网站上去找： <a href="http://www.rpmfind.net/linux/RPM/index.html" target="_blank" rel="noopener">fr2.rpmfind.net</a> <a href="https://pkgs.org/" target="_blank" rel="noopener">Linux Packages Search-pkgs.org</a> 我这里提供了一些 <!--more--> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cpio-2.11-24.el7.x86_64.rpm</span><br><span class="line">curl-7.29.0-42.el7.x86_64.rpm</span><br><span class="line">expat-2.1.0-10.el7_3.x86_64.rpm</span><br><span class="line">expat-devel-2.1.0-10.el7_3.x86_64.rpm</span><br><span class="line">gdbm-devel-1.10-8.el7.x86_64.rpm</span><br><span class="line">gettext-0.19.8.1-2.el7.x86_64.rpm</span><br><span class="line">gettext-devel-0.19.8.1-2.el7.x86_64.rpm</span><br><span class="line">krb5-devel-1.15.1-8.el7.x86_64.rpm</span><br><span class="line">libcurl-7.29.0-42.el7.x86_64.rpm</span><br><span class="line">libcurl-devel-7.29.0-42.el7.x86_64.rpm</span><br><span class="line">libdb-devel-5.3.21-20.el7.x86_64.rpm</span><br><span class="line">openssl-1.0.2k-8.el7.x86_64.rpm</span><br><span class="line">openssl-devel-1.0.2k-8.el7.x86_64.rpm</span><br><span class="line">perl-5.16.3-292.el7.x86_64.rpm</span><br><span class="line">perl-devel-5.16.3-292.el7.x86_64.rpm</span><br><span class="line">perl-ExtUtils-CBuilder-0.28.2.6-292.el7.noarch.rpm</span><br><span class="line">perl-ExtUtils-Install-1.58-292.el7.noarch.rpm</span><br><span class="line">perl-ExtUtils-MakeMaker-6.68-3.el7.noarch.rpm</span><br><span class="line">perl-ExtUtils-Manifest-1.61-244.el7.noarch.rpm</span><br><span class="line">perl-ExtUtils-ParseXS-3.18-3.el7.noarch.rpm</span><br><span class="line">systemtap-sdt-devel-3.1-3.el7.x86_64.rpm</span><br><span class="line">zlib-1.2.7-17.el7.x86_64.rpm</span><br><span class="line">zlib-devel-1.2.7-17.el7.x86_64.rpm</span><br></pre></td></tr></table></figure></p><p>这是git需要的一些库，需要安装的不是很多，但是安装的库也需要依赖。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh perl-5.16.3-292.el7.x86_64.rpm</span><br><span class="line">rpm -ivh perl-devel-5.16.3-292.el7.x86_64.rpm</span><br><span class="line">rpm -ivh zlib-devel-1.2.7-17.el7.x86_64.rpm</span><br><span class="line">rpm -ivh libcurl-devel-7.29.0-42.el7.x86_64.rpm</span><br><span class="line">rpm -ivh curl-7.29.0-42.el7.x86_64.rpm</span><br><span class="line">rpm -ivh zlib-devel-1.2.7-17.el7.x86_64.rpm</span><br><span class="line">rpm -ivh openssl-devel-1.0.2k-8.el7.x86_64.rpm</span><br><span class="line">rpm -ivh perl-ExtUtils-MakeMaker-6.68-3.el7.noarch.rpm</span><br><span class="line">rpm -ivh gettext-devel-0.19.8.1-2.el7.x86_64.rpm</span><br></pre></td></tr></table></figure></p><p>以上库需要安装，并需要安装对应依赖。 有时候有些包可能互相依赖，安装时可使用一下命令 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh perl-ExtUtils-MakeMaker-6.68-3.el7.noarch.rpm perl-ExtUtils-Install-1.58-292.el7.noarch.rpm zlib-devel-1.2.7-17.el7.x86_64.rpm</span><br></pre></td></tr></table></figure></p><p>编译安装可能需要的包 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh cloog-ppl-0.15.7-1.2.el6.x86_64.rpm</span><br><span class="line">rpm -ivh cpp-4.4.7-18.el6.x86_64.rpm</span><br><span class="line">rpm -ivh gcc-4.4.7-18.el6.x86_64.rpm</span><br><span class="line">rpm -ivh gcc-c++-4.4.7-18.el6.x86_64.rpm</span><br><span class="line">rpm -ivh libgcc-4.4.7-18.el6.x86_64.rpm</span><br><span class="line">rpm -ivh libgomp-4.4.7-18.el6.x86_64.rpm</span><br><span class="line">rpm -ivh libstdc++-4.4.7-18.el6.x86_64.rpm</span><br><span class="line">rpm -ivh libstdc++-devel-4.4.7-18.el6.x86_64.rpm</span><br><span class="line">rpm -ivh mpfr-2.4.1-6.el6.x86_64.rpm</span><br><span class="line">rpm -ivh ppl-0.10.2-11.el6.x86_64.rpm</span><br></pre></td></tr></table></figure></p><p>有时会发生冲突可以使用枪支卸载，或者不考虑依赖安装。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpm -e  --nodeps mariadb-libs-5.5.56-2.el7.x86_64</span><br><span class="line">//强制卸载</span><br><span class="line"></span><br><span class="line">rpm -i --force --nodeps krb5-devel-1.15.1-8.el7.x86_64.rpm</span><br><span class="line">//强制安装 --force可选</span><br></pre></td></tr></table></figure></p><h2 id="五解压和安装">五、解压和安装</h2><p>解压安装包 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf git-2.15.1.tar.gz</span><br></pre></td></tr></table></figure></p><p>进入解压后的文件夹 <img src="http://us-forever.com/img/git-1.png"> 执行一下命令 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure></p><p>检查没有任何出错 <img src="http://us-forever.com/img/git-2.png"> 然后执行以下命令进行编译 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></p><p>检查没有问题执行安装 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>检查没有任何出错 <img src="http://us-forever.com/img/git-4.png"> 六、查看安装结果 —-</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p><img src="http://us-forever.com/img/git-5.png"></p>]]></content>
    
    <summary type="html">
    
      Nginx和Git的离线安装
    
    </summary>
    
      <category term="Linux" scheme="http://weafteam.github.io/categories/Linux/"/>
    
    
      <category term="Linux运维" scheme="http://weafteam.github.io/tags/Linux%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow建立网络模型详解</title>
    <link href="http://weafteam.github.io/posts/5b7df854/"/>
    <id>http://weafteam.github.io/posts/5b7df854/</id>
    <published>2018-03-31T10:23:35.000Z</published>
    <updated>2018-08-28T03:32:56.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tensorflow-建立网络模型">TensorFlow 建立网络模型</h1><p>上次一我们在fashion-mnist上面体验了一把，但是里面有一些建立模型和一些TensorFlow的基础概念都没有给大家讲，所以这节决定将这方面的知识介绍一些，上节是为了引起大家的注意，TensorFlow具有很强大的功能，我们只能后续慢慢的学习。</p><ol type="1"><li>其实在上一次的实例中，有很多地方确实是很困惑的，如果没有接触过机器学习的小伙伴可能理解起来会有一些问题，那么我开头就稍微讲一下，机器学习有一些什么？就我现在了解的一些内容给大家介绍，有可能有一些不到位的地方，还请多多包涵：</li></ol><blockquote><ul><li>其实机器学习，总的宗旨就是利用数据的特征来做识别和分类等任务</li><li>第一大类是分类工作，假设有一百类，经典的做法，就是使用神经网络提取一些数据的特征，然后利用softmax输出层进行不同种类概率的预测：</li></ul></blockquote><p><span class="math display">\[softmax(i) = \frac{X_i}{\sum_{i=0,99}X_i}\]</span></p><blockquote><ul><li>上面是softmax层计算的公式，从一百类里面找出每一类的概率值，然后按照概率值来预测输入数据是哪一种类型，就像上一次文章里面的fashion-mnist的数据一样，会预测出输出的类别。softmax(i)代表的就是这个种类的概率值，取最大值作为预测类别。</li><li>你可以把一个矩阵看成一个数据集合，一行是一个数据信息，就和我们的关系型数据一样，一行代表一个表的一条信息，那么每列就是每一行数据的一个属性，那么在机器学习里面就是数据的特征了，因为在网络模型中，每个特征都有对应的权重，那么，对于每个特征来说，对于最后的分类，识别等工作起的重要程度是不一样的。这也和我们的数据库信息差不多，有一些信息也是无关紧要的。有些信息可以主要决定这一行数据。</li><li>第二大类就是回归，回归可以看作是一个连续的分类，对于二维数据来说，其实就是根据你给出的数据来拟合一条线。对于三维来讲就是拟合一个平面。再高维就是超平面。</li></ul></blockquote><ol start="2" type="1"><li>最近，也就是2018年3月31在加利福尼亚州山景城的计算机历史博物馆举办了第二届TensorFlow开发者峰会，会上有超过500名使用TensorFlow的用户，还有一些观众，大家有兴趣的话可以关注youtube的TensorFlow官方频道。可以查看开会的视频。</li></ol><ul><li>TensorFlow应用广泛，其中有使用TensorFlow来做开普勒任务分析的</li><li>也有使用TensorFlow预测心脏发作和中风概率</li><li>还有一些应用在现实当中的项目。</li><li>这让我们认识到TensorFlow对于实际领域中应用的越来越广泛，所以我们不学习是不是有点亏。这么好的开源项目。</li></ul><ol start="3" type="1"><li>上一次我们既然做过了一次服装类别识别，那么这次我主要从TensorFlow建立模型的步骤讲起：让大家再深入理解一下TensorFlow。</li></ol><ul><li>第一步也是很重要的一步，那就是导入数据。</li><li>第二步一般就是对数据进行的预处理，一般包括归一化数据，转换数据等操作。</li><li>第三步设置算法的超参数，一般也就是学习率，batch_size(批处理个数)，epoch(轮次)。这里举一个例子，假如你有10000条训练数据。那么，batch_size设置为100，那么你的一个epoch就迭代100次才能将所有数据训练一遍，每次输入数据是100条，因为一个epoch的意思就是训练完一次训练数据，所以一个epoch是迭代100次就可以结束一轮了。learning_rate一般设置为0.1-0.0001之间，但是也不排除一些特殊情况，主要是learning_rate设置的过小，反向传播更新参数的时候速度会很慢，设置的过大，会出现无法收敛的情况。</li><li>第四步设置变量和placeholders，变量是记录权重和偏置项信息的，一般在最小化loss函数的时候，反向传播算法会更新权重和偏置项，TensorFlow导入数据是通过placeholders来实现的，大家还记得我们上次的fashion-mnist识别，我的数据就是通过先定义placeholders，最后在Session运行的时候，在feed_dict这个字典参数里面将训练数据喂进去的。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a_var = tf.constant(<span class="number">42</span>)</span><br><span class="line">x_input = tf.placeholder(tf.float32, [n_x, <span class="keyword">None</span>], name=<span class="string">"X"</span>)</span><br><span class="line">x_output = tf.placeholder(tf.float32, [n_y, <span class="keyword">None</span>], name=<span class="string">"y"</span>)</span><br><span class="line"><span class="comment"># 定义输入数据的一些方式</span></span><br></pre></td></tr></table></figure><ul><li>第五步定义图模型，我们有了数据，初始化了变量和placeholders，那我们就需要定义一个图模型，来生成TensorFlow的图模型（计算图）我们必须告诉TensorFlow对我们的数据进行哪些操作，来让我们的模型具有预测能力（更加深入的运算我们在后续的博客里面会陆续讲到）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h_pre_output = tf.add(tf.matmul(W, x_input) + B)</span><br></pre></td></tr></table></figure><ul><li>第六步声明loss函数，在上面计算图中我们定义了一些对我们数据的操作。那么我们需要验证我们预测的输出，和我们真实之间的差距，一般对于回归任务来讲的话，就是平方误差：这样就求得了平方误差。但是对于分类任务，那就是交叉熵误差。就像上一节我们用到的loss生成函数就是softmax这种方式。，交叉熵的公式后续用到再给大家介绍。</li></ul><p><span class="math display">\[loss(i)=\frac{1}{N}\sum{_i}(y\_pre_i-y\_true_i)^2\]</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TensorFlow求法：</span><br><span class="line">loss = tf.reduce_mean(tf.square(y_pre - y_true))</span><br></pre></td></tr></table></figure><ul><li>第七步声明了loss函数以后，我们需要使用BP算法也就是反向传播算法来更新权重和偏置项。在TenorFlow框架里面有好多这样的优化器，都在 tf.train这个模块里面。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">optimizer = tf.train.AdamOptimizer(learning_rate = <span class="number">0.001</span>).minimize(loss)</span><br><span class="line">这个就是我们上次使用的优化器，来优化我们的loss</span><br></pre></td></tr></table></figure><ul><li>最后一步那就是初始化会话Session()，开始训练模型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> session:</span><br><span class="line">session.run(init)</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>由上面的步骤，大家再结合上一次的网络代码，是不是可以理解了TensorFlow在建立一个网络模型的时候的具体步骤。</li><li>其实在TensorFlow中还有一个很重要的概念，那就是Tensor，上次说过了它的概念，那么接下来我讲一下TensorFlow里面的Tensor。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line">ops.reset_default_graph()</span><br><span class="line"><span class="comment"># 定义一个会话，记得，TensorFlow里面都是通过session来执行的</span></span><br><span class="line">sess = tf.Session()</span><br><span class="line"><span class="comment"># 创建一个1 * 20的向量</span></span><br><span class="line">tensor_zeros = tf.zeros([<span class="number">1</span>, <span class="number">20</span>])</span><br><span class="line">sess.run(tensor_zeros) <span class="comment"># 你可以运行一下看看</span></span><br><span class="line">my_var = tf.Variable(tf.zeros([<span class="number">1</span>, <span class="number">20</span>])) <span class="comment"># 使用tenso来初始化变量</span></span><br><span class="line">sess.run(my_var.initializer) <span class="comment"># 又一种运行变量初始化器的方式</span></span><br><span class="line">sess.run(my_var) <span class="comment">#打印出来看看</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tf.ones() 生成全是1</span></span><br><span class="line"><span class="comment"># tf.zeros() 生成全是0</span></span><br><span class="line"><span class="comment"># tf.constant() 生成一个常量Tensor</span></span><br><span class="line"><span class="comment"># 如果我们想要通过一个已知的Tensor来创建另一个，则可以使用ones_like()和zeros_like()这两个函数</span></span><br><span class="line">zero_similar = tf.Variable(tf.zeros_like(tensor_zeros))</span><br><span class="line"></span><br><span class="line">sess.run(zero_similar.initializer)</span><br><span class="line">print(sess.run(zero_similar))</span><br><span class="line"><span class="comment"># 注意上面的两个函数的参数是为了确定生成Tensor的大小，而产生的值是通过函数决定的</span></span><br><span class="line">tf.fill([row, col], <span class="number">-1</span>)  <span class="comment"># 用具体的数字填充</span></span><br><span class="line">tf.linspace(start=<span class="number">0.0</span>, stop=<span class="number">1.0</span>, num=<span class="number">3</span>) <span class="comment"># 线性分布 包括end</span></span><br><span class="line">tf.range(start=<span class="number">6</span>, limit=<span class="number">15</span>, delta=<span class="number">3</span>)    <span class="comment"># 也是线性均匀 不包括end</span></span><br><span class="line">tf.random_normal([row_dim, col_dim], mean=<span class="number">0.0</span>, stddev=<span class="number">1.0</span>) <span class="comment"># 随机 均值0 方差1.0</span></span><br><span class="line">tf.random_uniform([row_dim, col_dim], minval=<span class="number">0</span>, maxval=<span class="number">4</span>) <span class="comment"># 或者最小最大值随机初始化</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.python.framework <span class="keyword">import</span> ops</span><br><span class="line">ops.reset_default_graph()</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"></span><br><span class="line">my_var = tf.Variable(tf.zeros([<span class="number">1</span>,<span class="number">20</span>]))</span><br><span class="line"></span><br><span class="line">merged = tf.summary.merge_all()</span><br><span class="line"></span><br><span class="line">writer = tf.summary.FileWriter(<span class="string">"./tmp/variable_logs"</span>, graph=sess.graph)</span><br><span class="line"></span><br><span class="line">initialize_op = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line">sess.run(initialize_op)</span><br><span class="line"><span class="comment"># 上面的就是一个Tensor放在一个变量里面，我们使用了一条语句 merged = tf.summary.merge_all() 还有writer = tf.summary.FileWriter("/tmp/variable_logs", graph=sess.graph)，这两句这是为了将变量在TensorBoard里面显示出来，让我们更加了解TensorFLow的一些操作。</span></span><br><span class="line"><span class="comment"># 上面的操作过程会在当前文件夹里面创建一个/tmp/variable_logs文件夹然后会将变量信息存储在一个文件里面</span></span><br></pre></td></tr></table></figure><ol start="6" type="1"><li>那怎么使用tensorboard</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#进去我们的环境变量，然后执行</span><br><span class="line">tensorboard --logdir=tmp的绝对路径</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/04/01/9zF2P1.png" alt="-"></p><p>可以看到我上面执行的命令。然后在浏览器里面输入127.0.0.1:6006然后你就可以看到刚才那个变量的操作过程，这就是tensorboard的魅力</p><p><img src="https://s1.ax1x.com/2018/04/01/9zF7ad.png" alt="-"></p><p>上面就是一个变量在进行初始化时候可视化显示</p><ol start="7" type="1"><li>Placeholders使用(一样可以使用tensorboard来查看)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import tensorflow as tf</span><br><span class="line">from tensorflow.python.framework import ops</span><br><span class="line">ops.reset_default_graph()</span><br><span class="line">sess = tf.Session()</span><br><span class="line"># 定义一个placeholder</span><br><span class="line">x = tf.placeholder(tf.float32, shape = (4, 4))</span><br><span class="line"></span><br><span class="line"># 随机生成4 * 4的矩阵</span><br><span class="line">reand_array = np.random.rand(4, 4)</span><br><span class="line">y = tf.identity(x) # 返回与输入对象相同的内容和大小</span><br><span class="line">print(sess.run(y, feed_dict=&#123;x: rand_array&#125;))</span><br><span class="line"></span><br><span class="line">merged = tf.summary.merge_all()</span><br><span class="line">writer = tf.summary.FileWriter(&quot;./tmp/variable_logs&quot;, sess.graph)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/04/01/9zAshR.png" alt="-"></p><h5 id="总结">总结</h5><p>这次我们就TensorFlow的一些基础概念的介绍，也是为了让大家在以后的TensorFlow使用过程中少一些疑问，后面的章节，我们会慢慢深入。小伙伴们不要着急，我的邮箱是air@weaf.top，依旧是那个可以交流学习的milittle。谢谢大家的驻足。</p><p><a href="https://weaf.top/posts/8e8e4531/" target="_blank" rel="noopener">第一篇 TensorFlow安装</a></p><p><a href="https://weaf.top/posts/b0821049/" target="_blank" rel="noopener">第二篇 TensorFlow初体验（fasion-mnist识别）</a></p><p><a href="https://weaf.top/posts/233074e6/" target="_blank" rel="noopener">修改pip全局镜像方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;tensorflow-建立网络模型&quot;&gt;TensorFlow
        
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/categories/TensorFlow/"/>
    
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>文本聚类系列教程：（三）构建词袋空间VSM（Vector Space Model）</title>
    <link href="http://weafteam.github.io/posts/a751f7e5/"/>
    <id>http://weafteam.github.io/posts/a751f7e5/</id>
    <published>2018-03-30T06:00:08.000Z</published>
    <updated>2018-05-29T01:27:49.814Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>咱们今天先聊个概念吧，著名的聚类假设，这也是文本聚类的依据，内容如下：该假设认为，同类的文档相似度较大，而不同类的文档相似度较小。</p></blockquote><hr><h1 id="概念">概念：</h1><p>对于上述概念，也就是做文本聚类的基础，如果不相关的文档反而相似度高，我们便无法做文本聚类。</p><p>接下来再说VSM(Vector Space Model),对于VSM的定义，我在网上搜罗了些资料，如下所示：</p><p>Vector space model (or term vector model) is an algebraic model for representing text documents (and any objects, in general) as vectors of identifiers, such as, for example, index terms. It is used in information filtering, information retrieval, indexing and relevancy rankings. Its first use was in the SMART Information Retrieval System.</p><p>A document is represented as a vector. Each dimension corresponds to a separate term. If a term occurs in the document, its value in the vector is non-zero. Several different ways of computing these values, also known as (term) weights, have been developed. One of the best known schemes is tf-idf weighting.</p><p>The definition of term depends on the application. Typically terms are single words, keywords, or longer phrases. If the words are chosen to be the terms, the dimensionality of the vector is the number of words in the vocabulary (the number of distinct words occurring in the corpus).</p><p><strong>拙劣的翻译：</strong></p><p>向量空间模型是用来表示文本文档（通常也包含一些对象）的特征向量的代数模型，例如索引词项。它被应用于信息过滤、信息检索、索引和相关度计算。这个模型最早被应用于SMART信息检索系统。</p><p>一个文本文档表示一个向量。每一个维度相当于一个单独的词项（term）。如果一个词项（term）出现在一个文档中，那么它在表示该文档的向量中对应项不为0.有一些计算这些词项（term）权重的方法被逐渐提出来，其中最著名的方法就是tf-idf权重计算方法。</p><p>对于词项（term）的定义依赖于应用。一般而言，词项（term）可以是单词、关键字、或者长短语。如果单词作为词项（term），那么向量中的维度就是词汇表中的单词的个数（出现在文档全集中所有不同的单词的数量）。</p><p><strong>小荔枝：</strong></p><p>举个荔枝吧 ，方便理解上述的概念。首先假设有这样两个文本</p><p>1.<code>我来到北京清华大学</code></p><p>2.<code>他来到了网易杭研大厦</code></p><p>分词结果为：<code>我/来到/北京/清华大学</code>和<code>他/来到/了/网易/杭研/大厦</code>统计所有文档的词集合：<code>我/来到/北京/清华大学/他/了/网易/杭研/大厦</code>，按照1983停用词去除停用词后结果为：<code>来到/北京/清华大学/网易/杭研/大厦</code></p><p>我们对这两个文本构建向量，结果如下</p><table><thead><tr class="header"><th></th><th>来到</th><th>北京</th><th>清华大学</th><th>网易</th><th>杭研</th><th>大厦</th></tr></thead><tbody><tr class="odd"><td>文本1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr class="even"><td>文本2</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>相信你已经对VSM的认识有了一个大致的轮廓，但是细心的你也可能发现了，我们在上述的例子中计算term值的方法仅仅只是计数，这样的term值是否有意义呢？我们是否能用这样的方法直接进行接下来的计算呢？对于前一个问题，答案是肯定的。不管在此基础上做什么样的改进，我们最基础的就是统计单词出现的次数，那就让我们先把上述的代码实现一下吧(与该文件同目录下有个名为txt1的文件夹，里面有1.txt和2.txt两个文件，内容分别是上述所说的两个文档，我们在上次RmStopWord.py的基础上再做修改)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line">d = path.dirname(__file__) <span class="comment"># 获取当前文件的dir路径</span></span><br><span class="line">stopwords_path = <span class="string">'stopwords1893.txt'</span>  <span class="comment"># 停用词表路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#text = open(path.join(d, text_path),'rb').read()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_from_file</span><span class="params">(file_name)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(file_name,<span class="string">"r"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        words = fp.read()</span><br><span class="line">    <span class="keyword">return</span> words</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RmStopWords</span><span class="params">(text)</span>:</span></span><br><span class="line">    mywordlist = []</span><br><span class="line">    seg_list = jieba.cut(text, cut_all=<span class="keyword">False</span>)</span><br><span class="line">    liststr=<span class="string">"/ "</span>.join(seg_list) <span class="comment"># 添加切分符</span></span><br><span class="line">    f_stop = open(stopwords_path)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f_stop_text = f_stop.read()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f_stop.close( )</span><br><span class="line">    f_stop_seg_list=f_stop_text.split(<span class="string">'\n'</span>) <span class="comment"># 停用词是每行一个，所以用/n分离</span></span><br><span class="line">    <span class="keyword">for</span> myword <span class="keyword">in</span> liststr.split(<span class="string">'/'</span>):</span><br><span class="line">        <span class="comment">#对于每个切分的词都去停用词表中对比</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span>(myword.strip() <span class="keyword">in</span> f_stop_seg_list) <span class="keyword">and</span> len(myword.strip())&gt;<span class="number">1</span>:</span><br><span class="line">            mywordlist.append(myword)</span><br><span class="line">    <span class="keyword">return</span> mywordlist</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_all_vector</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    names = [ os.path.join(file_path,f) <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(file_path) ]</span><br><span class="line">    txts = [ open(name).read() <span class="keyword">for</span> name <span class="keyword">in</span> names]</span><br><span class="line">    docs = []</span><br><span class="line">    word_set = set()</span><br><span class="line">    <span class="keyword">for</span> txt <span class="keyword">in</span> txts:</span><br><span class="line">        doc = RmStopWords(txt)</span><br><span class="line">        docs.append(doc)</span><br><span class="line">        word_set |= set(doc)</span><br><span class="line">        </span><br><span class="line">    word_set = list(word_set)</span><br><span class="line">    docs_vsm = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里只是想显示有多少term</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> word_set[:<span class="number">30</span>]:</span><br><span class="line">        print(word)</span><br><span class="line">    <span class="keyword">for</span> doc <span class="keyword">in</span> docs:</span><br><span class="line">        temp_vector = []</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> word_set:</span><br><span class="line">            temp_vector.append(doc.count(word) * <span class="number">1.0</span>)</span><br><span class="line">        docs_vsm.append(temp_vector)</span><br><span class="line">    docs_matrix = np.array(docs_vsm)</span><br><span class="line">    <span class="keyword">return</span> docs_matrix</span><br><span class="line">    </span><br><span class="line"><span class="comment"># txt2 = RmStopWords(read_from_file(text1_path))</span></span><br><span class="line"><span class="comment"># print(txt2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件路径为txt1/1.txt和2.txt，只不过我让程序循环扫描txt1下所有的文本文件</span></span><br><span class="line">txt3 = get_all_vector(<span class="string">'txt1'</span>)</span><br><span class="line">print(txt3)</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><a href="https://imgchr.com/i/9x712t" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/03/31/9x712t.png" alt="vsmResult.png"></a></p><p><strong>分析：</strong></p><p>上述结果不言而喻，那么我们接着讨论，显而易见，我既然提出了第二个疑问就一定有它被提出的道理，仅仅只计算term值的方法显然存在问题，我们再随便举个例子，文本1中<code>北京</code>只出现了1次，但是文本1中只有3个单词，文本2中<code>北京</code>出现了10次但是文本2中有1000个单词，那我们用上述的方法显然不合适。所以接下来我们便要讲一个最著名的方法tf-idf计算权值的方法。</p><h1 id="tf-idfterm-frequencyinverse-document-frequency">TF-IDF(term frequency–inverse document frequency)</h1><p>维基百科和百度百科上的讲的很清楚，这里截取概念方便大家阅读，更详细的内容请参考前面所说的两个百科。</p><p><strong>TF-IDF是一种统计方法，用以评估一个词(term)对于一个文件集或者一个语料库中的一份文件的重要程度。一个词(term)的重要性随着它在文件中出现的次数成正比增加，但同时会随着它在语料库中出现的频率成反比下降。</strong></p><p><strong>原理：</strong></p><p>TF-IDF的主要思想是：如果某个词或短语(term)在一篇文章中出现的频率TF高，并且在其他文章中很少出现，则认为此词或者短语(term)具有很好的类别区分能力，适合用来分类。如果包含词条term的文档越少，也就是n越小，则IDF越大，则说明词条term也具有很好的类别区分能力。</p><p><strong>思考：</strong></p><p>现在想一下我们刚才提出的问题，针对我们上述的问题：同一词语在长文件里可能会比短文件有更高的词数，而不管该词重要与否。那么我们对词数做归一化就可以了，而TF就帮我们做了这样的事。那么我们就先给出TF的运算公式吧。</p><p><span class="math inline">\(tf_i,_j = \frac{n_i,_j}{\sum_k n_k,_j}\)</span></p><p>TF公式解读：上式中分子是该词在文件中出现的次数，而分母则是该词在文件中出现的词数之和。</p><p><strong>我们再讲个小问题：</strong></p><p>如果某一类文档C中包含词条t的文档数为m，而其他类包含t的文档总数为k，显然所有包含t的文档数n=m+k，而当m变大的时候，n也变大，这是后按照IDF的计算方法计算得到的IDF值会变小，也就相对应的说明该词条t类别区分能力不强。但是实际上，如果一个词条在一个类的文件中频繁出现，则说明该词条能够很好的代表这个类的文本的特征，这样的词条应该给它们赋予较高的权重，并选来作为该类文本的特征词以区别与其它类文档。<strong>其实这就是IDF的不足</strong>。</p><p>针对这个问题，我的想法是TF-IDF用来做信息检索和数据挖掘，为了获取更精准的效果，我们宁愿忽略这样不足来换取更加理想的效果（也就是TF-IDF计算出更大的权值）。（这里我的理解是这样的，如果有人有更好的解释，欢迎与我进行讨论，邮箱：well@weaf.top）</p><p>那么接下来就该给出IDF的计算公式了：</p><p><span class="math inline">\(idf(t,D) = log(\frac{N}{\lvert {d \in D, t \in d}\rvert})\)</span></p><p>IDF公式解读：</p><p>|D|：语料库中文件的总数</p><p>分子为包含该词条t的文件数目，如果该词条不在语料库中，就会导致分母为零，因此一般使用1。</p><p>那就接着我们上述代码，运用TF-IDF，把对应的矩阵的单纯计数转换成权值计算吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">···</span><br><span class="line"></span><br><span class="line">def get_all_vector(file_path):</span><br><span class="line">    names = [ os.path.join(file_path,f) for f in os.listdir(file_path) ]</span><br><span class="line">    posts = [ open(name).read() for name in names]</span><br><span class="line">    docs = []</span><br><span class="line">    word_set = set()</span><br><span class="line">    for post in posts:</span><br><span class="line">        doc = RmStopWords(post)</span><br><span class="line">        docs.append(doc)</span><br><span class="line">        word_set |= set(doc)</span><br><span class="line"></span><br><span class="line">    word_set = list(word_set)</span><br><span class="line">    docs_vsm = []</span><br><span class="line">    for word in word_set[:30]:</span><br><span class="line">        print(word)</span><br><span class="line">    for doc in docs:</span><br><span class="line">        temp_vector = []</span><br><span class="line">        for word in word_set:</span><br><span class="line">            temp_vector.append(doc.count(word) * 1.0)</span><br><span class="line">        docs_vsm.append(temp_vector)</span><br><span class="line">    docs_matrix = np.array(docs_vsm)</span><br><span class="line">    #return docs_matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    column_sum = [ float(len(np.nonzero(docs_matrix[:,i])[0])) for i in range(docs_matrix.shape[1]) ]</span><br><span class="line">    column_sum = np.array(column_sum)</span><br><span class="line">    column_sum = docs_matrix.shape[0] / column_sum</span><br><span class="line">    </span><br><span class="line">idf =  np.log(column_sum)</span><br><span class="line">    idf =  np.diag(idf)</span><br><span class="line">    </span><br><span class="line">i = 0    </span><br><span class="line">    for doc_v in docs_matrix:    </span><br><span class="line">        if doc_v.sum() == 0:</span><br><span class="line">            docs_matrix[i] = docs_matrix[i]/1</span><br><span class="line">        else:</span><br><span class="line">            docs_matrix[i] = docs_matrix[i] / (doc_v.sum())</span><br><span class="line">        i+=1</span><br><span class="line">    </span><br><span class="line">tfidf = np.dot(docs_matrix,idf)</span><br><span class="line">    return names,tfidf</span><br><span class="line"></span><br><span class="line">txt3 = get_all_vector(&apos;txt1&apos;)</span><br><span class="line">print(txt3)</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><p><img src="https://i.loli.net/2018/04/14/5ad1988749e40.png" alt="tfidfResult.png"></p><p>本次的学习会用到很多numpy的知识，请大家自行查阅。如有兴趣，请思考为什么在新的权值矩阵中“来到”一词的权重变成了0。感谢大家的阅读~</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;咱们今天先聊个概念吧，著名的聚类假设，这也是文本聚类的依据，内容如下：该假设认为，同类的文档相似度较大，而不同类的文档相似度较小。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1
        
      
    
    </summary>
    
      <category term="文本聚类" scheme="http://weafteam.github.io/categories/%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/"/>
    
    
      <category term="文本聚类" scheme="http://weafteam.github.io/tags/%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>修改pip全局镜像</title>
    <link href="http://weafteam.github.io/posts/233074e6/"/>
    <id>http://weafteam.github.io/posts/233074e6/</id>
    <published>2018-03-27T12:29:36.000Z</published>
    <updated>2018-05-29T01:27:49.802Z</updated>
    
    <content type="html"><![CDATA[<h3 id="修改pip全局镜像">修改pip全局镜像</h3><p>第一次我们在windows上面安装了Anaconda，在使用pip安装Tensorflow中速度过慢，所以我为大家介绍一中修改全局pip源的方法（这样在使用pip下载依赖库的时候就会快一些）：</p><ol type="1"><li>打开用户主目录：我的是<code>C:\Users\milittle</code>。</li><li>在里面新建pip文件夹，在pip文件夹中建立pip.ini文件。</li><li>在pip.ini文件中添加如下配置信息，我使用的豆瓣源：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout = 6000</span><br><span class="line">index-url = https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>最后的目录结构就是：<code>C:\Users\milittle\pip\pip.ini</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3
        
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/categories/TensorFlow/"/>
    
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>如何理解描述符</title>
    <link href="http://weafteam.github.io/posts/5dd0238f/"/>
    <id>http://weafteam.github.io/posts/5dd0238f/</id>
    <published>2018-03-25T15:52:32.000Z</published>
    <updated>2018-08-07T08:56:41.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>上篇文章中挖了 property 和描述符的坑，这篇就把它填上好了_(:з)∠)_</p><p>property 是用描述符实现的，所以先说说 property。</p><h2 id="property">property</h2><p>property 本身是一个实现了描述符协议的类，在不改变类接口的情况下，提供了一组对实例属性的读取、写入和删除操作。下面举个例子，一个银行账户的抽象，很容易实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, balance)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.balance = balance</span><br></pre></td></tr></table></figure><p>银行账户最常见的操作就是存款和取款了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: account = Account(<span class="string">'zhang'</span>, <span class="number">100</span>)  <span class="comment"># 创建一个有 100 块存款的账户</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: account.balance</span><br><span class="line">Out[<span class="number">2</span>]: <span class="number">100</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: account.balance -= <span class="number">90</span>  <span class="comment"># 取 90 块</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: account.balance  <span class="comment"># 还剩 10 块</span></span><br><span class="line">Out[<span class="number">4</span>]: <span class="number">10</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: account.balance += <span class="number">30</span>  <span class="comment"># 存 30 块</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: account.balance  <span class="comment"># 现在有 40 块</span></span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">40</span></span><br></pre></td></tr></table></figure><p>但是这里有个问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: account.balance -= <span class="number">50</span>  <span class="comment"># 再取 50 块</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: account.balance  <span class="comment"># 存款变成了负数！</span></span><br><span class="line">Out[<span class="number">8</span>]: <span class="number">-10</span></span><br></pre></td></tr></table></figure><p>当然这种操作是不该被允许的，我们需要对 <code>balance</code> 的写入做限制。Jawa 之类的语言会创建一组 getter、setter 方法来管理属性，但是这并不 Python，也对现有的代码不友好。正确的方式是使用 property。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, balance)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.balance = balance</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balance</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._balance</span><br><span class="line"></span><br><span class="line"><span class="meta">    @balance.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balance</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'balance must greater than 0.'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._balance = value</span><br></pre></td></tr></table></figure><p>现在 <code>balance</code> 被禁止设为小于 0 的数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: account = Account(<span class="string">'zhang'</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: account.balance</span><br><span class="line">Out[<span class="number">2</span>]: <span class="number">100</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: account.balance += <span class="number">40</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: account.balance -= <span class="number">200</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">...</span><br><span class="line">ValueError: balance must greater than <span class="number">0.</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: account.balance</span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">140</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: account = Account(<span class="string">'zhang'</span>, <span class="number">-1</span>)  <span class="comment"># 初始化的时候也不行！</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">...</span><br><span class="line">ValueError: balance must greater than <span class="number">0.</span></span><br></pre></td></tr></table></figure><p>可以看到我们使用 <code>balance</code> 的方式没有发生变化，但是对值的限制已经生效了。</p><p>property 还有一个 <code>deleter</code> 装饰器，处理应用于属性的 <code>del</code>；当然，<code>del</code> 本身用的也不多，大多数时候把销毁操作交给 Python 就可以了。不过如果涉及到复杂对象的引用，要做到 RAII（误，还是要手动实现的。</p><h3 id="property-是类">property 是类</h3><p>property 本身是用 C 实现的，<a href="https://docs.python.org/3/howto/descriptor.html#properties" target="_blank" rel="noopener">这里</a>有一个纯 Python 的实现。正如上文所说，它本身是一个类，构造方法的签名如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">property</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fget=None, fset=None, fdel=None, doc=None)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>熟悉一点装饰器用法的话就可以看出上面的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balance</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>实际上就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_balance</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    balance = property(fget=get_balance)</span><br></pre></td></tr></table></figure><p>如果不熟悉的话，下一篇就讲装饰器好了（误</p><h3 id="property-的实例是类属性">property 的实例是类属性</h3><p>上面的代码段同时展示了这样一个事实：property 的实例是类属性。这就涉及到了属性查找顺序的问题，简单试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    data = <span class="string">'data!'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'bar!'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: f = Foo()</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: f.data</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'data!'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: f.data = <span class="string">'f.data!'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: f.data</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'f.data!'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: Foo.data</span><br><span class="line">Out[<span class="number">5</span>]: <span class="string">'data!'</span></span><br></pre></td></tr></table></figure><p>实例属性覆盖了类属性，符合直觉。那么对 property 的实例来说呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: f.bar</span><br><span class="line">Out[<span class="number">6</span>]: <span class="string">'bar!'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: f.bar = <span class="string">'bar'</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">AttributeError                            Traceback (most recent call last)</span><br><span class="line">...</span><br><span class="line">AttributeError: can<span class="string">'t set attribute</span></span><br></pre></td></tr></table></figure><p>尝试给 <code>bar</code> 赋值，失败了，也符合 property 的工作方式：执行赋值时，如果没有 setter 方法就抛出异常。那么直接修改 <code>f.__dict__</code> 呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">8</span>]: f.__dict__[<span class="string">'bar'</span>] = <span class="string">'bar'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: f.bar</span><br><span class="line">Out[<span class="number">9</span>]: <span class="string">'bar!'</span></span><br></pre></td></tr></table></figure><p>也不行，property 的实例完全覆盖了实例属性。但是，它是一个类属性，所以我们可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: Foo.bar</span><br><span class="line">Out[<span class="number">10</span>]: &lt;property at <span class="number">0x29c44800408</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: Foo.bar = <span class="string">'bar'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: f.bar</span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'bar'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: f.bar = <span class="string">'ba'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: f.bar</span><br><span class="line">Out[<span class="number">14</span>]: <span class="string">'ba'</span></span><br></pre></td></tr></table></figure><p>对类属性的覆盖使 <code>bar</code> 不再是一个 property 的实例，所以也就不会覆盖后续的赋值了。</p><p>当然我们仍然可以用一个 property 的实例再次覆盖 <code>Foo.bar</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">15</span>]: Foo.bar = property(fget=<span class="keyword">lambda</span> self: <span class="string">'bar!'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: f.bar</span><br><span class="line">Out[<span class="number">16</span>]: <span class="string">'bar!'</span></span><br></pre></td></tr></table></figure><p>恢复原样。 property 的实例这种先从类中开始属性查找的方式，是一类描述符的工作模式。接下来就说说描述符。</p><h2 id="描述符">描述符</h2><p>描述符是指实现了描述符协议的类，这个协议包含四个方法，分别是 <code>__get__</code>，<code>__set__</code>，<code>__delete__</code> 和 Python 3.6 新增的 <code>__set_name__</code>。通常，只要实现了 <code>__get__</code> 或 <code>__set__</code>，就可以被称之为描述符。在某个角度上说，描述符的作用相当于抽象的 property，可以为一组属性提供相同的读取、写入和删除逻辑。接下来，还是从数据验证的例子开始。</p><p>下面是商店中一项商品的抽象，包含商品名、数量和单价：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>:</span></span><br><span class="line">    amount = Storage(<span class="string">'amount'</span>)</span><br><span class="line">    price = Storage(<span class="string">'price'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, amount, price)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.amount = amount</span><br><span class="line">        self.price = price</span><br></pre></td></tr></table></figure><p>其中的 <code>amount</code> 和 <code>price</code> 都必须大于 0，所以可以用统一的描述符实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Storage</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> value &gt; <span class="number">0</span>:</span><br><span class="line">            instance.__dict__[self.name] = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">f'<span class="subst">&#123;self.name&#125;</span> must greater than 0.'</span>)</span><br></pre></td></tr></table></figure><p>由于我们并没有对读取方法有特别的需求，所以不用实现 <code>__get__</code> 方法。</p><p>试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: item = Item(<span class="string">'orange'</span>, <span class="number">100</span>, <span class="number">0</span>)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">...</span><br><span class="line">ValueError: price must greater than <span class="number">0.</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: item = Item(<span class="string">'orange'</span>, <span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">...</span><br><span class="line">ValueError: amount must greater than <span class="number">0.</span></span><br></pre></td></tr></table></figure><p>如果 <code>amount</code> 或 <code>price</code> 中的任何一个不大于 0，都会被禁止。</p><p>这里需要解释一下 <code>__set__</code> 的签名中的 <code>instance</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>instance</code> 是 <code>Item</code> 的实例。因为描述符应该管理实例的属性，所以需要额外的参数提供相应的实例。这也是为什么我们不能这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">    self.__dict__[self.name] = value</span><br></pre></td></tr></table></figure><p>这实际上是为描述符实例设置了值，而描述符实例是<code>Item</code> 类的类属性，所有的 <code>Item</code> 实例都共享相同的描述符实例。修改了某个描述符实例，相当于修改了所有的 <code>Item</code> 实例。</p><p>上面的例子有个缺点，初始化描述符实例的时候需要重复属性的名字。我们希望可以简单的写成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span>:</span></span><br><span class="line">    amount = Storage()</span><br><span class="line">    price = Storage()</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>而不需要在描述符的构造方法中重复属性名。这就是 Python 3.6 新增的 <code>__set_name__</code> 方法的作用。只要实现 <code>__set_name__</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Storage</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set_name__</span><span class="params">(self, owner, name)</span>:</span></span><br><span class="line">        self.name = name</span><br></pre></td></tr></table></figure><p>同样解释一下函数签名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__set_name__</span><span class="params">(self, owner, name)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>owner</code> 是 <code>Item</code> 类本身，<code>name</code> 是引用描述符实例的变量的名字。</p><p>如果使用的 Python 版本在 3.6 以下呢？有两个方法：第一个是用元类接管<code>Item</code>类的创建过程，这个不在这篇文章的内容之内（可能又挖了一个坑；第二个就是为每个描述符实例生成与属性名无关但是唯一字符串，用来代替属性名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Storage</span>:</span></span><br><span class="line"></span><br><span class="line">    _counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        cls = self.__class__</span><br><span class="line">        self.name = <span class="string">f'_<span class="subst">&#123;cls.__name__&#125;</span>#<span class="subst">&#123;cls._counter&#125;</span>'</span></span><br><span class="line">        cls._counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> getattr(instance, self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> value &gt; <span class="number">0</span>:</span><br><span class="line">            setattr(instance, self.name, value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'must greater than 0.'</span>)</span><br></pre></td></tr></table></figure><p>由于 <code>Item</code> 中的属性名和我们实际保存的属性名不同，所以需要实现 <code>__get__</code> 方法。与 <code>__set_name__</code> 签名中的 <code>owner</code> 含义相同，<code>__get__</code> 方法签名中的 <code>owner</code> 也是 <code>Item</code> 类本身。</p><p>现在，我们使用 <code>_Storage#N</code> 这样的名称在 <code>Item</code> 实例中保存属性。当然，这样的名称会让人有点困惑，特别是以类属性访问的时候：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: Item.amount</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">AttributeError                            Traceback (most recent call last)</span><br><span class="line">...</span><br><span class="line">AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'_Storage#0'</span></span><br></pre></td></tr></table></figure><p>为了避免在如此明显的地方暴露我们的实现细节，我们可以修改异常的错误消息，或者，内省描述符实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> getattr(instance, self.name)</span><br></pre></td></tr></table></figure><h3 id="两类描述符">两类描述符</h3><p>上述例子中对数据属性的控制和管理是描述符的典型用途之一。这种实现了 <code>__set__</code> 方法，接管了设置属性行为的描述符，被称为覆盖型描述符，没有定义 <code>__set__</code> 方法的描述符，被称为非覆盖型描述符。由于 Python 中对实例属性和类属性的处理方式不同，这两类描述符也有不同的行为。</p><h4 id="覆盖型描述符">覆盖型描述符</h4><p>实现了 <code>__set__</code> 方法的描述符就是覆盖型描述符。这类描述符虽然是类属性，但是会覆盖实例属性的赋值操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Override</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print(<span class="string">'get!'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        print(<span class="string">'set!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span>:</span></span><br><span class="line"></span><br><span class="line">    override = Override()</span><br></pre></td></tr></table></figure><p>下面做一些实验：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: m = Manager()</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: m.override</span><br><span class="line">get!</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: m.override = <span class="number">1</span></span><br><span class="line">set!</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: Manager.override</span><br><span class="line">get!</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: m.__dict__[<span class="string">'override'</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: m.__dict__</span><br><span class="line">Out[<span class="number">6</span>]: &#123;<span class="string">'override'</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: m.override</span><br><span class="line">get!</span><br></pre></td></tr></table></figure><p>可以看出，无论以实例属性还是类属性访问 <code>override</code>，都会触发 <code>__get__</code> 方法；为实例属性 <code>override</code> 赋值会触发 <code>__set__</code> 方法；即使跳过描述符直接为 <code>m.__dict__</code> 赋值，读取 <code>override</code> 的操作仍然会被描述符覆盖。</p><h5 id="没有-__get__-方法的覆盖型描述符">没有 <code>__get__</code> 方法的覆盖型描述符</h5><p>如果只实现了 <code>__set__</code> 会发生什么呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OverrideNoGet</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        print(<span class="string">'set!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span>:</span></span><br><span class="line"></span><br><span class="line">    override_no_get = OverrideNoGet()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: m = Manager()</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: m.override_no_get</span><br><span class="line">Out[<span class="number">2</span>]: &lt;__main__.OverrideNoGet at <span class="number">0x29c44a97668</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: Manager.override_no_get</span><br><span class="line">Out[<span class="number">3</span>]: &lt;__main__.OverrideNoGet at <span class="number">0x29c44a97668</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: m.override_no_get = <span class="number">1</span></span><br><span class="line">set!</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: m.override_no_get</span><br><span class="line">Out[<span class="number">5</span>]: &lt;__main__.OverrideNoGet at <span class="number">0x29c44a97668</span>&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: m.__dict__[<span class="string">'override_no_get'</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: m.override_no_get</span><br><span class="line">Out[<span class="number">7</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: m.override_no_get = <span class="number">2</span></span><br><span class="line">set!</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: m.override_no_get</span><br><span class="line">Out[<span class="number">9</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure><p>可以看到，没实现 <code>__get__</code> 方法，无论以实例属性还是类属性访问 <code>override_no_get</code>，都会返回描述符实例；而赋值操作可以触发 <code>__set__</code> 方法；由于我们的 <code>__set__</code> 方法并没有真正修改实例属性，所以再次访问 <code>override_no_get</code> 仍然会得到描述符实例；通过 <code>m.__dict__</code> 修改实例属性后，实例属性就会覆盖描述符；不过只有访问实例属性时才是如此，赋值仍然由 <code>__set__</code> 处理。</p><h4 id="非覆盖型描述符">非覆盖型描述符</h4><p>没有实现 <code>__set__</code> 方法的描述符就是非覆盖型描述符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonOverride</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        print(<span class="string">'get!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span>:</span></span><br><span class="line"></span><br><span class="line">    non_override = NonOverride()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: m = Manager()</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: m.non_override</span><br><span class="line">get!</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: Manager.non_override</span><br><span class="line">get!</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: m.non_override = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: m.non_override</span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: Manager.non_override</span><br><span class="line">get!</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: <span class="keyword">del</span> m.non_override</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: m.non_override</span><br><span class="line">get!</span><br></pre></td></tr></table></figure><p>无论访问实例属性还是类属性，都会触发 <code>__get__</code> 方法；由于没有 <code>__set__</code> 方法，对属性的赋值不会被干涉；对属性复制之后，实例属性就会覆盖同名的描述符，但是访问类属性仍然可以触发 <code>__get__</code> 方法；如果把 <code>non_override</code> 从实例中删除，访问 <code>non_override</code> 的操作又会交给 <code>__get__</code>。</p><p>当然，描述符都是定义在类上的，如果对同名的类属性进行赋值，就会完全替换掉描述符。这里表现出读、写属性时的不对等：对类属性的读操作可以被 <code>__get__</code> 处理，但是写操作不会。当然，了解一些 Python 的话就会知道还存在着另一种不对等：读取实例属性时，会返回实例属性，如果实例属性不存在，会返回类属性；但是为实例属性赋值时，如果实例属性不存在，会在实例中创建属性，不会影响到类属性。</p><h2 id="结语">结语</h2><p>描述符充斥在 Python 底层（举个例子：Python 中的方法是怎么实现的？）与各种框架中，理解描述符是体会 Python 世界工作原理和设计美学的重要方式。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;上篇文章中挖了 property 和描述符的坑，这篇就把它填上好了_(:з)∠)_&lt;/p&gt;
&lt;p&gt;property 是用描述符实现的，所以先说说 property。&lt;/p&gt;
&lt;h2
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TensorFlow实现fashion mnist识别</title>
    <link href="http://weafteam.github.io/posts/b0821049/"/>
    <id>http://weafteam.github.io/posts/b0821049/</id>
    <published>2018-03-25T13:18:37.000Z</published>
    <updated>2018-08-28T03:32:44.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tensorflow-初体验fashion-mnist">TensorFlow 初体验（Fashion-mnist）</h1><ol type="1"><li>接着上一讲的内容，想必大家已经通过我的教程安装好了TensorFlow了吧，那我们这节课通过安装简单的跨平台的集成开发环境Spyder，在这个集成开发环境上面实现一些python程序。具体安装过程见如下阐述：</li></ol><ul><li>首先在应用程序里面找到Anaconda应用程序，打开里面的Anaconda Navigator，然后打开以后，选中我们上次建立好的环境tensorflow。</li></ul><p><img src="https://s1.ax1x.com/2018/03/25/9qTXNV.png" alt="-"></p><ul><li>选中tensorflow这个环境变量以后，看到里面有一个集成开发环境叫spyder，这个工具就是今天我们要安装的，我的已经安装好了，所以是Launch，你们的没有安装好，所以是install状态，点解安装就好。（这个地方也可能需要翻墙）。</li><li>这个安装好以后，你就会在应用文件夹里面出现一个Spyder(tensorflow)这个应用程序，以后你就从应用文件夹启动就好。</li><li>那么启动以后：我也是启动了，出现了以下的情况：不慌，慢慢来。</li></ul><p><img src="https://s1.ax1x.com/2018/03/25/9q7njH.png" alt="-"></p><ul><li>看到上面的错误，这个错误提示是因为没有安装jedi这个依赖库，而且要求版本要大于0.9.0。那我们接下来解决一下这个问题。</li></ul><blockquote><p>小插曲，一下就可以解决，具体操作步骤:</p><ol type="1"><li>还是打开上次那个AnacondaPrompt的命令行</li><li>进去以后，执行<code>activate tensorflow</code> 相当于你要在这个环境下面给这个spyder安装这个依赖</li><li>进去以后，执行<code>pip install jedi==0.9.0</code> 就可以了，然后重启spyder（可以直接在这个环境里面输入<code>spyder</code>命令就可以实现spyder的启动，你也可以在应用文件夹里面启动，性质是一样的）</li><li>不出什么意外的话，spyder使用就没有问题了，有什么问题可以发邮件给我！！！</li></ol></blockquote><ul><li>解决了上面的小插曲以后，我们在spyder中输入以下代码进行测试。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">sess = tf.Session()</span><br><span class="line">init = tf.global_variables_initializer() </span><br><span class="line"><span class="comment"># 此处的init是全局变量初始化器，</span></span><br><span class="line"><span class="comment"># TensorFlow的session必须执行这个初始化器才能执行前面建立好的图，</span></span><br><span class="line"><span class="comment"># 所以，这个是很重要的一点，后续也会强调</span></span><br><span class="line"><span class="comment">#（也就是后续再网络中建立变量就是通过那个初始化器来进行初始化工作的）</span></span><br><span class="line"><span class="comment"># 其实在没有变量的时候，这个初始化器是不需要的</span></span><br><span class="line"><span class="comment"># 但是为了让大家形成习惯，还是写上</span></span><br><span class="line">sess.run(init)</span><br><span class="line">hello = tf.constant(<span class="string">'hello world'</span>)</span><br><span class="line">print(sess.run(hello))</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/03/25/9q7r5V.png" alt="-"></p><ul><li>上图中左面是代码书写区域，右面上半部分是变量查看区域，还有文件夹区域可以切换，右面下半部分是执行console区域，我输入上面的代码，执行以后console区域打出hello world字符串。</li></ul><ol start="2" type="1"><li>从上面的一些简单的测试以后，我们进入今天的主题，fashion-minist的识别，fashion-minist是一个服装识别的一个数据集，在这个数据集之前有一个mnist手写体识别数据集，这个手写数据集对应我们手写的十个数字，然后通过设计网络来识别手写体。但是今天我们不做手写体识别，直接来做fashion-minist识别。</li></ol><ul><li>闲话少说，上代码，边写边说。</li></ul><p>首先目标是实现衣服种类的识别。</p><p>数据可以在 <a href="https://github.com/zalandoresearch/fashion-mnist" target="_blank" rel="noopener">Zalando_Fashion_MNIST_repository</a>这个Github仓库获取。</p><p>数据分为60000训练数据和10000测试数据，图片都是灰度图片，大小为28 X 28，总共也是由10类组成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Sun Mar 25 15:16:23 2018</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: milittle</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入一些必要的库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># 数学计算库</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment"># 画图的一个库</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf <span class="comment"># TensorFlow的库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">fashion_mnist = input_data.read_data_sets(<span class="string">'input/data'</span>, one_hot = <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个服装对应表</span></span><br><span class="line">label_dict = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">'T-shirt/top'</span>,</span><br><span class="line">    <span class="number">1</span>: <span class="string">'Trouser'</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">'Pullover'</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="string">'Dress'</span>,</span><br><span class="line">    <span class="number">4</span>: <span class="string">'Coat'</span>,</span><br><span class="line">    <span class="number">5</span>: <span class="string">'Sandal'</span>,</span><br><span class="line">    <span class="number">6</span>: <span class="string">'Shirt'</span>,</span><br><span class="line">    <span class="number">7</span>: <span class="string">'Sneaker'</span>,</span><br><span class="line">    <span class="number">8</span>: <span class="string">'Bag'</span>,</span><br><span class="line">    <span class="number">9</span>: <span class="string">'Ankle boot'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取随机的数据和它的label</span></span><br><span class="line">sample_1 = fashion_mnist.train.images[<span class="number">47</span>].reshape(<span class="number">28</span>,<span class="number">28</span>)</span><br><span class="line">sample_label_1 = np.where(fashion_mnist.train.labels[<span class="number">47</span>] == <span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">sample_2 = fashion_mnist.train.images[<span class="number">23</span>].reshape(<span class="number">28</span>,<span class="number">28</span>)</span><br><span class="line">sample_label_2 = np.where(fashion_mnist.train.labels[<span class="number">23</span>] == <span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用matplot画出这个image和label</span></span><br><span class="line">print(<span class="string">"y = &#123;label_index&#125; (&#123;label&#125;)"</span>.format(label_index=sample_label_1, label=label_dict[sample_label_1]))</span><br><span class="line">plt.imshow(sample_1, cmap=<span class="string">'Greys'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"y = &#123;label_index&#125; (&#123;label&#125;)"</span>.format(label_index=sample_label_2, label=label_dict[sample_label_2]))</span><br><span class="line">plt.imshow(sample_2, cmap=<span class="string">'Greys'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来就是设计网络参数</span></span><br><span class="line">n_hidden_1 = <span class="number">128</span> <span class="comment"># 第一个隐藏层的单元个数</span></span><br><span class="line">n_hidden_2 = <span class="number">128</span> <span class="comment"># 第二个隐藏层的单元个数</span></span><br><span class="line">n_input = <span class="number">784</span> <span class="comment"># fashion mnist输入图片的维度（单元个数） (图片大小: 28*28)</span></span><br><span class="line">n_classes = <span class="number">10</span> <span class="comment"># fashion mnist的种类数目 (0-9 数字)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 placeholders</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_placeholders</span><span class="params">(n_x, n_y)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    为sess创建一个占位对象。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    n_x -- 向量, 图片大小 (28*28 = 784)</span></span><br><span class="line"><span class="string">    n_y -- 向量, 种类数目 (从 0 到 9, 所以是 -&gt; 10种)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    返回参数:</span></span><br><span class="line"><span class="string">    X -- 为输入图片大小的placeholder shape是[784, None] </span></span><br><span class="line"><span class="string">    Y -- 为输出种类大小的placeholder shape是[10, None] None在这里表示以后输入的数据可以任意多少</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    X = tf.placeholder(tf.float32, [n_x, <span class="keyword">None</span>], name=<span class="string">"X"</span>)</span><br><span class="line">    Y = tf.placeholder(tf.float32, [n_y, <span class="keyword">None</span>], name=<span class="string">"Y"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> X, Y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试上面的create_placeholders()</span></span><br><span class="line">X, Y = create_placeholders(n_input, n_classes)</span><br><span class="line">print(<span class="string">"Shape of X: &#123;shape&#125;"</span>.format(shape=X.shape))</span><br><span class="line">print(<span class="string">"Shape of Y: &#123;shape&#125;"</span>.format(shape=Y.shape))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义初始化参数参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_parameters</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    参数初始化，下面是每个参数的shape，总共有三层</span></span><br><span class="line"><span class="string">                        W1 : [n_hidden_1, n_input]</span></span><br><span class="line"><span class="string">                        b1 : [n_hidden_1, 1]</span></span><br><span class="line"><span class="string">                        W2 : [n_hidden_2, n_hidden_1]</span></span><br><span class="line"><span class="string">                        b2 : [n_hidden_2, 1]</span></span><br><span class="line"><span class="string">                        W3 : [n_classes, n_hidden_2]</span></span><br><span class="line"><span class="string">                        b3 : [n_classes, 1]</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    包含所有权重和偏置项的dic</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置随机数种子</span></span><br><span class="line">    tf.set_random_seed(<span class="number">42</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 为每一层的权重和偏置项进行初始化工作</span></span><br><span class="line">    W1 = tf.get_variable(<span class="string">"W1"</span>, [n_hidden_1, n_input], initializer = tf.contrib.layers.xavier_initializer(seed = <span class="number">42</span>))</span><br><span class="line">    b1 = tf.get_variable(<span class="string">"b1"</span>, [n_hidden_1, <span class="number">1</span>], initializer = tf.zeros_initializer())</span><br><span class="line">    </span><br><span class="line">    W2 = tf.get_variable(<span class="string">"W2"</span>, [n_hidden_2, n_hidden_1], initializer = tf.contrib.layers.xavier_initializer(seed = <span class="number">42</span>))</span><br><span class="line">    b2 = tf.get_variable(<span class="string">"b2"</span>, [n_hidden_2, <span class="number">1</span>], initializer = tf.zeros_initializer())</span><br><span class="line">    </span><br><span class="line">    W3 = tf.get_variable(<span class="string">"W3"</span>, [n_classes, n_hidden_2], initializer=tf.contrib.layers.xavier_initializer(seed = <span class="number">42</span>))</span><br><span class="line">    b3 = tf.get_variable(<span class="string">"b3"</span>, [n_classes, <span class="number">1</span>], initializer = tf.zeros_initializer())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将参数存储在一个dict对象里面返回去</span></span><br><span class="line">    parameters = &#123;</span><br><span class="line">        <span class="string">"W1"</span>: W1,</span><br><span class="line">        <span class="string">"b1"</span>: b1,</span><br><span class="line">        <span class="string">"W2"</span>: W2,</span><br><span class="line">        <span class="string">"b2"</span>: b2,</span><br><span class="line">        <span class="string">"W3"</span>: W3,</span><br><span class="line">        <span class="string">"b3"</span>: b3</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> parameters</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试初始化参数</span></span><br><span class="line">tf.reset_default_graph()</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    parameters = initialize_parameters()</span><br><span class="line">    print(<span class="string">"W1 = &#123;w1&#125;"</span>.format(w1=parameters[<span class="string">"W1"</span>]))</span><br><span class="line">    print(<span class="string">"b1 = &#123;b1&#125;"</span>.format(b1=parameters[<span class="string">"b1"</span>]))</span><br><span class="line">    print(<span class="string">"W2 = &#123;w2&#125;"</span>.format(w2=parameters[<span class="string">"W2"</span>]))</span><br><span class="line">    print(<span class="string">"b2 = &#123;b2&#125;"</span>.format(b2=parameters[<span class="string">"b2"</span>]))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 前向传播算法（就是神经网络的前向步骤）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward_propagation</span><span class="params">(X, parameters)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    实现前向传播的模型 LINEAR -&gt; RELU -&gt; LINEAR -&gt; RELU -&gt; LINEAR -&gt; SOFTMAX</span></span><br><span class="line"><span class="string">    上面的显示就是三个线性层，每一层结束以后，实现relu的作用，实现非线性功能，最后三层以后用softmax实现分类</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    X -- 输入训练数据的个数[784, n] 这里的n代表可以一次训练多个数据</span></span><br><span class="line"><span class="string">    parameters -- 包括上面所有的定义参数三个网络中的权重W和偏置项B</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    Z3 -- 最后的一个线性单元输出</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 从参数dict里面取到所有的参数</span></span><br><span class="line">    W1 = parameters[<span class="string">'W1'</span>]</span><br><span class="line">    b1 = parameters[<span class="string">'b1'</span>]</span><br><span class="line">    W2 = parameters[<span class="string">'W2'</span>]</span><br><span class="line">    b2 = parameters[<span class="string">'b2'</span>]</span><br><span class="line">    W3 = parameters[<span class="string">'W3'</span>]</span><br><span class="line">    b3 = parameters[<span class="string">'b3'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 前向传播过程</span></span><br><span class="line">    Z1 = tf.add(tf.matmul(W1,X), b1)     <span class="comment"># Z1 = np.dot(W1, X) + b1</span></span><br><span class="line">    A1 = tf.nn.relu(Z1)                  <span class="comment"># A1 = relu(Z1)</span></span><br><span class="line">    Z2 = tf.add(tf.matmul(W2,A1), b2)    <span class="comment"># Z2 = np.dot(W2, a1) + b2</span></span><br><span class="line">    A2 = tf.nn.relu(Z2)                  <span class="comment"># A2 = relu(Z2)</span></span><br><span class="line">    Z3 = tf.add(tf.matmul(W3,A2), b3)    <span class="comment"># Z3 = np.dot(W3,Z2) + b3</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> Z3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试前向传播喊出</span></span><br><span class="line">tf.reset_default_graph()</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    X, Y = create_placeholders(n_input, n_classes)</span><br><span class="line">    parameters = initialize_parameters()</span><br><span class="line">    Z3 = forward_propagation(X, parameters)</span><br><span class="line">    print(<span class="string">"Z3 = &#123;final_Z&#125;"</span>.format(final_Z=Z3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义计算损失函数</span></span><br><span class="line"><span class="comment"># 是计算loss的时候了</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_cost</span><span class="params">(Z3, Y)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    计算cost</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    Z3 -- 前向传播的最终输出（[10, n]）n也是你输入的训练数据个数</span></span><br><span class="line"><span class="string">    Y -- </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    cost - 损失函数 张量（Tensor）</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获得预测和准确的label</span></span><br><span class="line">    logits = tf.transpose(Z3)</span><br><span class="line">    labels = tf.transpose(Y)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算损失</span></span><br><span class="line">    cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = logits, labels = labels))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cost</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试计算损失函数</span></span><br><span class="line">tf.reset_default_graph()</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    X, Y = create_placeholders(n_input, n_classes)</span><br><span class="line">    parameters = initialize_parameters()</span><br><span class="line">    Z3 = forward_propagation(X, parameters)</span><br><span class="line">    cost = compute_cost(Z3, Y)</span><br><span class="line">    print(<span class="string">"cost = &#123;cost&#125;"</span>.format(cost=cost))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个就是关键了，因为每一层的参数都是通过反向传播来实现权重和偏置项参数更新的</span></span><br><span class="line"><span class="comment"># 总体的原理就是经过前向传播，计算到最后的层，利用softmax加交叉熵，算出网络的损失函数</span></span><br><span class="line"><span class="comment"># 然后对损失函数进行求偏导，利用反向传播算法实现每一层的权重和偏置项的更新</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(train, test, learning_rate=<span class="number">0.0001</span>, num_epochs=<span class="number">16</span>, minibatch_size=<span class="number">32</span>, print_cost=True, graph_filename=<span class="string">'costs'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    实现了一个三层的网络结构: LINEAR-&gt;RELU-&gt;LINEAR-&gt;RELU-&gt;LINEAR-&gt;SOFTMAX.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">    train -- 训练集</span></span><br><span class="line"><span class="string">    test -- 测试集</span></span><br><span class="line"><span class="string">    learning_rate -- 优化权重时候所用到的学习率</span></span><br><span class="line"><span class="string">    num_epochs -- 训练网络的轮次</span></span><br><span class="line"><span class="string">    minibatch_size -- 每一次送进网络训练的数据个数（也就是其他函数里面那个n参数）</span></span><br><span class="line"><span class="string">    print_cost -- 每一轮结束以后的损失函数</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">    parameters -- 被用来学习的参数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 确保参数不被覆盖重写</span></span><br><span class="line">    tf.reset_default_graph()</span><br><span class="line">    tf.set_random_seed(<span class="number">42</span>)</span><br><span class="line">    seed = <span class="number">42</span></span><br><span class="line">    <span class="comment"># 获取输入和输出大小</span></span><br><span class="line">    (n_x, m) = train.images.T.shape</span><br><span class="line">    n_y = train.labels.T.shape[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    costs = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建输入输出数据的占位符</span></span><br><span class="line">    X, Y = create_placeholders(n_x, n_y)</span><br><span class="line">    <span class="comment"># 初始化参数</span></span><br><span class="line">    parameters = initialize_parameters()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 进行前向传播</span></span><br><span class="line">    Z3 = forward_propagation(X, parameters)</span><br><span class="line">    <span class="comment"># 计算损失函数</span></span><br><span class="line">    cost = compute_cost(Z3, Y)</span><br><span class="line">    <span class="comment"># 使用AdamOptimizer优化器实现反向传播算法（最小化cost）</span></span><br><span class="line">    <span class="comment"># 其实我们这个地方的反向更新参数的过程都是tensorflow给做了</span></span><br><span class="line">    optimizer = tf.train.AdamOptimizer(learning_rate).minimize(cost)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 变量初始化器</span></span><br><span class="line">    init = tf.global_variables_initializer()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 开始tensorflow的sess 来计算tensorflow构建好的图</span></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 这个就是之前说过的要进行初始化的</span></span><br><span class="line">        sess.run(init)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练轮次</span></span><br><span class="line">        <span class="keyword">for</span> epoch <span class="keyword">in</span> range(num_epochs):</span><br><span class="line">            </span><br><span class="line">            epoch_cost = <span class="number">0.</span></span><br><span class="line">            num_minibatches = int(m / minibatch_size)</span><br><span class="line">            seed = seed + <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(num_minibatches):</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 获取下一个batch的训练数据和label数据</span></span><br><span class="line">                minibatch_X, minibatch_Y = train.next_batch(minibatch_size)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 执行优化器</span></span><br><span class="line">                _, minibatch_cost = sess.run([optimizer, cost], feed_dict=&#123;X: minibatch_X.T, Y: minibatch_Y.T&#125;)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 更新每一轮的损失</span></span><br><span class="line">                epoch_cost += minibatch_cost / num_minibatches</span><br><span class="line">                </span><br><span class="line">            <span class="comment"># 打印每一轮的损失</span></span><br><span class="line">            <span class="keyword">if</span> print_cost == <span class="keyword">True</span>:</span><br><span class="line">                print(<span class="string">"Cost after epoch &#123;epoch_num&#125;: &#123;cost&#125;"</span>.format(epoch_num=epoch, cost=epoch_cost))</span><br><span class="line">                costs.append(epoch_cost)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用matplot画出损失的变化曲线图</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">16</span>,<span class="number">5</span>))</span><br><span class="line">        plt.plot(np.squeeze(costs), color=<span class="string">'#2A688B'</span>)</span><br><span class="line">        plt.xlim(<span class="number">0</span>, num_epochs<span class="number">-1</span>)</span><br><span class="line">        plt.ylabel(<span class="string">"cost"</span>)</span><br><span class="line">        plt.xlabel(<span class="string">"iterations"</span>)</span><br><span class="line">        plt.title(<span class="string">"learning rate = &#123;rate&#125;"</span>.format(rate=learning_rate))</span><br><span class="line">        plt.savefig(graph_filename, dpi = <span class="number">300</span>)</span><br><span class="line">        plt.show()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存参数</span></span><br><span class="line">        parameters = sess.run(parameters)</span><br><span class="line">        print(<span class="string">"Parameters have been trained!"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算预测准率</span></span><br><span class="line">        correct_prediction = tf.equal(tf.argmax(Z3), tf.argmax(Y))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算测试准率</span></span><br><span class="line">        accuracy = tf.reduce_mean(tf.cast(correct_prediction, <span class="string">"float"</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"Train Accuracy:"</span>, accuracy.eval(&#123;X: train.images.T, Y: train.labels.T&#125;))</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"Test Accuracy:"</span>, accuracy.eval(&#123;X: test.images.T, Y: test.labels.T&#125;))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> parameters</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要开始训练我们的fashion mnist网络了</span></span><br><span class="line">train = fashion_mnist.train <span class="comment"># 训练的数据</span></span><br><span class="line">test = fashion_mnist.test <span class="comment"># 测试的数据</span></span><br><span class="line"></span><br><span class="line">parameters = model(train, test, learning_rate = <span class="number">0.001</span>, num_epochs = <span class="number">16</span>, graph_filename = <span class="string">'fashion_mnist_costs'</span>)</span><br></pre></td></tr></table></figure><ul><li>上面的代码是写好了，这里有一个python的依赖库（matplotlib）需要安装以下，同样的办法，就是进去tensorflow这个环境里面，然后执行<code>pip install matplotlib</code>就可以了。</li><li>在这个过程中，可能从tensorflow下载数据的时候会很慢。（我们选择直接从上面给出下载数据集的github网址，直接下载以后，将数据拷贝在代码所在文件夹的input/data/文件夹里面，总共由四个文件组成）分别是训练数据图片、训练数据label和测试数据图片、测试数据label。这样就可以省去下载数据时候漫长的等待。</li></ul><ol start="3" type="1"><li>上面就是我们使用TensorFlow实现的fashion-mnist的识别，总体根据实验结果来说，从测试集的数据来看，我达到的准确率结果是88.5%，还算可以。后续我们可能使用其他一些现有的网络结构来实现fashion-mnist的识别，看看准确率会不会提高。</li><li>如下是我对上面TensorFLow出现的方法介绍：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">tf.placeholders(</span><br><span class="line">dtype,</span><br><span class="line">shape=<span class="keyword">None</span>,</span><br><span class="line">name=<span class="keyword">None</span></span><br><span class="line">)</span><br><span class="line">从参数上面看到，总共有三个参数：</span><br><span class="line">dtype：在tensor中被喂数据的元素类型</span><br><span class="line">shape: tensor的shape</span><br><span class="line">name：命名</span><br><span class="line">说明一下，这个函数返回的是一个tensor，在TensorFlow里面，tensor是一个很重要的概念，大家务必掌握，也叫张量，比如我们的一个数:就是<span class="number">0</span>-阶张量，也叫标量。一个向量，就是<span class="number">1</span>-阶张量。一个矩阵，就是<span class="number">2</span>-阶张量，后面的就是一直往高维了走，对应的就是多少阶张量。</span><br><span class="line">这个方法，很重要的原因也在于它是定义在Session执行run的时候，在后面填充数据的占位符，也就是feed_dict这个变量里面的数据，所以大家，务必记住这一关键的概念。后续用起来就会很顺手。</span><br><span class="line">tf.get_variable()</span><br><span class="line">这个方法后续在展开来说，你先理解就是使用它可以定义变量（保存权重和偏置项的），还可以加一些优化器，比如说正则优化器等等</span><br><span class="line">tf.matmul(</span><br><span class="line">a,</span><br><span class="line">b,</span><br><span class="line">)</span><br><span class="line">展示给你们列出这两个参数：</span><br><span class="line">a：就是待操作的矩阵<span class="number">1</span></span><br><span class="line">b: 就是待操作的矩阵<span class="number">2</span></span><br><span class="line">函数功能就是实现矩阵的相乘运算（当然要符合基本的矩阵运算格式）</span><br><span class="line">tf.transpose(</span><br><span class="line">a,</span><br><span class="line">)</span><br><span class="line">先列出来一个参数，就是矩阵的转置</span><br><span class="line">Session().run(</span><br><span class="line">fetches,</span><br><span class="line">feed_list=<span class="keyword">None</span>,</span><br><span class="line">)</span><br><span class="line">这个方法就是运行图。很关键，先掌握两个参数:</span><br><span class="line">fetches: 你要从图里面取出的数据（）</span><br><span class="line">feed_list: 你要给图喂的数据（输入和label数据就是用这样的方式来做的）</span><br><span class="line">    比如我们训练的网络中输入的图片信息和对应的label信息</span><br><span class="line">tf.reduce_mean(</span><br><span class="line">input_tensor,</span><br><span class="line">axis=<span class="keyword">None</span>,</span><br><span class="line">keepdims=<span class="keyword">None</span>,</span><br><span class="line">name=<span class="keyword">None</span>,</span><br><span class="line">redcution_indices=<span class="keyword">None</span>,</span><br><span class="line">keep_dims=<span class="keyword">None</span></span><br><span class="line">)</span><br><span class="line">计算输入tensor的总和：</span><br><span class="line">input_tensor: 要叠加的tensor</span><br><span class="line">axis: 选择那个维度叠加</span><br><span class="line">keepdims: 叠加元素以后，保留原来的维度信息</span><br><span class="line">name：就是名字</span><br><span class="line">redcution_indices：被axis取代</span><br><span class="line">keep_dims：被keepdims取代</span><br></pre></td></tr></table></figure><p>我们今天的任务量可能有一些大，大家坚持。总的来说就是使用神经网络对实际的一个fashion-mnist数据集进行服装种类的识别，大家主要看看我的代码。有什么不明白的我在代码里面都做出了注释。</p><p>邮箱——air@weaf.top欢迎来探讨</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;tensorflow-初体验fashion-mnist&quot;&gt;TensorFlow 初体验（Fashion-mnist）&lt;/h1&gt;
&lt;ol
        
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/categories/TensorFlow/"/>
    
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>rsync的使用与配置</title>
    <link href="http://weafteam.github.io/posts/cfc65600/"/>
    <id>http://weafteam.github.io/posts/cfc65600/</id>
    <published>2018-03-25T13:08:56.000Z</published>
    <updated>2018-05-29T01:27:49.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一什么是rsync">一、什么是rsync</h2><p><strong>rsync</strong>，remote synchronize顾名思意就知道它是一款实现远程同步功能的软件，它在同步文件的同时，可以保持原来文件的权限、时间、软硬链接等附加信息。 rsync是用 “rsync 算法”提供了一个客户机和远程文件服务器的文件同步的快速方法，而且可以通过ssh方式来传输文件，这样其保密性也非常好，另外它还是免费的软件。</p><h2 id="二rsync的安装">二、rsync的安装</h2><p>rysnc的官方网站：http://rsync.samba.org 可以从上面得到最新的版本。目前最新版是3.1.2。当然，因为rsync是一款如此有用的软件，所以很多Linux的发行版本都将它收录在内了。</p><a id="more"></a><p>　　软件包安装</p><table><thead><tr class="header"><th>命令</th><th>平台</th></tr></thead><tbody><tr class="odd"><td># sudo apt-get install rsync</td><td>注：在debian、ubuntu 等在线安装方法；</td></tr><tr class="even"><td># yum install rsync</td><td>注：Fedora、Redhat 等在线安装方法；</td></tr><tr class="odd"><td># rpm -ivh rsync</td><td>注：Fedora、Redhat 等rpm包安装方法；</td></tr></tbody></table><p>　　其它Linux发行版，请用相应的软件包管理方法来安装。</p><p>　　源码包安装 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　tar xvf  rsync-xxx.tar.gz</span><br><span class="line">　　cd rsync-xxx</span><br><span class="line">　　./configure --prefix=/usr  ;make ;make install   注：在用源码</span><br></pre></td></tr></table></figure></p><p>包编译安装之前，您得安装gcc等编译开具才行； 三、rsync的配置 ———– rsync的主要有以下三个配置文件<strong>rsyncd.conf</strong>(主配置文件)、<strong>rsyncd.secrets</strong>(密码文件)、<strong>rsyncd.motd</strong>(rysnc服务器信息) 比如我们要备份服务器上的/home和/opt，在/home中我想把easylife和samba目录排除在外； <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">　　# Distributed under the terms of the GNU General Public License v2</span><br><span class="line">　　# Minimal configuration file for rsync daemon</span><br><span class="line">　　# See rsync(1) and rsyncd.conf(5) man pages for help</span><br><span class="line"></span><br><span class="line">　　# This line is required by the /etc/init.d/rsyncd script</span><br><span class="line">　　pid file = /var/run/rsyncd.pid   </span><br><span class="line">　　port = 873</span><br><span class="line">　　address = 192.168.1.171  </span><br><span class="line">　　#uid = nobody </span><br><span class="line">　　#gid = nobody    </span><br><span class="line">　　uid = root   </span><br><span class="line">　　gid = root  </span><br><span class="line"></span><br><span class="line">　　use chroot = yes  </span><br><span class="line">　　read only = yes </span><br><span class="line"></span><br><span class="line">　　#limit access to private LANs</span><br><span class="line">　　hosts allow=192.168.1.0/255.255.255.0 10.0.1.0/255.255.255.0  </span><br><span class="line">　　hosts deny=*</span><br><span class="line"></span><br><span class="line">　　max connections = 5 </span><br><span class="line">　　motd file = /etc/rsyncd.motd</span><br><span class="line"></span><br><span class="line">　　#This will give you a separate log file</span><br><span class="line">　　#log file = /var/log/rsync.log</span><br><span class="line"></span><br><span class="line">　　#This will log every file transferred - up to 85,000+ per user, per sync</span><br><span class="line">　　#transfer logging = yes</span><br><span class="line"></span><br><span class="line">　　log format = %t %a %m %f %b</span><br><span class="line">　　syslog facility = local3</span><br><span class="line">　　timeout = 300</span><br><span class="line"></span><br><span class="line">　　[rhel4home]   </span><br><span class="line">　　path = /home    </span><br><span class="line">　　list=yes </span><br><span class="line">　　ignore errors </span><br><span class="line">　　auth users = root</span><br><span class="line">　　secrets file = /etc/rsyncd.secrets  </span><br><span class="line">　　comment = This is RHEL 4 data  </span><br><span class="line">　　exclude = easylife/  samba/     </span><br><span class="line"></span><br><span class="line">　　[rhel4opt]</span><br><span class="line">　　path = /opt </span><br><span class="line">　　list=no</span><br><span class="line">　　ignore errors</span><br><span class="line">　　comment = This is RHEL 4 opt </span><br><span class="line">　　auth users = easylife</span><br><span class="line">　　secrets file = /etc/rsyncd/rsyncd.secrets</span><br></pre></td></tr></table></figure></p><p>　　注：关于auth users是必须在服务器上存在的真实的系统用户，如果你想用多个用户以,号隔开，比如auth users = easylife,root 　　设定密码文件</p><p>　　密码文件格式很简单，rsyncd.secrets的内容格式为：</p><p>　　用户名:密码</p><p>　　我们在例子中rsyncd.secrets的内容如下类似的；在文档中说，有些系统不支持长密码，自己尝试着设置一下吧。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　easylife:keer</span><br><span class="line">　　root:mike</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　chown root.root rsyncd.secrets 　#修改属主</span><br><span class="line">　　chmod 600 rsyncd.secrets     #修改权限</span><br></pre></td></tr></table></figure><p>　　注：1、将rsyncd.secrets这个密码文件的文件属性设为root拥有, 且权限要设为600, 否则无法备份成功! 出于安全目的，文件的属性必需是只有属主可读。 　　　　2、这里的密码值得注意，为了安全你不能把系统用户的密码写在这里。比如你的系统用户easylife密码是000000，为了安全你可以让rsync中的easylife为keer。这和samba的用户认证的密码原理是差不多的。</p><p>　　设定rsyncd.motd 文件;</p><p>　 　它是定义rysnc服务器信息的，也就是用户登录信息。比如让用户知道这个服务器是谁提供的等；类似ftp服务器登录时，我们所看到的 linuxsir.org ftp ……。 当然这在全局定义变量时，并不是必须的，你可以用#号注掉，或删除；我在这里写了一个 rsyncd.motd的内容为： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">　　++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">　　Welcome to use the mike.org.cn rsync services!</span><br><span class="line">2002------2009</span><br><span class="line">　　++++++++++++++++++++++++++++++++++++++++++++++</span><br></pre></td></tr></table></figure></p><h2 id="四启动rsync服务器">四、启动rsync服务器</h2><p>相当简单，有以下几种方法</p><p>　　A、–daemon参数方式，是让rsync以服务器模式运行 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　#/usr/bin/rsync --daemon  --config=/etc/rsyncd/rsyncd.conf 　#--config用于指定rsyncd.conf的位置,如果在/etc下可以不写</span><br></pre></td></tr></table></figure></p><p>　　B、xinetd方式 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　修改services加入如下内容</span><br><span class="line">　　# nano -w /etc/services</span><br><span class="line"></span><br><span class="line">　　rsync　　873/tcp　　# rsync </span><br><span class="line">　　rsync　　873/udp　　# rsync</span><br></pre></td></tr></table></figure></p><p>　　这一步一般可以不做，通常都有这两行(我的RHEL4和GENTOO默认都有)。修改的目的是让系统知道873端口对应的服务名为rsync。如没有的话就自行加入。</p><p>　　设定 /etc/xinetd.d/rsync, 简单例子如下: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">　　# default: off</span><br><span class="line">　　# description: The rsync server is a good addition to am ftp server, as it \</span><br><span class="line">　　#       allows crc checksumming etc.</span><br><span class="line">　　service rsync</span><br><span class="line">　　&#123;</span><br><span class="line">disable = no</span><br><span class="line">socket_type     = stream</span><br><span class="line">wait            = no</span><br><span class="line">user            = root</span><br><span class="line">server          = /usr/bin/rsync</span><br><span class="line">server_args     = --daemon</span><br><span class="line">log_on_failure  += USERID</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure></p><p>　　上述, 主要是要打开rsync這個daemon, 一旦有rsync client要连接時, xinetd会把它转介給 rsyncd(port 873)。然后service xinetd restart, 使上述设定生效.</p><p>　　rsync服务器和防火墙</p><p>　　Linux 防火墙是用iptables，所以我们至少在服务器端要让你所定义的rsync 服务器端口通过，客户端上也应该让通过。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　#iptables -A INPUT -p tcp -m state --state NEW  -m tcp --dport 873 -j ACCEPT</span><br><span class="line">　　#iptables -L  查看一下防火墙是不是打开了 873端口</span><br></pre></td></tr></table></figure></p><p>　　如果你不太懂防火墙的配置，可以先service iptables stop 将防火墙关掉。当然在生产环境这是很危险的，做实验才可以这么做哟！</p><h2 id="五通过rsync客户端来同步数据">五、通过rsync客户端来同步数据</h2><h3 id="b1列出rsync-服务器上的所提供的同步内容">B1、列出rsync 服务器上的所提供的同步内容；</h3><p>　　首先：我们看看rsync服务器上提供了哪些可用的数据源</p><p>　　# rsync –list-only root@192.168.145.5:: 　　++++++++++++++++++++++++++++++++++++++++++++++ 　　Welcome to use the mike.org.cn rsync services! 　　 2002——2009 　　++++++++++++++++++++++++++++++++++++++++++++++</p><p>　　rhel4home This is RHEL 4 data</p><p>　 　注：前面是rsync所提供的数据源，也就是我们在rsyncd.conf中所写的[rhel4home]模块。而“This is RHEL 4 data”是由[rhel4home]模块中的 comment = This is RHEL 4 data 提供的；为什么没有把rhel4opt数据源列出来呢？因为我们在[rhel4opt]中已经把list=no了。</p><p>　　$ rsync –list-only root@192.168.145.5::rhel4home</p><p>　　++++++++++++++++++++++++++++++++++++++++++++++ 　　Welcome to use the mike.org.cn rsync services! 　　 2002——2009 　　++++++++++++++++++++++++++++++++++++++++++++++</p><p>　　Password: 　　drwxr-xr-x 4096 2009/03/15 21:33:13 . 　　-rw-r–r– 1018 2009/03/02 02:33:41 ks.cfg 　　-rwxr-xr-x 21288 2009/03/15 21:33:13 wgetpaste 　　drwxrwxr-x 4096 2008/10/28 21:04:05 cvsroot 　　drwx—— 4096 2008/11/30 16:30:58 easylife 　　drwsr-sr-x 4096 2008/09/20 22:18:05 giddir 　　drwx—— 4096 2008/09/29 14:18:46 quser1 　　drwx—— 4096 2008/09/27 14:38:12 quser2 　　drwx—— 4096 2008/11/14 06:10:19 test 　　drwx—— 4096 2008/09/22 16:50:37 vbird1 　　drwx—— 4096 2008/09/19 15:28:45 vbird2</p><p>　　后面的root@ip中，root是指定密码文件中的用户名，之后的::rhel4home这是rhel4home模块名 ### B2、rsync客户端同步数据；</p><p>　　#rsync -avzP root@192.168.145.5::rhel4home rhel4home 　　Password: 这里要输入root的密码，是服务器端rsyncd.secrets提供的。在前面的例子中我们用的是mike，输入的密码并不回显，输好就回车。</p><p>　 　注： 这个命令的意思就是说，用root用户登录到服务器上，把rhel4home数据，同步到本地当前目录rhel4home上。当然本地的目录是可以你自己 定义的。如果当你在客户端上当前操作的目录下没有rhel4home这个目录时，系统会自动为你创建一个；当存在rhel4home这个目录中，你要注意 它的写权限。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　#rsync -avzP  --delete linuxsir@linuxsir.org::rhel4home   rhel4home</span><br></pre></td></tr></table></figure></p><p>　 　这回我们引入一个–delete 选项，表示客户端上的数据要与服务器端完全一致，如果 linuxsirhome目录中有服务器上不存在的文件，则删除。最终目的是让linuxsirhome目录上的数据完全与服务器上保持一致；用的时候要 小心点，最好不要把已经有重要数所据的目录，当做本地更新目录，否则会把你的数据全部删除；</p><p>　　設定 rsync client</p><p>　　设定密码文件 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　#rsync -avzP  --delete  --password-file=rsyncd.secrets   root@192.168.145.5::rhel4home rhel4home</span><br></pre></td></tr></table></figure></p><p>　　这次我们加了一个选项 –password-file=rsyncd.secrets，这是当我们以root用户登录rsync服务器同步数据时，密码将读取rsyncd.secrets这个文件。这个文件内容只是root用户的密码。我们要如下做；</p><p>　　# touch rsyncd.secrets 　　# chmod 600 rsyncd.secrets 　　# echo “mike”&gt; rsyncd.secrets</p><p>　　# rsync -avzP –delete –password-file=rsyncd.secrets root@192.168.145.5::rhel4home rhel4home</p><p>　　注：这里需要注意的是这份密码文件权限属性要设得只有属主可读。</p><p>　　　　这样就不需要密码了；其实这是比较重要的，因为服务器通过crond 计划任务还是有必要的； ### B3、让rsync客户端自动与服务器同步数据</p><p>　 　服务器是重量级应用，所以数据的网络备份还是极为重要的。我们可以在生产型服务器上配置好rsync 服务器。我们可以把一台装有rysnc机器当做是备份服务器。让这台备份服务器，每天在早上4点开始同步服务器上的数据；并且每个备份都是完整备份。有时 硬盘坏掉，或者服务器数据被删除，完整备份还是相当重要的。这种备份相当于每天为服务器的数据做一个镜像，当生产型服务器发生事故时，我们可以轻松恢复数 据，能把数据损失降到最低；是不是这么回事？？</p><p>　　step1：创建同步脚本和密码文件 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">　　#mkdir   /etc/cron.daily.rsync</span><br><span class="line">　　#cd  /etc/cron.daily.rsync </span><br><span class="line">　　#touch rhel4home.sh  rhel4opt.sh </span><br><span class="line">　　#chmod 755 /etc/cron.daily.rsync/*.sh  </span><br><span class="line">　　#mkdir /etc/rsyncd/</span><br><span class="line">　　#touch /etc/rsyncd/rsyncrhel4root.secrets</span><br><span class="line">　　#touch /etc/rsyncd/rsyncrhel4easylife.secrets</span><br><span class="line">　　#chmod 600  /etc/rsyncd/rsync.*</span><br></pre></td></tr></table></figure></p><p>　 　注： 我们在 /etc/cron.daily/中创建了两个文件rhel4home.sh和rhel4opt.sh ，并且是权限是755的。创建了两个密码文件root用户用的是rsyncrhel4root.secrets ，easylife用户用的是 rsyncrhel4easylife.secrets，权限是600；</p><p>　　我们编辑rhel4home.sh，内容是如下的： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　#!/bin/sh</span><br><span class="line">　　#backup 192.168.145.5:/home </span><br><span class="line">　　/usr/bin/rsync   -avzP  --password-file=/etc/rsyncd/rsyncrhel4root.secrets    root@192.168.145.5::rhel4home   /home/rhel4homebak/$(date +&apos;%m-%d-%y&apos;)</span><br></pre></td></tr></table></figure></p><p>　　我们编辑 rhel4opt.sh ，内容是： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　#!/bin/sh</span><br><span class="line">　　#backup 192.168.145.5:/opt </span><br><span class="line">　　/usr/bin/rsync   -avzP  --password-file=/etc/rsyncd/rsyncrhel4easylife.secrets    easylife@192.168.145.5::rhel4opt   /home/rhel4hoptbak/$(date +&apos;%m-%d-%y&apos;)</span><br></pre></td></tr></table></figure></p><p>　　注：你可以把rhel4home.sh和rhel4opt.sh的内容合并到一个文件中，比如都写到rhel4bak.sh中；</p><p>　　接着我们修改 /etc/rsyncd/rsyncrhel4root.secrets和rsyncrhel4easylife.secrets的内容； <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　# echo &quot;mike&quot; &gt; /etc/rsyncd/rsyncrhel4root.secrets</span><br><span class="line">　　# echo &quot;keer&quot;&gt; /etc/rsyncd/rsyncrhel4easylife.secrets</span><br></pre></td></tr></table></figure></p><p>　 　然后我们再/home目录下创建rhel4homebak 和rhel4optbak两个目录，意思是服务器端的rhel4home数据同步到备份服务器上的/home/rhel4homebak 下，rhel4opt数据同步到 /home/rhel4optbak/目录下。并按年月日归档创建目录；每天备份都存档； <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　#mkdir /home/rhel4homebak</span><br><span class="line">　　#mkdir /home/rhel4optbak</span><br></pre></td></tr></table></figure></p><p>　　step2：修改crond服务器的配置文件 加入到计划任务 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　#crontab  -e</span><br></pre></td></tr></table></figure></p><p>　　加入下面的内容：</p><p>　　# Run daily cron jobs at 4:10 every day backup rhel4 data:<br>　　10 4 * * * /usr/bin/run-parts /etc/cron.daily.rsync 1&gt; /dev/null</p><p>　　注：第一行是注释，是说明内容，这样能自己记住。 　　　　第二行表示在每天早上4点10分的时候，运行 /etc/cron.daily.rsync 下的可执行脚本任务； 　　　　 　　配置好后，要重启crond 服务器； <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">　　# killall crond    注：杀死crond 服务器的进程；</span><br><span class="line">　　# ps aux |grep crond  注：查看一下是否被杀死；</span><br><span class="line">　　# /usr/sbin/crond    注：启动 crond 服务器；</span><br><span class="line">　　# ps aux  |grep crond  注：查看一下是否启动了？</span><br><span class="line">　　root      3815  0.0  0.0   1860   664 ?        S    14:44   0:00 /usr/sbin/crond</span><br><span class="line">　　root      3819  0.0  0.0   2188   808 pts/1    S+   14:45   0:00 grep crond</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      rsync的使用与配置
    
    </summary>
    
      <category term="Linux" scheme="http://weafteam.github.io/categories/Linux/"/>
    
    
      <category term="Linux运维" scheme="http://weafteam.github.io/tags/Linux%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>文本聚类系列教程：（二）jieba中文分词工具进阶</title>
    <link href="http://weafteam.github.io/posts/931939a5/"/>
    <id>http://weafteam.github.io/posts/931939a5/</id>
    <published>2018-03-19T11:57:19.000Z</published>
    <updated>2018-05-29T01:27:49.796Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>jieba中文分词工具使用进阶篇，废话不多说吗，我们开始本次的学习吧~</p></blockquote><hr><h1 id="如何让分词的更加准确">如何让分词的更加准确</h1><p>我们之前举得例子有些文本其实很简单，我们后来确实换了官方的测试文本《围城》，但是均没避免一个问题，这些测试例都十分地中规中矩。在实际中需要我们做分词的文本可能是多种多样的，这时候的切词有可能会不太特别理想，导致分词的不准确。</p><p>那我们不妨下一个别的电子书（这里我下载的是《斗破苍穹》，为了测试我只用了第一章的文本），然后再进行切词，看下是否存在这样的问题。这里我们稍微改改上次的去停用词的代码，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line">d = path.dirname(__file__) <span class="comment"># 获取当前文件的dir路径</span></span><br><span class="line"></span><br><span class="line">text_path = <span class="string">'txt/chapter2.txt'</span> <span class="comment">#《斗破苍穹》第一章的文本路径</span></span><br><span class="line">text = open(path.join(d, text_path),<span class="string">'rb'</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CutWords</span><span class="params">(text)</span>:</span></span><br><span class="line">    mywordlist = []</span><br><span class="line">    seg_list = jieba.cut(text, cut_all=<span class="keyword">False</span>)</span><br><span class="line">    liststr=<span class="string">"/ "</span>.join(seg_list) <span class="comment"># 添加切分符</span></span><br><span class="line">    <span class="keyword">for</span> myword <span class="keyword">in</span> liststr.split(<span class="string">'/'</span>):</span><br><span class="line">        <span class="keyword">if</span> len(myword.strip())&gt;<span class="number">1</span>:</span><br><span class="line">            mywordlist.append(myword)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(mywordlist) <span class="comment">#返回一个字符串</span></span><br><span class="line"></span><br><span class="line">txt5 = CutWords(text)</span><br><span class="line">text_write = <span class="string">'txt/5.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(text_write,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(txt5)</span><br><span class="line">    print(<span class="string">"Success"</span>)</span><br></pre></td></tr></table></figure><p><strong>结果如下：</strong></p><p><img src="https://i.loli.net/2018/03/20/5ab12557a30b9.png" alt="result_cutwords.png"></p><p>终于被我们找到了一个切词错误，原文是这样的：</p><p>萧媚脑中忽然浮现出三年前那意气风发的少年</p><p>按照我们正常的断句，应为：</p><p>萧媚/脑中/忽然/浮现….，而jieba却认为“萧媚脑”是一个单词，从而导致此处分词不理想。</p><p>jieba考虑了这种情况，而且有很多的应对方案，下面我们先说最简单的。</p><h1 id="调整词典">调整词典</h1><h2 id="方法1动态修改词典">方法1：动态修改词典</h2><p>使用add_word(word,freq=None,tag=None)和del_word(word)可在程序中动态的修改词典，具体操作如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line">d = path.dirname(__file__) <span class="comment"># 获取当前文件的dir路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处增加代码</span></span><br><span class="line">jieba.add_word(<span class="string">'脑中'</span>)</span><br><span class="line"></span><br><span class="line">  ····</span><br></pre></td></tr></table></figure><p><strong>结果如下：</strong></p><p><img src="https://i.loli.net/2018/03/22/5ab3a2f27d481.png" alt="add_word_test.png"></p><p>果然，这样的方法很直接的把我们原来切错的词变成了正确的词。与add_word()相对应的是delete_word()方法，根据字面意思我们也很容易理解delete_word()方法的作用，这里我就不做过多的演示了，大家在实际场景中直接运用就好了。</p><h2 id="方法2调节词频">方法2：调节词频</h2><p>使用suggest_freq(segment, tune=True)调节单个词语的词频，使得它更容易被分出来，或者不被分出来。</p><p>但是需要注意的是：<strong>自动计算的词频在使用 HMM 新词发现功能时可能无效。</strong></p><p>所以此时我们在做切词的时候需要把是HMM置为False。我们看下官方给的Demo（如果关闭HMM，很多新发现的词都消失了，所以‘萧媚脑’也消失了，无法做测试，我们的例子也是为了方便大家理解，所以也没必要非得针对这一个词做词频调节），具体的做法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">print(<span class="string">'/'</span>.join(jieba.cut(<span class="string">'如果放到post中将出错。'</span>, HMM=<span class="keyword">False</span>)))</span><br><span class="line"></span><br><span class="line">jieba.suggest_freq((<span class="string">'中'</span>, <span class="string">'将'</span>), <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'/'</span>.join(jieba.cut(<span class="string">'如果放到post中将出错。'</span>, HMM=<span class="keyword">False</span>)))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'/'</span>.join(jieba.cut(<span class="string">'「台中」正确应该不会被切开'</span>, HMM=<span class="keyword">False</span>)))</span><br><span class="line"></span><br><span class="line">jieba.suggest_freq(<span class="string">'台中'</span>, <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'/'</span>.join(jieba.cut(<span class="string">'「台中」正确应该不会被切开'</span>, HMM=<span class="keyword">False</span>)))</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><p><img src="https://i.loli.net/2018/03/22/5ab3b191d1bfd.png" alt="suggest_freq.png"></p><p>对比下结果，不难发现suggest_freq()的使用方法，通过这样的强调高频词和低频词的方法可以做到分词更准确。</p><h1 id="添加自定义词典">添加自定义词典</h1><p>比起默认的词典，我们自定义的词典更适合我们自己的文本，这一点是毋庸置疑的。</p><p>词典格式和 dict.txt 一样，一个词占一行；每一行分三部分：词语、词频（可省略）、词性（可省略），用空格隔开，顺序不可颠倒。file_name 若为路径或二进制方式打开的文件，则文件必须为 UTF-8 编码。</p><p>这里我们的词典为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">云计算 5</span><br><span class="line">李小福 2 nr</span><br><span class="line">创新办 3 i</span><br><span class="line">easy_install 3 eng</span><br><span class="line">好用 300</span><br><span class="line">韩玉赏鉴 3 nz</span><br><span class="line">八一双鹿 3 nz</span><br><span class="line">台中</span><br><span class="line">凱特琳 nz</span><br><span class="line">Edu Trust认证 2000</span><br></pre></td></tr></table></figure><p>我们这个例子也用官方的Demo，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">"../"</span>)</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">jieba.load_userdict(<span class="string">"userdict.txt"</span>)</span><br><span class="line"><span class="comment"># jieba在0.28版本之后采用延迟加载方式</span></span><br><span class="line"><span class="comment"># “import jieba”不会立即触发词典的加载，而是在有必要的时候才会加载词典</span></span><br><span class="line"><span class="comment"># 如果想手动加载，可执行代码： jieba.initialize() 进行手动初始化操作</span></span><br><span class="line"><span class="comment"># 也正是有了延迟加载机制，我们现在可以改变主词典的路径：</span></span><br><span class="line"><span class="comment"># jieba.set_dictionary('data/dict.txt.big')</span></span><br><span class="line"><span class="comment"># 官方还提供了占用内存较小的词典和适用于繁体字的词典，均在官方的GitHub上，有需要的可以自行下载。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jieba.posseg <span class="keyword">as</span> pseg</span><br><span class="line"><span class="comment"># pseg切分可以显示词性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下三个操作是修改词典的巩固</span></span><br><span class="line">jieba.add_word(<span class="string">'石墨烯'</span>)</span><br><span class="line">jieba.add_word(<span class="string">'凱特琳'</span>)</span><br><span class="line">jieba.del_word(<span class="string">'自定义词'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test_sent = (</span><br><span class="line"><span class="string">"李小福是创新办主任也是云计算方面的专家; 什么是八一双鹿\n"</span></span><br><span class="line"><span class="string">"例如我输入一个带“韩玉赏鉴”的标题，在自定义词库中也增加了此词为N类\n"</span></span><br><span class="line"><span class="string">"「台中」正確應該不會被切開。mac上可分出「石墨烯」；此時又可以分出來凱特琳了。"</span></span><br><span class="line">)</span><br><span class="line">words = jieba.cut(test_sent)</span><br><span class="line">print(<span class="string">'/'</span>.join(words))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"="</span>*<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">result = pseg.cut(test_sent)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> result:</span><br><span class="line">    print(w.word, <span class="string">"/"</span>, w.flag, <span class="string">", "</span>, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure><p><strong>结果如下：</strong></p><p><img src="https://i.loli.net/2018/03/23/5ab46d77c08dc.png" alt="userdict.png"></p><p>像‘云计算’、‘创新办’等词在没加载词典的时候是不能被识别出来的。像‘石墨烯’等在没有add_word()的时候也是不能识别出来的。可见效果还是不错的。</p><h1 id="并行分词">并行分词</h1><p>原理：将目标文本按行分隔后，把各行文本分配到多个 Python 进程并行分词，然后归并结果，从而获得分词速度的可观提升</p><p>但是令人遗憾的是，这个模块并不支持Windows平台，原因是因为jieba的该模块是基于python自带的 multiprocessing 模块，而这个模块并不支持Windows。这里我就贴一下用法，使用Linux系统的同学可以自行体验下这个可观的速度提升。</p><p><strong>用法：</strong></p><ul><li>jieba.enable_parallel(4) # 开启并行分词模式，参数为并行进程数</li><li>jieba.disable_parallel() # 关闭并行分词模式</li></ul><h1 id="最后">最后</h1><p>以上所讲的内容在日常的使用中应该是够用了，当然像基于TextRank算法的关键词抽取等内容，我这里并没涉及，并不是因为不重要，而是我对这个算法还不是很了解，硬着头皮写肯定也是照本宣科，效果肯定很差，所以先挖个坑吧，以后再填。</p><p>感谢阅读~</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;jieba中文分词工具使用进阶篇，废话不多说吗，我们开始本次的学习吧~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1
        
      
    
    </summary>
    
      <category term="文本聚类" scheme="http://weafteam.github.io/categories/%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/"/>
    
    
      <category term="文本聚类" scheme="http://weafteam.github.io/tags/%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>普通的 SQLAlchemy ORM 使用姿势</title>
    <link href="http://weafteam.github.io/posts/39277c31/"/>
    <id>http://weafteam.github.io/posts/39277c31/</id>
    <published>2018-03-18T13:38:54.000Z</published>
    <updated>2018-08-07T08:56:41.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>SQLAlchemy 是 Python 世界中最常用的 SQL 工具之一，包含 SQL 渲染引擎和 ORM 两大部分，平时使用最多的就是 ORM。在我看来平时很多使用 ORM 的姿势是有问题的，或者说是不优雅的。所以这篇文章打算讲讲（搬运）其中一些普通的姿势和技巧（API 文档）。</p><h2 id="property-和混合属性">property 和混合属性</h2><h3 id="property">property</h3><p>下面是一个简单的用户表映射：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'user'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">64</span>))</span><br><span class="line">    password = Column(String(<span class="number">128</span>))</span><br></pre></td></tr></table></figure><p>通常情况下，我们会加密用户的密码，在数据库中保存密文，但是这里有一个问题，我们得这么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">user = User(name=<span class="string">'zhang'</span>, password=encrypt(<span class="string">'123456'</span>))</span><br><span class="line"><span class="comment"># 修改密码</span></span><br><span class="line">user.password = encrypt(<span class="string">'654321'</span>)</span><br></pre></td></tr></table></figure><p>这意味着我们需要不断的重复书写 <code>encrypt</code> 函数来保证加密了用户密码。</p><p>有没有什么方法能省去这一步呢？答案是 <code>property</code>。</p><p>现在把用户表映射改成这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'user'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">64</span>))</span><br><span class="line">    _password = Column(String(<span class="number">128</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">password</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'write only!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @password.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">password</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self._password = encrypt(value)</span><br></pre></td></tr></table></figure><p>现在只需要简单的写成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">user = User(name=<span class="string">'zhang'</span>, password=<span class="string">'123456'</span>)</span><br><span class="line"><span class="comment"># 修改密码</span></span><br><span class="line">user.password = <span class="string">'654321'</span></span><br></pre></td></tr></table></figure><p>就可以了。</p><p>关于 Python 中 <code>property</code>和描述符的使用值得再另写一篇文章描述，在这里就不详细说明了。</p><h3 id="混合属性hybrid_property">混合属性（hybrid_property）</h3><p>上面的例子看上去让代码清爽了不少，但是有时候这种用法是无法满足需要的，譬如下面这个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'student'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">64</span>))</span><br><span class="line">    birthday = Column(DateTime)</span><br></pre></td></tr></table></figure><p>这是一个学生表映射，增加了 <code>birthday</code> 字段。通常我们会保存用户的生日，再通过生日获取用户年龄。有了上面的例子，很容易写出获取年龄的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Base)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> datetime.now().year - self.birthday.year</span><br></pre></td></tr></table></figure><p>现在可以简单的使用 <code>student.age</code> 获取具体的生日。</p><p>这样做是有缺陷的：如果需要获取所有 18 岁的学生呢？我们希望可以这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.query(Student).filter_by(age=<span class="number">18</span>).all()</span><br></pre></td></tr></table></figure><p>但是却没有任何结果返回。如果改成这样呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">now = datetime.now()</span><br><span class="line">start = datetime(now.year - <span class="number">18</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">end = end = datetime(now.year + <span class="number">1</span> - <span class="number">18</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">session.query(Student).filter(Student.birthday &gt;= start, Student.birthday &lt; end).all()</span><br></pre></td></tr></table></figure><p>这样倒是可以获取正确的结果了，但是也太丑了点吧？难道没办法写出像第一条一样的既清晰又简洁的查询么？</p><p>答案自然是有的，SQLAlchemy 提供了混合属性（<code>hybrid_property</code>）来处理类似的情况，于是我们可以改写获取年龄的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.hybrid <span class="keyword">import</span> hybrid_property</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> func</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Base)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="meta">    @hybrid_property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> datetime.now().year - self.birthday.year</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.expression</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> datetime.now().year - func.year(self.birthday)</span><br></pre></td></tr></table></figure><p>这里将原本的 <code>property</code> 替换为 SQLAlchemy 中的 <code>hybrid_property</code>，同时提供了一个 <code>expression</code> 装饰器，在被装饰的方法中把 Python 代码翻译成 SQL（代码示例的目标数据库为 MySQL，获取日期中的年份的函数为<code>YEAR()</code>，使用其他数据库请查阅对应数据库的相关文档）。有了这个方法，SQLAlchemy 就知道如何在 SQL 语句中处理 <code>age</code> 属性了。</p><p>接下来稍微提一下 <code>hybrid_method</code>。</p><p>和 <code>hybrid_property</code> 类似，只不过可以给 <code>hybrid_method</code> 传参数。下面这个例子不太合适，只为了展示<code>hybrid_method</code> 的功能。</p><p>如何找到所有 90 后同学？当然我们可以复用上面的 <code>age</code> 属性，先计算一下 90 后的同学现在多少岁，然后直接写在查询里就好：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.query(Student).filter(Student.age &gt;= now.year - <span class="number">1990</span>, Student.age &lt; now.year - <span class="number">2000</span>).all()</span><br></pre></td></tr></table></figure><p>如果要判断某个学生是否是 90 后呢？又需要再写一遍：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> now.year - <span class="number">2000</span> &gt; student.age &gt;= now.year - <span class="number">1990</span>:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>出现了很多不直观的代码，这时候可以使用 <code>hybrid_method</code> 简化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Base)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"><span class="meta">    @hybrid_method</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">born_after</span><span class="params">(self, years)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> years + <span class="number">10</span> &gt; self.birthday.year &gt;= years</span><br><span class="line"></span><br><span class="line"><span class="meta">    @born_after.expression</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">born_after</span><span class="params">(self, years)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> and_(func.year(self.birthday) &lt; years + <span class="number">10</span>, func.year(self.birthday) &gt;= years)</span><br></pre></td></tr></table></figure><p>于是现在可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">session.query(Student).filter(Student.born_after(<span class="number">1990</span>)).all()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> student.born_after(<span class="number">1990</span>):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>看上去好了一些（误</p><p>这一部分就到此为止，当然 hybrid 在 SQLAlchemy 中的用法不止上述这些，更详细和复杂的内容参见官方文档。</p><h2 id="关联代理association_proxy">关联代理（association_proxy）</h2><h3 id="简化标量集合">简化标量集合</h3><p>关联代理用在有关联的表中，所以我们先创建如下映射关系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">association = Table(<span class="string">'association'</span>, Base.metadata,</span><br><span class="line">                    Column(<span class="string">'blog_id'</span>, Integer, ForeignKey(<span class="string">'blog.id'</span>), primary_key=<span class="keyword">True</span>),</span><br><span class="line">                    Column(<span class="string">'tag_id'</span>, Integer, ForeignKey(<span class="string">'tag.id'</span>), primary_key=<span class="keyword">True</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'blog'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">64</span>))</span><br><span class="line">    tags = relationship(</span><br><span class="line">        <span class="string">'Tag'</span>, secondary=association, backref=backref(<span class="string">'blogs'</span>, lazy=<span class="string">'dynamic'</span>), lazy=<span class="string">'dynamic'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'tag'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">64</span>))</span><br></pre></td></tr></table></figure><p>一个经常被拿出来作为演示的 Many-To-Many 模型。</p><p>先填充一些数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: blog = Blog(name=<span class="string">'first'</span>)</span><br><span class="line">In [<span class="number">2</span>]: blog.tags.append(Tag(name=<span class="string">'t1'</span>))</span><br><span class="line">In [<span class="number">3</span>]: blog.tags.append(Tag(name=<span class="string">'t2'</span>))</span><br><span class="line">In [<span class="number">4</span>]: session.add(blog)</span><br><span class="line">In [<span class="number">5</span>]: session.commit()</span><br></pre></td></tr></table></figure><p>接下来就可以获取这些对象的所有信息了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: blog.tags.all()</span><br><span class="line">Out[<span class="number">4</span>]: [&lt;Tag at <span class="number">0x1fdbab6f198</span>&gt;, &lt;Tag at <span class="number">0x1fdbab6f208</span>&gt;]</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: blog.tags.all()[<span class="number">0</span>].name</span><br><span class="line">Out[<span class="number">5</span>]: <span class="string">'t1'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: [t.name <span class="keyword">for</span> t <span class="keyword">in</span> blog.tags]</span><br><span class="line">Out[<span class="number">6</span>]: [<span class="string">'t1'</span>, <span class="string">'t2'</span>]</span><br></pre></td></tr></table></figure><p>上面的操作有点复杂。对我们而言，<code>Tag</code> 对象只有 <code>name</code> 字段是有用的，为了获取 <code>name</code> 字段，我们要写很多额外的代码把 <code>name</code> 字段从 <code>Tag</code> 对象中剥离出来。<code>association_proxy</code> 就可以用来简化这个操作。</p><p>现在修改一下上面的 <code>Blog</code> 映射：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.associationproxy <span class="keyword">import</span> association_proxy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span><span class="params">(Base)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    tag_objects = relationship(</span><br><span class="line">        <span class="string">'Tag'</span>, secondary=association, backref=backref(<span class="string">'blogs'</span>, lazy=<span class="string">'dynamic'</span>), lazy=<span class="string">'dynamic'</span>)</span><br><span class="line">    tags = association_proxy(<span class="string">'tag_objects'</span>, <span class="string">'name'</span>)</span><br></pre></td></tr></table></figure><p>增加了一行 <code>association_proxy</code> 对象的声明，现在我们可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">7</span>]: blog.tags</span><br><span class="line">Out[<span class="number">7</span>]: [<span class="string">'t1'</span>, <span class="string">'t2'</span>]</span><br></pre></td></tr></table></figure><p>现在查询操作变得很简单了，但是新增标签的操作还是很麻烦：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blog.tag_objects.append(Tag(name=<span class="string">'t3'</span>))</span><br></pre></td></tr></table></figure><p>还是需要实例化一个 <code>Tag</code> 对象，能不能直接写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blog.tags.append(<span class="string">'t4'</span>)</span><br></pre></td></tr></table></figure><p>当然是可以的，只要再修改一下 <code>association_proxy</code> 的声明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span><span class="params">(Base)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    tags = association_proxy(<span class="string">'tag_objects'</span>, <span class="string">'name'</span>, creator=<span class="keyword">lambda</span> name: Tag(name=name))</span><br></pre></td></tr></table></figure><p>参数 <code>creator</code> 接受一个可调用对象，它告诉 <code>association_proxy</code> 如何处理“新增”操作。</p><p><strong>注意</strong>：<code>creator</code> 的默认参数是被代理对象的构造函数，如果提供了一个单参数的构造函数，那么可以省略 <code>creator</code> 参数。</p><h3 id="简化关联对象">简化关联对象</h3><p>上面的例子里把 <code>association</code> 表作为一个普通的 <code>Table</code> 对象，是因为 <code>association</code> 中不需要保存额外信息，只需要作为 <code>Blog</code> 和 <code>Tag</code> 的中转。现在有了新的需求，我们需要知道每篇博客的标签是在什么时候加上的，这就需要在 <code>association</code> 表中增加一个额外的字段用来表示创建时间，同时为了获取这个时间，还要把 <code>association</code> 改造成一个真正的映射：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Association</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'association'</span></span><br><span class="line"></span><br><span class="line">    blog_id = Column(Integer, ForeignKey(<span class="string">'blog.id'</span>), primary_key=<span class="keyword">True</span>)</span><br><span class="line">    tag_id = Column(Integer, ForeignKey(<span class="string">'tag.id'</span>), primary_key=<span class="keyword">True</span>)</span><br><span class="line">    created_at = Column(DateTime, default=datetime.now)</span><br><span class="line"></span><br><span class="line">    blog = relationship(<span class="string">'Blog'</span>, backref=backref(<span class="string">'blog_tags'</span>, lazy=<span class="string">'dynamic'</span>), lazy=<span class="string">'joined'</span>)</span><br><span class="line">    tag = relationship(<span class="string">'Tag'</span>, backref=backref(<span class="string">'tag_blogs'</span>, lazy=<span class="string">'dynamic'</span>), lazy=<span class="string">'joined'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'tag'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">64</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'blog'</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">64</span>))</span><br></pre></td></tr></table></figure><p>这里实际上是把 Many-To-Many 拆成了两个 One-To-Many。</p><p>然后构造一些数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In  [<span class="number">1</span>]: blog = Blog(name=<span class="string">'first'</span>)</span><br><span class="line">    ...: tags = [Tag(name=<span class="string">'t1'</span>), Tag(name=<span class="string">'t2'</span>)]</span><br><span class="line">    ...: <span class="keyword">for</span> tag <span class="keyword">in</span> tags:</span><br><span class="line">    ...:     session.add(Association(blog=blog, tag=tag))</span><br><span class="line">    ...: session.add(blog)</span><br><span class="line">    ...: session.add_all(tags)</span><br><span class="line">    ...: session.commit()</span><br></pre></td></tr></table></figure><p>现在就可以获取 <code>Tag</code> 和被添加的时间了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: blog.blog_tags[<span class="number">0</span>].tag.name</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'t1'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: blog.blog_tags[<span class="number">0</span>].created_at</span><br><span class="line">Out[<span class="number">3</span>]: datetime.datetime(<span class="number">2018</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">16</span>, <span class="number">4</span>, <span class="number">17</span>)</span><br></pre></td></tr></table></figure><p>可以看到，给 <code>Blog</code> 增加标签要经过 <code>Association</code> 这个中间对象。虽然表结构的确如此，但是我们仍然希望 <code>Association</code> 表是透明的，仅当需要获取其中的创建时间时才明确获取 <code>Association</code> 对象。只需要在 <code>Blog</code> 中声明一个关联代理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span><span class="params">(Base)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    tags = association_proxy(<span class="string">'blog_tags'</span>, <span class="string">'tag'</span>, creator=<span class="keyword">lambda</span> tag: Association(tag=tag))</span><br></pre></td></tr></table></figure><p>然后就可以这样写了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: blog.tags[<span class="number">0</span>].name</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'t1'</span></span><br></pre></td></tr></table></figure><p>添加新的 <code>Tag</code> 也方便了很多：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In  [<span class="number">3</span>]: <span class="keyword">for</span> tag <span class="keyword">in</span> [Tag(name=<span class="string">'t3'</span>), Tag(name=<span class="string">'t4'</span>)]:</span><br><span class="line">    ...:     blog.tags.append(tag)</span><br></pre></td></tr></table></figure><h3 id="混合关联代理">混合关联代理</h3><p>现在回到了第一个问题的出发点，能不能在上一个例子的基础上简化 <code>tags</code> 的调用呢？同样没问题，只要在 <code>Association</code> 中加一个关联代理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Association</span><span class="params">(Base)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    tag_objects = relationship(<span class="string">'Tag'</span>, backref=backref(<span class="string">'tag_blogs'</span>, lazy=<span class="string">'dynamic'</span>), lazy=<span class="string">'joined'</span>)</span><br><span class="line">    tags = association_proxy(<span class="string">'tag_objects'</span>, <span class="string">'name'</span>, creator=<span class="keyword">lambda</span> name: Tag(name=name))</span><br></pre></td></tr></table></figure><p>然后用起来就和第一个例子一样了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: blog.tags</span><br><span class="line">Out[<span class="number">1</span>]: [<span class="string">'t1'</span>, <span class="string">'t2'</span>]</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: blog.tags.append(<span class="string">'t3'</span>)</span><br><span class="line">In [<span class="number">3</span>]: blog.tags</span><br><span class="line">Out[<span class="number">3</span>]: [<span class="string">'t1'</span>, <span class="string">'t2'</span>, <span class="string">'t3'</span>]</span><br></pre></td></tr></table></figure><h2 id="结语">结语</h2><p>上述内容并没有很复杂的操作，都是一些易于实现并且可以改善日常使用体验的方法。SQLAlchemy 还有很多骚操作可以讲，但是受限于本人的姿势水平，很多并没有实际使用过，也谈不上有什么见解。那就这样吧~</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;SQLAlchemy 是 Python 世界中最常用的 SQL 工具之一，包含 SQL 渲染引擎和 ORM 两大部分，平时使用最多的就是 ORM。在我看来平时很多使用 ORM
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>文本聚类系列教程：（一）jieba中文分词工具入门</title>
    <link href="http://weafteam.github.io/posts/575e441b/"/>
    <id>http://weafteam.github.io/posts/575e441b/</id>
    <published>2018-03-17T09:20:22.000Z</published>
    <updated>2018-05-29T01:27:49.779Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在学习文本分类（聚类）的相关知识，所以接下来准备先写一个关于这个方面的系列博客。</p></blockquote><hr><h1 id="写在前面">写在前面：</h1><p>先介绍下由我们四个人组成的组织：FOUR ELEMENTS。四元素分别对应WELL、EARTH、AIR、FLAME，根据首字母缩写，我们的博客主页得名WEAF。</p><p>接下来介绍下我自己，我叫Leno，对应于四元素里面的Well，目前研究生在读，方向为智能信息处理。我的博客主要会以日常遇到的问题以及学习的知识为主。</p><hr><h1 id="简单的介绍">简单的介绍：</h1><p>首先，我们要做的是对中文文本的聚类，如果做聚类的话，我们需要对文本的内容做分析，而分析的最小单位肯定是词。</p><p>其次，中文和英文的词是有区别的，最大的区别就是中文的词与词之间并不是用空格分隔开的，而且由于中国文化的博大精深，切词的时候我们需要考虑的词语组合情况就更多了。显然让我们自己去造一个这样的轮子有点不现实，其实像这样的工具，前辈们已经为我们做好了，而且超好用。</p><p>本文介绍的就是jieba中文分词，正如它的口号那样。如下图所示： <img src="https://i.loli.net/2018/03/17/5aace9320fbc3.png" alt="jieba.png"></p><p>当然，这里有两本秘籍<a href="https://github.com/fxsjy/jieba" target="_blank" rel="noopener">GitHub</a> &amp;&amp; <a href="http://www.oschina.net/p/jieba" target="_blank" rel="noopener">OSChina</a>，既然你我有缘，便免费赠予你。</p><hr><h1 id="安装">安装</h1><p>这年头，没有什么是一句pip install 解决不了的。不管2或者3，直接pip即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jieba</span><br></pre></td></tr></table></figure><hr><h1 id="结合官方demo理解jieba的三种切词模式">结合官方Demo理解jieba的三种切词模式</h1><p><strong>三种模式：</strong></p><ul><li>精确模式（默认模式）：它会试图将句子最精确的切开，适合文本分析。</li><li>全模式：不考虑歧义，这个模式会将所有的可以成词的词语都扫描出来，因而速度会非常快。</li><li>搜索引擎模式：该模式是在精确模式的基础上，对长词再进行切分，提高召回率，适用于搜索引擎分词。</li></ul><p><strong>官方Demo：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import jieba</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(&quot;我来到北京清华大学&quot;, cut_all=True)</span><br><span class="line">print(&quot;全模式: &quot; + &quot;/ &quot;.join(seg_list))  # 全模式</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(&quot;我来到北京清华大学&quot;, cut_all=False)</span><br><span class="line">print(&quot;精确模式: &quot; + &quot;/ &quot;.join(seg_list))  # 精确模式</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(&quot;他来到了网易杭研大厦&quot;)  # 默认是精确模式</span><br><span class="line">print(&quot;默认模式：&quot; + &quot;/ &quot;.join(seg_list))</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut_for_search(&quot;小明硕士毕业于中国科学院计算所，后在日本京都大学深造&quot;)  # 搜索引擎模式</span><br><span class="line">print(&quot;搜索引擎模式：&quot; + &quot;/ &quot;.join(seg_list))</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><p><img src="https://i.loli.net/2018/03/17/5aacfab51d67e.png" alt="Demo1.png"></p><p><strong>模式分析：</strong></p><p>这里我们先分析这三种模式，对于cut方法的讲解在后边会给出，so不要问我为啥不给出cut方法中第三个参数HMM。</p><p>通过对比前两条输出可以看出全模式情况下，它会找出所有可以组成词的划分，而精确模式与其对比给出的答案就会很清爽。所以结合上文所说，不难理解这两个模式的区别。</p><p>接下来我们看第四条输出，它是在精确模式的基础上对长词再做的划分。所以‘日本京都大学’，它会再次切分为‘日本’，‘京都’，‘大学’三个词，同理适用于‘中国科学院’。所以这个模式也不难理解吧。</p><p><strong>补充分析：</strong></p><p>最后看第三条输出内容，也许你会问，既然知道默认模式是精确模式了，为啥还要给出试例，况且还是一个不具有对比性质的对比。这里其实想说明的是：</p><p>‘杭研’并没有在词典中，但是jieba的Viterbi算法也将其识别了出来。</p><p>这时我们就需要考虑HMM这个参数了，关于HMM（Hidden Markov Model，HMM：隐马尔可夫模型），如果深究，那就需要另外一篇博文了，所以我们只要能理解官方给出的这句话即可：<strong>对于未登录词，采用了基于汉字成词能力的 HMM 模型，使用了 Viterbi 算法。</strong></p><p>可能说的比较干涩，我们实际测一下吧。</p><p><strong>补充测试代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import jieba</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(&quot;他来到了网易杭研大厦&quot;,HMM=False)</span><br><span class="line">print(&quot;HMM为False：&quot; + &quot;/ &quot;.join(seg_list))</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(&quot;他来到了网易杭研大厦&quot;,HMM=True)</span><br><span class="line">print(&quot;HMM为True：&quot; + &quot;/ &quot;.join(seg_list))</span><br></pre></td></tr></table></figure><p><strong>补充测试结果：</strong></p><p><img src="https://i.loli.net/2018/03/17/5aad1051896b9.png" alt="Demo1plus.png"></p><p>所以<strong>一般情况下</strong>，使用cut方法，不用考虑HMM这个参数就可以，让它默认为True即可，让Viterbi算法为我们识别新词。HMM也能有效的解决中文中的歧义问题。</p><p><strong>启用HMM并不适用所有情况，根据需要开启！！！</strong></p><p>关于切词的方法以及切词的注意事项，请大家参考上文给出的两个链接，这里我不再赘述。</p><hr><h1 id="基于tf-idf的关键词提取">基于TF-IDF的关键词提取</h1><p><strong>相关知识：</strong></p><p>对于一个文档，我们肯定不会对所有的词进行聚类，所以我们需要对文档进行关键词提取。</p><p>下面我们对TF-IDF做一下简单的说明。如果单讲这个知识点，拿出来又是一篇博文。不过后续我也会写一篇关于它的博文。暂时请大家自行查阅相关资料学习。</p><p>TF-IDF是一种统计方法，用于评估一个词对于一个文件集或者语料库中的一份文件的重要程度。</p><p>TF(term frequency)：指的是某一个给定的词语在该文件中出现的频率。公式如下：</p><p><span class="math inline">\(tf_i,_j = \frac{n_i,_j}{\sum_k n_k,_j}\)</span></p><p>IDF(Inverse document frequency)：是一个词语普遍重要性的度量。某一特定词语的IDF，可以由总文件数目除以包含该词语之文件的数目，再将得到的商取对数得到：</p><p><span class="math inline">\(idf(t,D) = log(\frac{N}{\lvert {d \in D, t \in d}\rvert})\)</span></p><p><strong>关键词提取：</strong></p><p>官方给了一个代码示例文件，源代码在这里：<a href="https://github.com/fxsjy/jieba/blob/master/test/extract_tags.py" target="_blank" rel="noopener">关键词提取源码</a> 但是为了结果显示得更清晰一点，我做了些许的改动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.path.append(&apos;../&apos;)</span><br><span class="line"></span><br><span class="line">import jieba</span><br><span class="line">import jieba.analyse</span><br><span class="line">from optparse import OptionParser</span><br><span class="line"></span><br><span class="line">USAGE = &quot;usage:    python extract_tags.py [file name] -k [top k]&quot;</span><br><span class="line"></span><br><span class="line">parser = OptionParser(USAGE)</span><br><span class="line">parser.add_option(&quot;-k&quot;, dest=&quot;topK&quot;)</span><br><span class="line">opt, args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if len(args) &lt; 1:</span><br><span class="line">    print(USAGE)</span><br><span class="line">    sys.exit(1)</span><br><span class="line"></span><br><span class="line">file_name = args[0]</span><br><span class="line"></span><br><span class="line">if opt.topK is None:</span><br><span class="line">    topK = 20</span><br><span class="line">else:</span><br><span class="line">    topK = int(opt.topK)</span><br><span class="line"></span><br><span class="line">content = open(file_name, &apos;rb&apos;).read()</span><br><span class="line"></span><br><span class="line">tags = jieba.analyse.extract_tags(content, topK=topK,withWeight=True)</span><br><span class="line"></span><br><span class="line">for i in tags :</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><p>先说下用法，官方在文件的第8行给出了用法，即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python extract_tags.py [file name] -k [top k]</span><br></pre></td></tr></table></figure><p>将这个Extract_tags.py文件和文本文件放在同一目录下，然后给利用如上命令便可得到文本的关键词。默认取得是top10，我改了下取了top20，我们这里做下测试（使用jieba的官方测试文档：《围城》），结果如下：</p><p><img src="https://i.loli.net/2018/03/18/5aade4db4fb52.png" alt="extract.png"></p><p><strong>分析：</strong></p><p>官方给的代码看着挺长，实际上超简单，其中重要的无非两句话，一句是读文件，另一句则是调用extract_tags()方法，我在原有的基础上设置了withWight=True，因而返回了一个权重值。大家如果嫌麻烦可以对上述关键代码进行抽取，写一个自己的测试。</p><hr><p>正如上图所示，‘自己’、‘知道’、‘先生’等等等等，像这些词语都是些没有实际意义的单词，所以在聚类的时候这些单词不应该做为聚类（或者分类）的标准，它们属于stop_words，中文的意思就是停用词，所以我们接下来处理这个问题。</p><h1 id="去除停用词">去除停用词</h1><p>去除停用词，我们需要知道哪些属于停用词，我在CSDN上找到了一个1893规模的停用词表，链接如下：<a href="http://blog.csdn.net/shijiebei2009/article/details/39696571" target="_blank" rel="noopener">最全中文停用词表整理（1893个）</a>。</p><p>我们接下来的工作思路是这样的，对《围城》（文件1.txt）进行切词，方法就是之前的cut()，读取StopWords文件，对比每个切分出来的单词是否是停用词，如果不是则加入到一个list中，然后再将这个list的内容存到另一个文件2.txt中，对文件2.txt使用之前说到的官方给的关键词提取文件做关键词提取即可。</p><p>去除停用词代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">import jieba</span><br><span class="line">from os import path</span><br><span class="line"></span><br><span class="line">d = path.dirname(__file__) # 获取当前文件的dir路径</span><br><span class="line">stopwords_path = &apos;stopwords1893.txt&apos;  # 停用词表路径</span><br><span class="line"></span><br><span class="line">text_path = &apos;txt/1.txt&apos; #《围城》的文本路径</span><br><span class="line">text = open(path.join(d, text_path),&apos;rb&apos;).read()</span><br><span class="line"></span><br><span class="line">def RmStopWords(text):</span><br><span class="line">    mywordlist = []</span><br><span class="line">    seg_list = jieba.cut(text, cut_all=False)</span><br><span class="line">    liststr=&quot;/ &quot;.join(seg_list) # 添加切分符</span><br><span class="line">    f_stop = open(stopwords_path)</span><br><span class="line">    try:</span><br><span class="line">        f_stop_text = f_stop.read()</span><br><span class="line">    finally:</span><br><span class="line">        f_stop.close( )</span><br><span class="line">    f_stop_seg_list=f_stop_text.split(&apos;\n&apos;) # 停用词是每行一个，所以用/n分离</span><br><span class="line">    for myword in liststr.split(&apos;/&apos;):</span><br><span class="line">        #对于每个切分的词都去停用词表中对比</span><br><span class="line">        if not(myword.strip() in f_stop_seg_list) and len(myword.strip())&gt;1:</span><br><span class="line">            mywordlist.append(myword)</span><br><span class="line">    return &apos;&apos;.join(mywordlist) #返回一个字符串</span><br><span class="line"></span><br><span class="line">txt2 = RmStopWords(text)</span><br><span class="line">text_write = &apos;txt/2.txt&apos;</span><br><span class="line">with open(text_write,&apos;w&apos;) as f:</span><br><span class="line">    f.write(txt2)</span><br><span class="line">    print(&quot;Success&quot;)</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><p><img src="https://i.loli.net/2018/03/18/5aadf03b5ddc2.png" alt="RmStopWords.png"></p><p><strong>分析：</strong></p><p>由上图可见，我们的去停用词的效果还不错。</p><h1 id="最后">最后：</h1><p>这篇博客先写到这里，下一篇博客我会讲到jieba中文分词的进阶篇。感谢阅读，如有问题可以通过邮件与我交流，邮箱：cliugeek@us-forever.com</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;最近在学习文本分类（聚类）的相关知识，所以接下来准备先写一个关于这个方面的系列博客。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;写在前面&quot;&gt;写在前面：&lt;/h1&gt;
&lt;p&gt;先介绍下由我们四个人组成的组织：FOUR
        
      
    
    </summary>
    
      <category term="文本聚类" scheme="http://weafteam.github.io/categories/%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/"/>
    
    
      <category term="文本聚类" scheme="http://weafteam.github.io/tags/%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>MySQL主从数据库的设置与Xtrabackup备份InnoDB(MySQL)</title>
    <link href="http://weafteam.github.io/posts/2f5dded6/"/>
    <id>http://weafteam.github.io/posts/2f5dded6/</id>
    <published>2018-03-17T08:08:56.000Z</published>
    <updated>2018-05-29T01:27:49.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一准备环境">一、准备环境</h2><ol type="1"><li>两台服务器：服务器A、服务器B</li><li>服务器A：Red Hat Enterprise Linux Server release 6.5 (Santiago)</li><li>服务器B：Red Hat Enterprise Linux Server release 6.5 (Santiago)</li><li>服务器A IP：172.16.125.50</li><li>服务器B IP：172.16.125.52</li><li>MySQL版本：5.6.23</li></ol><h2 id="二安装mysql">二、安装MySQL</h2><p>具体安装请见</p><ol type="1"><li><a href="http://us-forever.com/2018/01/15/LinuxMySQL的安装/" target="_blank" rel="noopener">LinuxMySQL的安装(1)</a></li><li><a href="http://us-forever.com/2018/02/02/LinuxMySQL的安装-2/" target="_blank" rel="noopener">LinuxMySQL的安装(2)</a></li><li><a href="http://us-forever.com/2018/02/08/LinuxMySQL的安装-3/" target="_blank" rel="noopener">LinuxMySQL的安装(3)</a></li></ol><a id="more"></a><h2 id="三主从库配置">三、主从库配置</h2><h3 id="主库在etcmy.cnf里添加以下内容">1、主库在/etc/my.cnf里添加以下内容</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#log日志</span></span><br><span class="line"><span class="attr">log_bin</span>=mysql_bin</span><br><span class="line"><span class="comment">#server ID</span></span><br><span class="line"><span class="attr">server_id</span>=<span class="number">2</span></span><br><span class="line"><span class="comment">#忽略同步的库</span></span><br><span class="line"><span class="attr">binlog-ignore-db</span>=information_schema</span><br><span class="line"><span class="attr">binlog-ignore-db</span>=cluster</span><br><span class="line"><span class="attr">binlog-ignore-db</span>=mysql</span><br><span class="line"><span class="comment">#需要同步的库</span></span><br><span class="line"><span class="attr">binlog-do-db</span>=test</span><br></pre></td></tr></table></figure><h3 id="从库在etcmy.cnf里添加以下内容">2、从库在/etc/my.cnf里添加以下内容</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">log_bin=mysql_bin</span><br><span class="line">server_id=3</span><br><span class="line">binlog-ignore-db=information_schema</span><br><span class="line">binlog-ignore-db=cluster</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">replicate-do-db=ufind_db</span><br><span class="line">replicate-ignore-db=mysql</span><br><span class="line">log-slave-updates</span><br><span class="line">slave-skip-errors=all</span><br><span class="line">slave-net-timeout=60</span><br></pre></td></tr></table></figure><h2 id="四主从库设置">四、主从库设置</h2><h3 id="进入主库我们在主库中创建一个的账户从库通过使用这个账号来同步数据">1、进入主库，我们在主库中创建一个的账户，从库通过使用这个账号来同步数据。</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">'repl'</span>@<span class="string">'172.16.125.52'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure><h3 id="赋予相应的权限">2、赋予相应的权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">FILE</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'repl'</span>@<span class="string">'172.16.125.52'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">REPLICATION</span> <span class="keyword">SLAVE</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'repl'</span>@<span class="string">'172.16.125.52'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure><h3 id="重启数据库主库执行以下命令">3、重启数据库（主库）执行以下命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW MASTER STATUS;</span><br></pre></td></tr></table></figure><p><img src="http://us-forever.com/img/mysqlsync.png"> 要记住以上的信息，在设置从库的时候需要填写并设置。</p><h3 id="在从库里边执行以下命令">4、在从库里边执行以下命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">change master to master_host=&apos;172.16.125.50&apos;,master_user=&apos;repl&apos;,master_password=&apos;123456&apos;,master_log_file=&apos;mysql_bin.000023&apos;, master_log_pos=120;</span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure><h3 id="然后执行一下命令查看状态">5、然后执行一下命令查看状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status \G;</span><br></pre></td></tr></table></figure><p>内容如下： <img src="http://us-forever.com/img/mysqlsync1.png"> <img src="http://us-forever.com/img/mysqlsync2.png"></p><h3 id="测试与提示">6、测试与提示</h3><p>后期的测试中我们只针对<strong>test</strong>库进行了同步。 所以只能针对<strong>test</strong>进行的操作才有效。</p><p>如果后期对一些列库进行操作，需要 添加相应的配置 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>主库配置文件</span><br><span class="line">binlog-do-db=test</span><br><span class="line"><span class="meta">#</span>从库配置文件</span><br><span class="line">replicate-do-db=test</span><br></pre></td></tr></table></figure></p><p>并查询出最新的master的状态，停止从库。并改变从库的配置重启同步。 五、Xtrabackup的简单介绍 ——————- Percona XtraBackup 是世界上唯一的开源免费的MySQL热备份软件，可以执行非阻塞操作 InnoDB和XtraDB数据库的备份。 Percona XtraBackup可提供以下优点：</p><ul><li>备份快速安全可靠</li><li>备份期间不间断的事务处理</li><li>节省磁盘空间和网络带宽</li><li>自动备份验证</li><li>更快的恢复时间保证正常工作</li></ul><p>Percona XtraBackup 为所有版本的Percona服务器，MySQL和MariaDB提供MySQL热备份。 它可执行 流媒体，压缩和增量MySQL备份。</p><h2 id="六xtrabackup的安装">六、Xtrabackup的安装</h2><p>如果在互联网下 可使用以下命令安装 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.4/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.4-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure></p><p>获取相应rpm包 安装部分依赖(不同的操作系统可能已安装的库不尽相同) <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-libs-compat-5.7.20-1.el7.x86_64.rpm</span><br><span class="line"><span class="meta">#</span>根据mysql版本而定</span><br><span class="line">yum list|grep perl</span><br><span class="line">yum -y install perl-DBI.x86_64 perl-DBD-MySQL.x86_64</span><br></pre></td></tr></table></figure></p><p>然后安装Xtrabackup <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh percona-xtrabackup-24-2.4.4-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure></p><p>参考： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install cmake gcc gcc-c++ libaio libaio-devel automake autoconf bison libtool ncurses-devel libgcrypt-devel libev-devel libcurl-devel vim-common</span><br></pre></td></tr></table></figure></p><h2 id="七xtrabackup备份mysql">七、Xtrabackup备份MySQL</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xtrabackup --defaults-file=/etc/my.cnf --user=root --password=root --host=localhost --backup --target-dir=/data/backups/</span><br><span class="line">可指定数据库--databases=test</span><br></pre></td></tr></table></figure><h2 id="八xtrabackup的备份恢复">八、Xtrabackup的备份恢复</h2><p>备份之前必须先关闭MySQL server 然后删除data目录（/var/lib/mysql一般情况是这个） <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xtrabackup  --copy-back --target-dir=/data/backups/</span><br></pre></td></tr></table></figure></p><p>执行完恢复之后需要设置文件权限 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql:mysql /var/lib/mysql</span><br></pre></td></tr></table></figure></p><p>然后启动mysql <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br><span class="line"><span class="meta">#</span>或者使用服务</span><br><span class="line">service mysqld start</span><br></pre></td></tr></table></figure></p><h2 id="九使用脚本自动备份7天之内的数据">九、使用脚本自动备份7天之内的数据</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line"># Database info</span><br><span class="line">DB_USER="root"</span><br><span class="line">DB_PASS="root"</span><br><span class="line">DB_HOST="localhost"</span><br><span class="line"></span><br><span class="line"># Others vars</span><br><span class="line">BCK_DIR="/opt/app/mysqlbackup"    #the backup file directory</span><br><span class="line">CONF_DIR="/etc/my.cnf"</span><br><span class="line">DATE=`date +%F`</span><br><span class="line">RMDATE=`date -d '-7 day' +%F`</span><br><span class="line"></span><br><span class="line"># TODO</span><br><span class="line"></span><br><span class="line">mkdir -p $BCK_DIR/$DATE/</span><br><span class="line">#Create dir for save backup data</span><br><span class="line">xtrabackup --defaults-file=$CONF_DIR --user=$DB_USER --password=$DB_PASS --host=$DB_HOST --backup --target-dir=$BCK_DIR/$DATE/</span><br><span class="line">#Backup mysql data</span><br><span class="line">rm -rf $BCK_DIR/$RMDATE</span><br><span class="line">#Delete the backup 7 days ago</span><br><span class="line">#热备份数据库</span><br></pre></td></tr></table></figure><p>加入crontab <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 2 * * * /bin/sh /home/scripts/mysqlbackup.sh</span><br></pre></td></tr></table></figure></p><p><a href="https://learn.percona.com/hubfs/Manuals/Percona_Xtra_Backup/Percona_XtraBackup_2.4/Percona-XtraBackup-2.4.9.pdf" target="_blank" rel="noopener">更多请参考官方文档</a></p>]]></content>
    
    <summary type="html">
    
      MySQL主从数据库的设置与Xtrabackup备份InnoDB(MySQL)
    
    </summary>
    
      <category term="Linux" scheme="http://weafteam.github.io/categories/Linux/"/>
    
    
      <category term="Linux运维" scheme="http://weafteam.github.io/tags/Linux%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow安装详解</title>
    <link href="http://weafteam.github.io/posts/8e8e4531/"/>
    <id>http://weafteam.github.io/posts/8e8e4531/</id>
    <published>2018-03-14T10:49:23.000Z</published>
    <updated>2018-08-28T03:32:09.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一篇文章-tensorflow-install">第一篇文章-TensorFlow Install</h1><ol type="1"><li>首先介绍一些我们这个组织，这是有四个人构成得一个组织，组织可以叫FOUR ELEMENTS。（也可以叫WEAF）分别对应WELL、EARTH、AIR、FLAME。（WEAF）。</li><li>其次我想做一下自我介绍，我的英文学名叫milittle。我开设的这个周刊名字叫AIR-周刊。希望把自己学习的一些内容分享给大家，也激励自己。学更多的知识。以后大家有什么要交流的，也可以一起交流。（邮箱地址会在文章末尾给出）</li></ol><p>接下来我讲一下我后续每周在<code>AIR-周刊</code>里面会讲到的内容：</p><ul><li>主要涉及TensorFlow框架使用多一些</li><li>后续也会分享一些机器学习方面的算法</li><li>也会有一些在人工智能方面的杂谈</li></ul><p>上面说了一些，我想把这块做好，文章内容有什么变化，后续的文章里面会有所提及。</p><p>今天就介绍一些TensorFlow的简述和安装：</p><ol type="1"><li>TensorFlow是Google公司在2015年12月份开源的一个机器学习库，代码链接<a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="noopener">TensorFLow</a>。</li><li>第二点为什么现在TensorFlow这么火，在人工智能界已经算得上是称霸的地位，我们可以从下面的图中可以看出TensorFlow的数据占据了一大半市场。</li></ol><p><img src="https://s1.ax1x.com/2018/03/14/94kzp6.jpg" alt="-"></p><ol start="3" type="1"><li>原因是什么呢<ul><li>最主要的原因就是本身具有图运算的这个概念。使用简单，而且可以让程序员快捷的实现一些算法。从而可以用TensorFlow解决一些现实中的问题。图运算的概念我们后续会慢慢深入。大家不要着急。</li><li>还有一个原因，我想不用说大家也都知道，既然说了是Google的开源框架，那么技术就一定很牛逼。引得广大程序员的喜爱也是必然发生的事情。</li><li>而且用这个框架可以快速的解决一些机器学习的算法问题。是的编程效率也不断提高。</li></ul></li><li>TensorFlow支持Mac、Windows、Linux。以后我们的实验有可能通过Windows进行，也有可能在Linux进行，而且以后的代码都是基于python3.X，所以希望大家可以实现基本的python3的语法知识和编程知识。还有就是TensorFlow支持CPU版本和GPU版本，安装的时候都有很多的注意事项，基于GPU版本的可能会比较麻烦。但是后续我会给大家出一个教程，分别在Windows下面和Linux下面配置自己的独立环境。让你的机器学习算法跑在你自己的机器上面。完成一些看起来炫酷的程序。</li></ol><p>接下来我介绍一下TensorFlow的Windows CPU安装方法：</p><ol type="1"><li>首先打开电脑，这个是一定的~</li><li>去TensorFlow的<a href="https://www.tensorflow.org/install/" target="_blank" rel="noopener">官网</a>下载Windows的版本。点击下面红色箭头的地方—随意，都可以跳转到一个关于windows安装的界面。（可能需要科学上网，逃）</li></ol><p><img src="https://s1.ax1x.com/2018/03/14/94AS1K.png" alt="-"></p><ol start="3" type="1"><li>点开界面以后的注意事项：<ul><li>windows7及其以后的操作系统版本</li><li>决定安装哪个TensorFlow的版本，GPU还是CPU（GPU会有有一些第三方的库依赖，CUDA），接下来我们的教程是CPU版本安装。</li><li>决定怎么安装TensorFlow：可选方式有native pip 和 Anaconda等（我们使用Anaconda）</li><li>最后一步验证你的安装效果</li></ul></li></ol><p>接下来一步一步来：</p><p>第一步、我们决定用Anaconda来安装TensorFlow，你要知道Anaconda是什么呢，它就是可以很好的管理python的一些依赖库。让你在不同python版本之间切换自如。所以我们使用这个工具来安装我们的TensorFlow。Anaconda也可以集成Spyder这些编程工具，使得你编写代码会方便一些。</p><p>第二步、首先你去<a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">Anaconda官网</a>下载windows版本的Anaconda，具体安装就和普通的安装软件类似。这个地方需要注意的是不同python版本需要不同的Anaconda，别下错了。</p><p>第三步、安装好以后，我们打开Anaconda的控制台，就是开始里面找到Anaconda的应用，然后里面有一个Anaconda Prompt。打开以后，我们就开始了我们创建一个独立的TensorFlow独立的环境。</p><blockquote><p><code>conda create -n tensorflow pip python=3.5</code></p><p>上面这命令的意思就是说在Anaconda管理的环境里面给我独立的创建一个python环境来，这个里面python的版本是3.5。注意一下，这个地方还没有安装tensorflow呢，上面的tensorflow只不过是创建的一个环境名字而已。</p></blockquote><p><img src="https://s1.ax1x.com/2018/03/14/94kjt1.png" alt="-"></p><blockquote><p><code>activate tensorflow</code></p><p>上面的命令是激活这个tensorflow的环境，你可以通过这个环境，添加一些你自己的python库，定制自己的python环境，这也是我使用Anaconda的原因，但是并不是只有Anaconda支持这样的方式。不要和我抬杠。</p></blockquote><p><img src="https://s1.ax1x.com/2018/03/14/94kXkR.png" alt="-"></p><p>第四步，也就是正儿八经的安装TensorFlow的阶段，<strong>这里解释一下，上面为什么我执行的是tensorflow1，因为我的电脑上面已经有tensorflow这个环境了</strong></p><blockquote><p><code>pip install --ignore-installed --upgrade tensorflow</code></p><p>这个命令就是使用pip正常的安装tensorflow，这里的pip管理起来和普通的pip管理是一个道理，这里就不赘述了。</p></blockquote><p><img src="https://s1.ax1x.com/2018/03/14/94kL79.png" alt="-"></p><p>第五步，测试TensorFlow是否安装上</p><blockquote><p><code>python</code></p><p>上面的命令是进入python解释器，然后执行下面的import语句</p><p><code>import tensorflow as tf</code></p><p>如果上面的命令执行完，如下图中一样，就算安装成功了，下面的那些语句是写了一个hello world！！！</p></blockquote><p><img src="https://s1.ax1x.com/2018/03/22/9Hf66P.png" alt="-"></p><p>今天是为了我们以后在TensorFlow上开发所做的准备。希望大家安装顺利。我的个人邮箱是air@weaf.top。有什么问题可以单独发邮件问我。感谢你们的驻足。有什么不好的地方，可以给出意见。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;第一篇文章-tensorflow-install&quot;&gt;第一篇文章-TensorFlow Install&lt;/h1&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;首先介绍一些我们这个组织，这是有四个人构成得一个组织，组织可以叫FOUR
        
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/categories/TensorFlow/"/>
    
    
      <category term="TensorFlow" scheme="http://weafteam.github.io/tags/TensorFlow/"/>
    
  </entry>
  
</feed>
